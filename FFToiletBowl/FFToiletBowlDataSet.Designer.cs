//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FFToiletBowl
{


    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FFToiletBowlDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FFToiletBowlDataSet : global::System.Data.DataSet
    {

        private StatsDataTable tableStats;

        private InjuredReserveDataTable tableInjuredReserve;

        private InjuryReportDataTable tableInjuryReport;

        private CityIslandRosterSpotsDataTable tableCityIslandRosterSpots;

        private CityIslandTeamsDataTable tableCityIslandTeams;

        private ScheduleDataTable tableSchedule;

        private PlayByPlayDataTable tablePlayByPlay;

        private ParsedPlayByPlayDataTable tableParsedPlayByPlay;

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FFToiletBowlDataSet()
        {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected FFToiletBowlDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
            base(info, context, false)
        {
            if ((this.IsBinarySerialized(info, context) == true))
            {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Stats"] != null))
                {
                    base.Tables.Add(new StatsDataTable(ds.Tables["Stats"]));
                }
                if ((ds.Tables["InjuredReserve"] != null))
                {
                    base.Tables.Add(new InjuredReserveDataTable(ds.Tables["InjuredReserve"]));
                }
                if ((ds.Tables["InjuryReport"] != null))
                {
                    base.Tables.Add(new InjuryReportDataTable(ds.Tables["InjuryReport"]));
                }
                if ((ds.Tables["CityIslandRosterSpots"] != null))
                {
                    base.Tables.Add(new CityIslandRosterSpotsDataTable(ds.Tables["CityIslandRosterSpots"]));
                }
                if ((ds.Tables["CityIslandTeams"] != null))
                {
                    base.Tables.Add(new CityIslandTeamsDataTable(ds.Tables["CityIslandTeams"]));
                }
                if ((ds.Tables["Schedule"] != null))
                {
                    base.Tables.Add(new ScheduleDataTable(ds.Tables["Schedule"]));
                }
                if ((ds.Tables["PlayByPlay"] != null))
                {
                    base.Tables.Add(new PlayByPlayDataTable(ds.Tables["PlayByPlay"]));
                }
                if ((ds.Tables["ParsedPlayByPlay"] != null))
                {
                    base.Tables.Add(new ParsedPlayByPlayDataTable(ds.Tables["ParsedPlayByPlay"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StatsDataTable Stats
        {
            get
            {
                return this.tableStats;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InjuredReserveDataTable InjuredReserve
        {
            get
            {
                return this.tableInjuredReserve;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InjuryReportDataTable InjuryReport
        {
            get
            {
                return this.tableInjuryReport;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CityIslandRosterSpotsDataTable CityIslandRosterSpots
        {
            get
            {
                return this.tableCityIslandRosterSpots;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CityIslandTeamsDataTable CityIslandTeams
        {
            get
            {
                return this.tableCityIslandTeams;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScheduleDataTable Schedule
        {
            get
            {
                return this.tableSchedule;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlayByPlayDataTable PlayByPlay
        {
            get
            {
                return this.tablePlayByPlay;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParsedPlayByPlayDataTable ParsedPlayByPlay
        {
            get
            {
                return this.tableParsedPlayByPlay;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone()
        {
            FFToiletBowlDataSet cln = ((FFToiletBowlDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
        {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Stats"] != null))
                {
                    base.Tables.Add(new StatsDataTable(ds.Tables["Stats"]));
                }
                if ((ds.Tables["InjuredReserve"] != null))
                {
                    base.Tables.Add(new InjuredReserveDataTable(ds.Tables["InjuredReserve"]));
                }
                if ((ds.Tables["InjuryReport"] != null))
                {
                    base.Tables.Add(new InjuryReportDataTable(ds.Tables["InjuryReport"]));
                }
                if ((ds.Tables["CityIslandRosterSpots"] != null))
                {
                    base.Tables.Add(new CityIslandRosterSpotsDataTable(ds.Tables["CityIslandRosterSpots"]));
                }
                if ((ds.Tables["CityIslandTeams"] != null))
                {
                    base.Tables.Add(new CityIslandTeamsDataTable(ds.Tables["CityIslandTeams"]));
                }
                if ((ds.Tables["Schedule"] != null))
                {
                    base.Tables.Add(new ScheduleDataTable(ds.Tables["Schedule"]));
                }
                if ((ds.Tables["PlayByPlay"] != null))
                {
                    base.Tables.Add(new PlayByPlayDataTable(ds.Tables["PlayByPlay"]));
                }
                if ((ds.Tables["ParsedPlayByPlay"] != null))
                {
                    base.Tables.Add(new ParsedPlayByPlayDataTable(ds.Tables["ParsedPlayByPlay"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars()
        {
            this.InitVars(true);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable)
        {
            this.tableStats = ((StatsDataTable)(base.Tables["Stats"]));
            if ((initTable == true))
            {
                if ((this.tableStats != null))
                {
                    this.tableStats.InitVars();
                }
            }
            this.tableInjuredReserve = ((InjuredReserveDataTable)(base.Tables["InjuredReserve"]));
            if ((initTable == true))
            {
                if ((this.tableInjuredReserve != null))
                {
                    this.tableInjuredReserve.InitVars();
                }
            }
            this.tableInjuryReport = ((InjuryReportDataTable)(base.Tables["InjuryReport"]));
            if ((initTable == true))
            {
                if ((this.tableInjuryReport != null))
                {
                    this.tableInjuryReport.InitVars();
                }
            }
            this.tableCityIslandRosterSpots = ((CityIslandRosterSpotsDataTable)(base.Tables["CityIslandRosterSpots"]));
            if ((initTable == true))
            {
                if ((this.tableCityIslandRosterSpots != null))
                {
                    this.tableCityIslandRosterSpots.InitVars();
                }
            }
            this.tableCityIslandTeams = ((CityIslandTeamsDataTable)(base.Tables["CityIslandTeams"]));
            if ((initTable == true))
            {
                if ((this.tableCityIslandTeams != null))
                {
                    this.tableCityIslandTeams.InitVars();
                }
            }
            this.tableSchedule = ((ScheduleDataTable)(base.Tables["Schedule"]));
            if ((initTable == true))
            {
                if ((this.tableSchedule != null))
                {
                    this.tableSchedule.InitVars();
                }
            }
            this.tablePlayByPlay = ((PlayByPlayDataTable)(base.Tables["PlayByPlay"]));
            if ((initTable == true))
            {
                if ((this.tablePlayByPlay != null))
                {
                    this.tablePlayByPlay.InitVars();
                }
            }
            this.tableParsedPlayByPlay = ((ParsedPlayByPlayDataTable)(base.Tables["ParsedPlayByPlay"]));
            if ((initTable == true))
            {
                if ((this.tableParsedPlayByPlay != null))
                {
                    this.tableParsedPlayByPlay.InitVars();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass()
        {
            this.DataSetName = "FFToiletBowlDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FFToiletBowlDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStats = new StatsDataTable();
            base.Tables.Add(this.tableStats);
            this.tableInjuredReserve = new InjuredReserveDataTable();
            base.Tables.Add(this.tableInjuredReserve);
            this.tableInjuryReport = new InjuryReportDataTable();
            base.Tables.Add(this.tableInjuryReport);
            this.tableCityIslandRosterSpots = new CityIslandRosterSpotsDataTable();
            base.Tables.Add(this.tableCityIslandRosterSpots);
            this.tableCityIslandTeams = new CityIslandTeamsDataTable();
            base.Tables.Add(this.tableCityIslandTeams);
            this.tableSchedule = new ScheduleDataTable();
            base.Tables.Add(this.tableSchedule);
            this.tablePlayByPlay = new PlayByPlayDataTable();
            base.Tables.Add(this.tablePlayByPlay);
            this.tableParsedPlayByPlay = new ParsedPlayByPlayDataTable();
            base.Tables.Add(this.tableParsedPlayByPlay);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeStats()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeInjuredReserve()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeInjuryReport()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCityIslandRosterSpots()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCityIslandTeams()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSchedule()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePlayByPlay()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeParsedPlayByPlay()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
        {
            FFToiletBowlDataSet ds = new FFToiletBowlDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try
                {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                    {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte())); )
                            {
                                ;
                            }
                            if ((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if ((s1 != null))
                    {
                        s1.Close();
                    }
                    if ((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void StatsRowChangeEventHandler(object sender, StatsRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void InjuredReserveRowChangeEventHandler(object sender, InjuredReserveRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void InjuryReportRowChangeEventHandler(object sender, InjuryReportRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CityIslandRosterSpotsRowChangeEventHandler(object sender, CityIslandRosterSpotsRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CityIslandTeamsRowChangeEventHandler(object sender, CityIslandTeamsRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ScheduleRowChangeEventHandler(object sender, ScheduleRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PlayByPlayRowChangeEventHandler(object sender, PlayByPlayRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ParsedPlayByPlayRowChangeEventHandler(object sender, ParsedPlayByPlayRowChangeEvent e);

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StatsDataTable : global::System.Data.TypedTableBase<StatsRow>
        {

            private global::System.Data.DataColumn columnPlayerID;

            private global::System.Data.DataColumn columnPlayer;

            private global::System.Data.DataColumn columnPos;

            private global::System.Data.DataColumn columnTeam;

            private global::System.Data.DataColumn columnYear;

            private global::System.Data.DataColumn columnGm;

            private global::System.Data.DataColumn columnPaComp;

            private global::System.Data.DataColumn columnPaAtt;

            private global::System.Data.DataColumn columnPaYd;

            private global::System.Data.DataColumn columnPaTD;

            private global::System.Data.DataColumn columnPaINT;

            private global::System.Data.DataColumn columnRuAtt;

            private global::System.Data.DataColumn columnRuYd;

            private global::System.Data.DataColumn columnRuTD;

            private global::System.Data.DataColumn columnReTgt;

            private global::System.Data.DataColumn columnReRec;

            private global::System.Data.DataColumn columnReYd;

            private global::System.Data.DataColumn columnReTD;

            private global::System.Data.DataColumn columnKiFGM;

            private global::System.Data.DataColumn columnKiFGA;

            private global::System.Data.DataColumn columnKiFGP;

            private global::System.Data.DataColumn columnKiEPM;

            private global::System.Data.DataColumn columnKiEPA;

            private global::System.Data.DataColumn columnDSack;

            private global::System.Data.DataColumn columnDFR;

            private global::System.Data.DataColumn columnDINT;

            private global::System.Data.DataColumn columnDTD;

            private global::System.Data.DataColumn columnDPA;

            private global::System.Data.DataColumn columnDPaYd;

            private global::System.Data.DataColumn columnDRuYd;

            private global::System.Data.DataColumn columnDSafety;

            private global::System.Data.DataColumn columnDKickTD;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StatsDataTable()
            {
                this.TableName = "Stats";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal StatsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected StatsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlayerIDColumn
            {
                get
                {
                    return this.columnPlayerID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlayerColumn
            {
                get
                {
                    return this.columnPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PosColumn
            {
                get
                {
                    return this.columnPos;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TeamColumn
            {
                get
                {
                    return this.columnTeam;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn YearColumn
            {
                get
                {
                    return this.columnYear;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GmColumn
            {
                get
                {
                    return this.columnGm;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PaCompColumn
            {
                get
                {
                    return this.columnPaComp;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PaAttColumn
            {
                get
                {
                    return this.columnPaAtt;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PaYdColumn
            {
                get
                {
                    return this.columnPaYd;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PaTDColumn
            {
                get
                {
                    return this.columnPaTD;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PaINTColumn
            {
                get
                {
                    return this.columnPaINT;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RuAttColumn
            {
                get
                {
                    return this.columnRuAtt;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RuYdColumn
            {
                get
                {
                    return this.columnRuYd;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RuTDColumn
            {
                get
                {
                    return this.columnRuTD;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ReTgtColumn
            {
                get
                {
                    return this.columnReTgt;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ReRecColumn
            {
                get
                {
                    return this.columnReRec;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ReYdColumn
            {
                get
                {
                    return this.columnReYd;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ReTDColumn
            {
                get
                {
                    return this.columnReTD;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KiFGMColumn
            {
                get
                {
                    return this.columnKiFGM;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KiFGAColumn
            {
                get
                {
                    return this.columnKiFGA;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KiFGPColumn
            {
                get
                {
                    return this.columnKiFGP;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KiEPMColumn
            {
                get
                {
                    return this.columnKiEPM;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KiEPAColumn
            {
                get
                {
                    return this.columnKiEPA;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSackColumn
            {
                get
                {
                    return this.columnDSack;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DFRColumn
            {
                get
                {
                    return this.columnDFR;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DINTColumn
            {
                get
                {
                    return this.columnDINT;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTDColumn
            {
                get
                {
                    return this.columnDTD;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DPAColumn
            {
                get
                {
                    return this.columnDPA;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DPaYdColumn
            {
                get
                {
                    return this.columnDPaYd;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DRuYdColumn
            {
                get
                {
                    return this.columnDRuYd;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSafetyColumn
            {
                get
                {
                    return this.columnDSafety;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DKickTDColumn
            {
                get
                {
                    return this.columnDKickTD;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StatsRow this[int index]
            {
                get
                {
                    return ((StatsRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StatsRowChangeEventHandler StatsRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StatsRowChangeEventHandler StatsRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StatsRowChangeEventHandler StatsRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StatsRowChangeEventHandler StatsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddStatsRow(StatsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StatsRow AddStatsRow(
                        string PlayerID,
                        string Player,
                        string Pos,
                        string Team,
                        int Year,
                        int Gm,
                        int PaComp,
                        int PaAtt,
                        int PaYd,
                        int PaTD,
                        int PaINT,
                        int RuAtt,
                        int RuYd,
                        int RuTD,
                        int ReTgt,
                        int ReRec,
                        int ReYd,
                        int ReTD,
                        int KiFGM,
                        int KiFGA,
                        decimal KiFGP,
                        int KiEPM,
                        int KiEPA,
                        int DSack,
                        int DFR,
                        int DINT,
                        int DTD,
                        int DPA,
                        int DPaYd,
                        int DRuYd,
                        int DSafety,
                        int DKickTD)
            {
                StatsRow rowStatsRow = ((StatsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PlayerID,
                        Player,
                        Pos,
                        Team,
                        Year,
                        Gm,
                        PaComp,
                        PaAtt,
                        PaYd,
                        PaTD,
                        PaINT,
                        RuAtt,
                        RuYd,
                        RuTD,
                        ReTgt,
                        ReRec,
                        ReYd,
                        ReTD,
                        KiFGM,
                        KiFGA,
                        KiFGP,
                        KiEPM,
                        KiEPA,
                        DSack,
                        DFR,
                        DINT,
                        DTD,
                        DPA,
                        DPaYd,
                        DRuYd,
                        DSafety,
                        DKickTD};
                rowStatsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStatsRow);
                return rowStatsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                StatsDataTable cln = ((StatsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new StatsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnPlayerID = base.Columns["PlayerID"];
                this.columnPlayer = base.Columns["Player"];
                this.columnPos = base.Columns["Pos"];
                this.columnTeam = base.Columns["Team"];
                this.columnYear = base.Columns["Year"];
                this.columnGm = base.Columns["Gm"];
                this.columnPaComp = base.Columns["PaComp"];
                this.columnPaAtt = base.Columns["PaAtt"];
                this.columnPaYd = base.Columns["PaYd"];
                this.columnPaTD = base.Columns["PaTD"];
                this.columnPaINT = base.Columns["PaINT"];
                this.columnRuAtt = base.Columns["RuAtt"];
                this.columnRuYd = base.Columns["RuYd"];
                this.columnRuTD = base.Columns["RuTD"];
                this.columnReTgt = base.Columns["ReTgt"];
                this.columnReRec = base.Columns["ReRec"];
                this.columnReYd = base.Columns["ReYd"];
                this.columnReTD = base.Columns["ReTD"];
                this.columnKiFGM = base.Columns["KiFGM"];
                this.columnKiFGA = base.Columns["KiFGA"];
                this.columnKiFGP = base.Columns["KiFGP"];
                this.columnKiEPM = base.Columns["KiEPM"];
                this.columnKiEPA = base.Columns["KiEPA"];
                this.columnDSack = base.Columns["DSack"];
                this.columnDFR = base.Columns["DFR"];
                this.columnDINT = base.Columns["DINT"];
                this.columnDTD = base.Columns["DTD"];
                this.columnDPA = base.Columns["DPA"];
                this.columnDPaYd = base.Columns["DPaYd"];
                this.columnDRuYd = base.Columns["DRuYd"];
                this.columnDSafety = base.Columns["DSafety"];
                this.columnDKickTD = base.Columns["DKickTD"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnPlayerID = new global::System.Data.DataColumn("PlayerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerID);
                this.columnPlayer = new global::System.Data.DataColumn("Player", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayer);
                this.columnPos = new global::System.Data.DataColumn("Pos", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPos);
                this.columnTeam = new global::System.Data.DataColumn("Team", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnGm = new global::System.Data.DataColumn("Gm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGm);
                this.columnPaComp = new global::System.Data.DataColumn("PaComp", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaComp);
                this.columnPaAtt = new global::System.Data.DataColumn("PaAtt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaAtt);
                this.columnPaYd = new global::System.Data.DataColumn("PaYd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaYd);
                this.columnPaTD = new global::System.Data.DataColumn("PaTD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaTD);
                this.columnPaINT = new global::System.Data.DataColumn("PaINT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaINT);
                this.columnRuAtt = new global::System.Data.DataColumn("RuAtt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuAtt);
                this.columnRuYd = new global::System.Data.DataColumn("RuYd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuYd);
                this.columnRuTD = new global::System.Data.DataColumn("RuTD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuTD);
                this.columnReTgt = new global::System.Data.DataColumn("ReTgt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReTgt);
                this.columnReRec = new global::System.Data.DataColumn("ReRec", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReRec);
                this.columnReYd = new global::System.Data.DataColumn("ReYd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReYd);
                this.columnReTD = new global::System.Data.DataColumn("ReTD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReTD);
                this.columnKiFGM = new global::System.Data.DataColumn("KiFGM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKiFGM);
                this.columnKiFGA = new global::System.Data.DataColumn("KiFGA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKiFGA);
                this.columnKiFGP = new global::System.Data.DataColumn("KiFGP", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKiFGP);
                this.columnKiEPM = new global::System.Data.DataColumn("KiEPM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKiEPM);
                this.columnKiEPA = new global::System.Data.DataColumn("KiEPA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKiEPA);
                this.columnDSack = new global::System.Data.DataColumn("DSack", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSack);
                this.columnDFR = new global::System.Data.DataColumn("DFR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDFR);
                this.columnDINT = new global::System.Data.DataColumn("DINT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDINT);
                this.columnDTD = new global::System.Data.DataColumn("DTD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTD);
                this.columnDPA = new global::System.Data.DataColumn("DPA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDPA);
                this.columnDPaYd = new global::System.Data.DataColumn("DPaYd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDPaYd);
                this.columnDRuYd = new global::System.Data.DataColumn("DRuYd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRuYd);
                this.columnDSafety = new global::System.Data.DataColumn("DSafety", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSafety);
                this.columnDKickTD = new global::System.Data.DataColumn("DKickTD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDKickTD);
                this.columnPlayerID.AllowDBNull = false;
                this.columnPlayerID.MaxLength = 150;
                this.columnPlayer.AllowDBNull = false;
                this.columnPlayer.MaxLength = 100;
                this.columnPos.AllowDBNull = false;
                this.columnPos.MaxLength = 5;
                this.columnTeam.AllowDBNull = false;
                this.columnTeam.MaxLength = 5;
                this.columnYear.AllowDBNull = false;
                this.columnGm.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StatsRow NewStatsRow()
            {
                return ((StatsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new StatsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(StatsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.StatsRowChanged != null))
                {
                    this.StatsRowChanged(this, new StatsRowChangeEvent(((StatsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.StatsRowChanging != null))
                {
                    this.StatsRowChanging(this, new StatsRowChangeEvent(((StatsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.StatsRowDeleted != null))
                {
                    this.StatsRowDeleted(this, new StatsRowChangeEvent(((StatsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.StatsRowDeleting != null))
                {
                    this.StatsRowDeleting(this, new StatsRowChangeEvent(((StatsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveStatsRow(StatsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FFToiletBowlDataSet ds = new FFToiletBowlDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StatsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InjuredReserveDataTable : global::System.Data.TypedTableBase<InjuredReserveRow>
        {

            private global::System.Data.DataColumn columnInjuredID;

            private global::System.Data.DataColumn columnGm;

            private global::System.Data.DataColumn columnYear;

            private global::System.Data.DataColumn columnPlayer;

            private global::System.Data.DataColumn columnPos;

            private global::System.Data.DataColumn columnTeam;

            private global::System.Data.DataColumn columnStatus;

            private global::System.Data.DataColumn columnStatsPlayerID;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuredReserveDataTable()
            {
                this.TableName = "InjuredReserve";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InjuredReserveDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected InjuredReserveDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InjuredIDColumn
            {
                get
                {
                    return this.columnInjuredID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GmColumn
            {
                get
                {
                    return this.columnGm;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn YearColumn
            {
                get
                {
                    return this.columnYear;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlayerColumn
            {
                get
                {
                    return this.columnPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PosColumn
            {
                get
                {
                    return this.columnPos;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TeamColumn
            {
                get
                {
                    return this.columnTeam;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StatsPlayerIDColumn
            {
                get
                {
                    return this.columnStatsPlayerID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuredReserveRow this[int index]
            {
                get
                {
                    return ((InjuredReserveRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InjuredReserveRowChangeEventHandler InjuredReserveRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InjuredReserveRowChangeEventHandler InjuredReserveRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InjuredReserveRowChangeEventHandler InjuredReserveRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InjuredReserveRowChangeEventHandler InjuredReserveRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddInjuredReserveRow(InjuredReserveRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuredReserveRow AddInjuredReserveRow(string InjuredID, int Gm, int Year, string Player, string Pos, string Team, string Status, string StatsPlayerID)
            {
                InjuredReserveRow rowInjuredReserveRow = ((InjuredReserveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InjuredID,
                        Gm,
                        Year,
                        Player,
                        Pos,
                        Team,
                        Status,
                        StatsPlayerID};
                rowInjuredReserveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInjuredReserveRow);
                return rowInjuredReserveRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                InjuredReserveDataTable cln = ((InjuredReserveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new InjuredReserveDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnInjuredID = base.Columns["InjuredID"];
                this.columnGm = base.Columns["Gm"];
                this.columnYear = base.Columns["Year"];
                this.columnPlayer = base.Columns["Player"];
                this.columnPos = base.Columns["Pos"];
                this.columnTeam = base.Columns["Team"];
                this.columnStatus = base.Columns["Status"];
                this.columnStatsPlayerID = base.Columns["StatsPlayerID"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnInjuredID = new global::System.Data.DataColumn("InjuredID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInjuredID);
                this.columnGm = new global::System.Data.DataColumn("Gm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGm);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnPlayer = new global::System.Data.DataColumn("Player", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayer);
                this.columnPos = new global::System.Data.DataColumn("Pos", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPos);
                this.columnTeam = new global::System.Data.DataColumn("Team", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnStatsPlayerID = new global::System.Data.DataColumn("StatsPlayerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatsPlayerID);
                this.columnInjuredID.AllowDBNull = false;
                this.columnInjuredID.MaxLength = 200;
                this.columnGm.AllowDBNull = false;
                this.columnYear.AllowDBNull = false;
                this.columnPlayer.AllowDBNull = false;
                this.columnPlayer.MaxLength = 200;
                this.columnPos.AllowDBNull = false;
                this.columnPos.MaxLength = 5;
                this.columnTeam.AllowDBNull = false;
                this.columnTeam.MaxLength = 5;
                this.columnStatus.MaxLength = 30;
                this.columnStatsPlayerID.MaxLength = 150;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuredReserveRow NewInjuredReserveRow()
            {
                return ((InjuredReserveRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new InjuredReserveRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(InjuredReserveRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.InjuredReserveRowChanged != null))
                {
                    this.InjuredReserveRowChanged(this, new InjuredReserveRowChangeEvent(((InjuredReserveRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.InjuredReserveRowChanging != null))
                {
                    this.InjuredReserveRowChanging(this, new InjuredReserveRowChangeEvent(((InjuredReserveRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.InjuredReserveRowDeleted != null))
                {
                    this.InjuredReserveRowDeleted(this, new InjuredReserveRowChangeEvent(((InjuredReserveRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.InjuredReserveRowDeleting != null))
                {
                    this.InjuredReserveRowDeleting(this, new InjuredReserveRowChangeEvent(((InjuredReserveRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveInjuredReserveRow(InjuredReserveRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FFToiletBowlDataSet ds = new FFToiletBowlDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InjuredReserveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InjuryReportDataTable : global::System.Data.TypedTableBase<InjuryReportRow>
        {

            private global::System.Data.DataColumn columnPlayer;

            private global::System.Data.DataColumn columnPos;

            private global::System.Data.DataColumn columnEspnPlayerURL;

            private global::System.Data.DataColumn columnEspnPlayerID;

            private global::System.Data.DataColumn columnEspnTeam;

            private global::System.Data.DataColumn columnTeam;

            private global::System.Data.DataColumn columnStatus;

            private global::System.Data.DataColumn columnReportDate;

            private global::System.Data.DataColumn columnLoadDate;

            private global::System.Data.DataColumn columnLoadID;

            private global::System.Data.DataColumn columnStatsPlayerID;

            private global::System.Data.DataColumn columnYear;

            private global::System.Data.DataColumn columnGm;

            private global::System.Data.DataColumn columnInjury;

            private global::System.Data.DataColumn columnNotes;

            private global::System.Data.DataColumn columnSource;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuryReportDataTable()
            {
                this.TableName = "InjuryReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InjuryReportDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected InjuryReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlayerColumn
            {
                get
                {
                    return this.columnPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PosColumn
            {
                get
                {
                    return this.columnPos;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EspnPlayerURLColumn
            {
                get
                {
                    return this.columnEspnPlayerURL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EspnPlayerIDColumn
            {
                get
                {
                    return this.columnEspnPlayerID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EspnTeamColumn
            {
                get
                {
                    return this.columnEspnTeam;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TeamColumn
            {
                get
                {
                    return this.columnTeam;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ReportDateColumn
            {
                get
                {
                    return this.columnReportDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LoadDateColumn
            {
                get
                {
                    return this.columnLoadDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LoadIDColumn
            {
                get
                {
                    return this.columnLoadID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StatsPlayerIDColumn
            {
                get
                {
                    return this.columnStatsPlayerID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn YearColumn
            {
                get
                {
                    return this.columnYear;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GmColumn
            {
                get
                {
                    return this.columnGm;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InjuryColumn
            {
                get
                {
                    return this.columnInjury;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SourceColumn
            {
                get
                {
                    return this.columnSource;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuryReportRow this[int index]
            {
                get
                {
                    return ((InjuryReportRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InjuryReportRowChangeEventHandler InjuryReportRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InjuryReportRowChangeEventHandler InjuryReportRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InjuryReportRowChangeEventHandler InjuryReportRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InjuryReportRowChangeEventHandler InjuryReportRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddInjuryReportRow(InjuryReportRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuryReportRow AddInjuryReportRow(
                        string Player,
                        string Pos,
                        string EspnPlayerURL,
                        string EspnPlayerID,
                        string EspnTeam,
                        string Team,
                        string Status,
                        System.DateTime ReportDate,
                        System.DateTime LoadDate,
                        string LoadID,
                        string StatsPlayerID,
                        int Year,
                        int Gm,
                        string Injury,
                        string Notes,
                        string Source)
            {
                InjuryReportRow rowInjuryReportRow = ((InjuryReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Player,
                        Pos,
                        EspnPlayerURL,
                        EspnPlayerID,
                        EspnTeam,
                        Team,
                        Status,
                        ReportDate,
                        LoadDate,
                        LoadID,
                        StatsPlayerID,
                        Year,
                        Gm,
                        Injury,
                        Notes,
                        Source};
                rowInjuryReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInjuryReportRow);
                return rowInjuryReportRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                InjuryReportDataTable cln = ((InjuryReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new InjuryReportDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnPlayer = base.Columns["Player"];
                this.columnPos = base.Columns["Pos"];
                this.columnEspnPlayerURL = base.Columns["EspnPlayerURL"];
                this.columnEspnPlayerID = base.Columns["EspnPlayerID"];
                this.columnEspnTeam = base.Columns["EspnTeam"];
                this.columnTeam = base.Columns["Team"];
                this.columnStatus = base.Columns["Status"];
                this.columnReportDate = base.Columns["ReportDate"];
                this.columnLoadDate = base.Columns["LoadDate"];
                this.columnLoadID = base.Columns["LoadID"];
                this.columnStatsPlayerID = base.Columns["StatsPlayerID"];
                this.columnYear = base.Columns["Year"];
                this.columnGm = base.Columns["Gm"];
                this.columnInjury = base.Columns["Injury"];
                this.columnNotes = base.Columns["Notes"];
                this.columnSource = base.Columns["Source"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnPlayer = new global::System.Data.DataColumn("Player", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayer);
                this.columnPos = new global::System.Data.DataColumn("Pos", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPos);
                this.columnEspnPlayerURL = new global::System.Data.DataColumn("EspnPlayerURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEspnPlayerURL);
                this.columnEspnPlayerID = new global::System.Data.DataColumn("EspnPlayerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEspnPlayerID);
                this.columnEspnTeam = new global::System.Data.DataColumn("EspnTeam", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEspnTeam);
                this.columnTeam = new global::System.Data.DataColumn("Team", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnReportDate = new global::System.Data.DataColumn("ReportDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportDate);
                this.columnLoadDate = new global::System.Data.DataColumn("LoadDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadDate);
                this.columnLoadID = new global::System.Data.DataColumn("LoadID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadID);
                this.columnStatsPlayerID = new global::System.Data.DataColumn("StatsPlayerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatsPlayerID);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnGm = new global::System.Data.DataColumn("Gm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGm);
                this.columnInjury = new global::System.Data.DataColumn("Injury", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInjury);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnPlayer.MaxLength = 50;
                this.columnPos.AllowDBNull = false;
                this.columnPos.MaxLength = 5;
                this.columnEspnPlayerURL.AllowDBNull = false;
                this.columnEspnPlayerURL.MaxLength = 250;
                this.columnEspnPlayerID.MaxLength = 150;
                this.columnEspnTeam.AllowDBNull = false;
                this.columnEspnTeam.MaxLength = 30;
                this.columnTeam.MaxLength = 5;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
                this.columnReportDate.AllowDBNull = false;
                this.columnLoadID.MaxLength = 50;
                this.columnYear.AllowDBNull = false;
                this.columnGm.AllowDBNull = false;
                this.columnInjury.MaxLength = 20;
                this.columnNotes.MaxLength = 80;
                this.columnSource.MaxLength = 10;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuryReportRow NewInjuryReportRow()
            {
                return ((InjuryReportRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new InjuryReportRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(InjuryReportRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.InjuryReportRowChanged != null))
                {
                    this.InjuryReportRowChanged(this, new InjuryReportRowChangeEvent(((InjuryReportRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.InjuryReportRowChanging != null))
                {
                    this.InjuryReportRowChanging(this, new InjuryReportRowChangeEvent(((InjuryReportRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.InjuryReportRowDeleted != null))
                {
                    this.InjuryReportRowDeleted(this, new InjuryReportRowChangeEvent(((InjuryReportRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.InjuryReportRowDeleting != null))
                {
                    this.InjuryReportRowDeleting(this, new InjuryReportRowChangeEvent(((InjuryReportRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveInjuryReportRow(InjuryReportRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FFToiletBowlDataSet ds = new FFToiletBowlDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InjuryReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CityIslandRosterSpotsDataTable : global::System.Data.TypedTableBase<CityIslandRosterSpotsRow>
        {

            private global::System.Data.DataColumn columnPos;

            private global::System.Data.DataColumn columnSlot;

            private global::System.Data.DataColumn columnStarter;

            private global::System.Data.DataColumn columnEspnPlayerID;

            private global::System.Data.DataColumn columnStatsPlayerID;

            private global::System.Data.DataColumn columnPlayer;

            private global::System.Data.DataColumn columnNflTeam;

            private global::System.Data.DataColumn columnLoadDate;

            private global::System.Data.DataColumn columnLoadID;

            private global::System.Data.DataColumn columnTeamID;

            private global::System.Data.DataColumn columnRosterSlot;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandRosterSpotsDataTable()
            {
                this.TableName = "CityIslandRosterSpots";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CityIslandRosterSpotsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CityIslandRosterSpotsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PosColumn
            {
                get
                {
                    return this.columnPos;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SlotColumn
            {
                get
                {
                    return this.columnSlot;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StarterColumn
            {
                get
                {
                    return this.columnStarter;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EspnPlayerIDColumn
            {
                get
                {
                    return this.columnEspnPlayerID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StatsPlayerIDColumn
            {
                get
                {
                    return this.columnStatsPlayerID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlayerColumn
            {
                get
                {
                    return this.columnPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NflTeamColumn
            {
                get
                {
                    return this.columnNflTeam;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LoadDateColumn
            {
                get
                {
                    return this.columnLoadDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LoadIDColumn
            {
                get
                {
                    return this.columnLoadID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TeamIDColumn
            {
                get
                {
                    return this.columnTeamID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RosterSlotColumn
            {
                get
                {
                    return this.columnRosterSlot;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandRosterSpotsRow this[int index]
            {
                get
                {
                    return ((CityIslandRosterSpotsRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CityIslandRosterSpotsRowChangeEventHandler CityIslandRosterSpotsRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CityIslandRosterSpotsRowChangeEventHandler CityIslandRosterSpotsRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CityIslandRosterSpotsRowChangeEventHandler CityIslandRosterSpotsRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CityIslandRosterSpotsRowChangeEventHandler CityIslandRosterSpotsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCityIslandRosterSpotsRow(CityIslandRosterSpotsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandRosterSpotsRow AddCityIslandRosterSpotsRow(string Pos, int Slot, bool Starter, string EspnPlayerID, string StatsPlayerID, string Player, string NflTeam, System.DateTime LoadDate, string LoadID, string TeamID, string RosterSlot)
            {
                CityIslandRosterSpotsRow rowCityIslandRosterSpotsRow = ((CityIslandRosterSpotsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Pos,
                        Slot,
                        Starter,
                        EspnPlayerID,
                        StatsPlayerID,
                        Player,
                        NflTeam,
                        LoadDate,
                        LoadID,
                        TeamID,
                        RosterSlot};
                rowCityIslandRosterSpotsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCityIslandRosterSpotsRow);
                return rowCityIslandRosterSpotsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                CityIslandRosterSpotsDataTable cln = ((CityIslandRosterSpotsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new CityIslandRosterSpotsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnPos = base.Columns["Pos"];
                this.columnSlot = base.Columns["Slot"];
                this.columnStarter = base.Columns["Starter"];
                this.columnEspnPlayerID = base.Columns["EspnPlayerID"];
                this.columnStatsPlayerID = base.Columns["StatsPlayerID"];
                this.columnPlayer = base.Columns["Player"];
                this.columnNflTeam = base.Columns["NflTeam"];
                this.columnLoadDate = base.Columns["LoadDate"];
                this.columnLoadID = base.Columns["LoadID"];
                this.columnTeamID = base.Columns["TeamID"];
                this.columnRosterSlot = base.Columns["RosterSlot"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnPos = new global::System.Data.DataColumn("Pos", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPos);
                this.columnSlot = new global::System.Data.DataColumn("Slot", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlot);
                this.columnStarter = new global::System.Data.DataColumn("Starter", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStarter);
                this.columnEspnPlayerID = new global::System.Data.DataColumn("EspnPlayerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEspnPlayerID);
                this.columnStatsPlayerID = new global::System.Data.DataColumn("StatsPlayerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatsPlayerID);
                this.columnPlayer = new global::System.Data.DataColumn("Player", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayer);
                this.columnNflTeam = new global::System.Data.DataColumn("NflTeam", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNflTeam);
                this.columnLoadDate = new global::System.Data.DataColumn("LoadDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadDate);
                this.columnLoadID = new global::System.Data.DataColumn("LoadID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadID);
                this.columnTeamID = new global::System.Data.DataColumn("TeamID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeamID);
                this.columnRosterSlot = new global::System.Data.DataColumn("RosterSlot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRosterSlot);
                this.columnPos.AllowDBNull = false;
                this.columnPos.MaxLength = 5;
                this.columnSlot.AllowDBNull = false;
                this.columnStarter.AllowDBNull = false;
                this.columnEspnPlayerID.MaxLength = 150;
                this.columnStatsPlayerID.MaxLength = 150;
                this.columnPlayer.MaxLength = 50;
                this.columnNflTeam.MaxLength = 5;
                this.columnLoadID.MaxLength = 50;
                this.columnTeamID.MaxLength = 250;
                this.columnRosterSlot.MaxLength = 10;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandRosterSpotsRow NewCityIslandRosterSpotsRow()
            {
                return ((CityIslandRosterSpotsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new CityIslandRosterSpotsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(CityIslandRosterSpotsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.CityIslandRosterSpotsRowChanged != null))
                {
                    this.CityIslandRosterSpotsRowChanged(this, new CityIslandRosterSpotsRowChangeEvent(((CityIslandRosterSpotsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.CityIslandRosterSpotsRowChanging != null))
                {
                    this.CityIslandRosterSpotsRowChanging(this, new CityIslandRosterSpotsRowChangeEvent(((CityIslandRosterSpotsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.CityIslandRosterSpotsRowDeleted != null))
                {
                    this.CityIslandRosterSpotsRowDeleted(this, new CityIslandRosterSpotsRowChangeEvent(((CityIslandRosterSpotsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.CityIslandRosterSpotsRowDeleting != null))
                {
                    this.CityIslandRosterSpotsRowDeleting(this, new CityIslandRosterSpotsRowChangeEvent(((CityIslandRosterSpotsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCityIslandRosterSpotsRow(CityIslandRosterSpotsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FFToiletBowlDataSet ds = new FFToiletBowlDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CityIslandRosterSpotsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CityIslandTeamsDataTable : global::System.Data.TypedTableBase<CityIslandTeamsRow>
        {

            private global::System.Data.DataColumn columnTeamName;

            private global::System.Data.DataColumn columnAlias;

            private global::System.Data.DataColumn columnNum;

            private global::System.Data.DataColumn columnTeamID;

            private global::System.Data.DataColumn columnWins;

            private global::System.Data.DataColumn columnLosses;

            private global::System.Data.DataColumn columnTies;

            private global::System.Data.DataColumn columnLoadDate;

            private global::System.Data.DataColumn columnLoadID;

            private global::System.Data.DataColumn columnTargetGm;

            private global::System.Data.DataColumn columnGmVersus;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandTeamsDataTable()
            {
                this.TableName = "CityIslandTeams";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CityIslandTeamsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CityIslandTeamsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TeamNameColumn
            {
                get
                {
                    return this.columnTeamName;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AliasColumn
            {
                get
                {
                    return this.columnAlias;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NumColumn
            {
                get
                {
                    return this.columnNum;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TeamIDColumn
            {
                get
                {
                    return this.columnTeamID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WinsColumn
            {
                get
                {
                    return this.columnWins;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LossesColumn
            {
                get
                {
                    return this.columnLosses;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TiesColumn
            {
                get
                {
                    return this.columnTies;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LoadDateColumn
            {
                get
                {
                    return this.columnLoadDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LoadIDColumn
            {
                get
                {
                    return this.columnLoadID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TargetGmColumn
            {
                get
                {
                    return this.columnTargetGm;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GmVersusColumn
            {
                get
                {
                    return this.columnGmVersus;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandTeamsRow this[int index]
            {
                get
                {
                    return ((CityIslandTeamsRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CityIslandTeamsRowChangeEventHandler CityIslandTeamsRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CityIslandTeamsRowChangeEventHandler CityIslandTeamsRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CityIslandTeamsRowChangeEventHandler CityIslandTeamsRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CityIslandTeamsRowChangeEventHandler CityIslandTeamsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCityIslandTeamsRow(CityIslandTeamsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandTeamsRow AddCityIslandTeamsRow(string TeamName, string Alias, int Num, string TeamID, int Wins, int Losses, int Ties, System.DateTime LoadDate, string LoadID, int TargetGm, string GmVersus)
            {
                CityIslandTeamsRow rowCityIslandTeamsRow = ((CityIslandTeamsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TeamName,
                        Alias,
                        Num,
                        TeamID,
                        Wins,
                        Losses,
                        Ties,
                        LoadDate,
                        LoadID,
                        TargetGm,
                        GmVersus};
                rowCityIslandTeamsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCityIslandTeamsRow);
                return rowCityIslandTeamsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                CityIslandTeamsDataTable cln = ((CityIslandTeamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new CityIslandTeamsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnTeamName = base.Columns["TeamName"];
                this.columnAlias = base.Columns["Alias"];
                this.columnNum = base.Columns["Num"];
                this.columnTeamID = base.Columns["TeamID"];
                this.columnWins = base.Columns["Wins"];
                this.columnLosses = base.Columns["Losses"];
                this.columnTies = base.Columns["Ties"];
                this.columnLoadDate = base.Columns["LoadDate"];
                this.columnLoadID = base.Columns["LoadID"];
                this.columnTargetGm = base.Columns["TargetGm"];
                this.columnGmVersus = base.Columns["GmVersus"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnTeamName = new global::System.Data.DataColumn("TeamName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeamName);
                this.columnAlias = new global::System.Data.DataColumn("Alias", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlias);
                this.columnNum = new global::System.Data.DataColumn("Num", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNum);
                this.columnTeamID = new global::System.Data.DataColumn("TeamID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeamID);
                this.columnWins = new global::System.Data.DataColumn("Wins", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWins);
                this.columnLosses = new global::System.Data.DataColumn("Losses", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLosses);
                this.columnTies = new global::System.Data.DataColumn("Ties", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTies);
                this.columnLoadDate = new global::System.Data.DataColumn("LoadDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadDate);
                this.columnLoadID = new global::System.Data.DataColumn("LoadID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadID);
                this.columnTargetGm = new global::System.Data.DataColumn("TargetGm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetGm);
                this.columnGmVersus = new global::System.Data.DataColumn("GmVersus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGmVersus);
                this.columnTeamName.AllowDBNull = false;
                this.columnTeamName.MaxLength = 50;
                this.columnAlias.MaxLength = 50;
                this.columnNum.AllowDBNull = false;
                this.columnTeamID.MaxLength = 250;
                this.columnLoadID.MaxLength = 50;
                this.columnGmVersus.MaxLength = 250;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandTeamsRow NewCityIslandTeamsRow()
            {
                return ((CityIslandTeamsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new CityIslandTeamsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(CityIslandTeamsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.CityIslandTeamsRowChanged != null))
                {
                    this.CityIslandTeamsRowChanged(this, new CityIslandTeamsRowChangeEvent(((CityIslandTeamsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.CityIslandTeamsRowChanging != null))
                {
                    this.CityIslandTeamsRowChanging(this, new CityIslandTeamsRowChangeEvent(((CityIslandTeamsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.CityIslandTeamsRowDeleted != null))
                {
                    this.CityIslandTeamsRowDeleted(this, new CityIslandTeamsRowChangeEvent(((CityIslandTeamsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.CityIslandTeamsRowDeleting != null))
                {
                    this.CityIslandTeamsRowDeleting(this, new CityIslandTeamsRowChangeEvent(((CityIslandTeamsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCityIslandTeamsRow(CityIslandTeamsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FFToiletBowlDataSet ds = new FFToiletBowlDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CityIslandTeamsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScheduleDataTable : global::System.Data.TypedTableBase<ScheduleRow>
        {

            private global::System.Data.DataColumn columnYear;

            private global::System.Data.DataColumn columnWk;

            private global::System.Data.DataColumn columnTeam;

            private global::System.Data.DataColumn columnVersus;

            private global::System.Data.DataColumn columnAway;

            private global::System.Data.DataColumn columnLoadURL;

            private global::System.Data.DataColumn columnLoadDate;

            private global::System.Data.DataColumn columnLoadResult;

            private global::System.Data.DataColumn columnPlayByPlayURL;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ScheduleDataTable()
            {
                this.TableName = "Schedule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ScheduleDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ScheduleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn YearColumn
            {
                get
                {
                    return this.columnYear;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WkColumn
            {
                get
                {
                    return this.columnWk;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TeamColumn
            {
                get
                {
                    return this.columnTeam;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VersusColumn
            {
                get
                {
                    return this.columnVersus;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AwayColumn
            {
                get
                {
                    return this.columnAway;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LoadURLColumn
            {
                get
                {
                    return this.columnLoadURL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LoadDateColumn
            {
                get
                {
                    return this.columnLoadDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LoadResultColumn
            {
                get
                {
                    return this.columnLoadResult;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlayByPlayURLColumn
            {
                get
                {
                    return this.columnPlayByPlayURL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ScheduleRow this[int index]
            {
                get
                {
                    return ((ScheduleRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ScheduleRowChangeEventHandler ScheduleRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ScheduleRowChangeEventHandler ScheduleRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ScheduleRowChangeEventHandler ScheduleRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ScheduleRowChangeEventHandler ScheduleRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddScheduleRow(ScheduleRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ScheduleRow AddScheduleRow(int Year, int Wk, string Team, string Versus, bool Away, string LoadURL, System.DateTime LoadDate, string LoadResult, string PlayByPlayURL)
            {
                ScheduleRow rowScheduleRow = ((ScheduleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Year,
                        Wk,
                        Team,
                        Versus,
                        Away,
                        LoadURL,
                        LoadDate,
                        LoadResult,
                        PlayByPlayURL};
                rowScheduleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScheduleRow);
                return rowScheduleRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                ScheduleDataTable cln = ((ScheduleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ScheduleDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnYear = base.Columns["Year"];
                this.columnWk = base.Columns["Wk"];
                this.columnTeam = base.Columns["Team"];
                this.columnVersus = base.Columns["Versus"];
                this.columnAway = base.Columns["Away"];
                this.columnLoadURL = base.Columns["LoadURL"];
                this.columnLoadDate = base.Columns["LoadDate"];
                this.columnLoadResult = base.Columns["LoadResult"];
                this.columnPlayByPlayURL = base.Columns["PlayByPlayURL"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnWk = new global::System.Data.DataColumn("Wk", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWk);
                this.columnTeam = new global::System.Data.DataColumn("Team", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnVersus = new global::System.Data.DataColumn("Versus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersus);
                this.columnAway = new global::System.Data.DataColumn("Away", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAway);
                this.columnLoadURL = new global::System.Data.DataColumn("LoadURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadURL);
                this.columnLoadDate = new global::System.Data.DataColumn("LoadDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadDate);
                this.columnLoadResult = new global::System.Data.DataColumn("LoadResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadResult);
                this.columnPlayByPlayURL = new global::System.Data.DataColumn("PlayByPlayURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayByPlayURL);
                this.columnYear.AllowDBNull = false;
                this.columnWk.AllowDBNull = false;
                this.columnTeam.AllowDBNull = false;
                this.columnTeam.MaxLength = 5;
                this.columnVersus.AllowDBNull = false;
                this.columnVersus.MaxLength = 5;
                this.columnLoadURL.MaxLength = 1024;
                this.columnLoadResult.MaxLength = 128;
                this.columnPlayByPlayURL.MaxLength = 1024;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ScheduleRow NewScheduleRow()
            {
                return ((ScheduleRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ScheduleRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(ScheduleRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ScheduleRowChanged != null))
                {
                    this.ScheduleRowChanged(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ScheduleRowChanging != null))
                {
                    this.ScheduleRowChanging(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ScheduleRowDeleted != null))
                {
                    this.ScheduleRowDeleted(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ScheduleRowDeleting != null))
                {
                    this.ScheduleRowDeleting(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveScheduleRow(ScheduleRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FFToiletBowlDataSet ds = new FFToiletBowlDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScheduleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlayByPlayDataTable : global::System.Data.TypedTableBase<PlayByPlayRow>
        {

            private global::System.Data.DataColumn columnURL;

            private global::System.Data.DataColumn columnPossession;

            private global::System.Data.DataColumn columnDownDistance;

            private global::System.Data.DataColumn columnPlay;

            private global::System.Data.DataColumn columnSeq;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlayByPlayDataTable()
            {
                this.TableName = "PlayByPlay";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PlayByPlayDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PlayByPlayDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn URLColumn
            {
                get
                {
                    return this.columnURL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PossessionColumn
            {
                get
                {
                    return this.columnPossession;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DownDistanceColumn
            {
                get
                {
                    return this.columnDownDistance;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlayColumn
            {
                get
                {
                    return this.columnPlay;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SeqColumn
            {
                get
                {
                    return this.columnSeq;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlayByPlayRow this[int index]
            {
                get
                {
                    return ((PlayByPlayRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlayByPlayRowChangeEventHandler PlayByPlayRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlayByPlayRowChangeEventHandler PlayByPlayRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlayByPlayRowChangeEventHandler PlayByPlayRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlayByPlayRowChangeEventHandler PlayByPlayRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPlayByPlayRow(PlayByPlayRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlayByPlayRow AddPlayByPlayRow(string URL, string Possession, string DownDistance, string Play, int Seq)
            {
                PlayByPlayRow rowPlayByPlayRow = ((PlayByPlayRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        URL,
                        Possession,
                        DownDistance,
                        Play,
                        Seq};
                rowPlayByPlayRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPlayByPlayRow);
                return rowPlayByPlayRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                PlayByPlayDataTable cln = ((PlayByPlayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new PlayByPlayDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnURL = base.Columns["URL"];
                this.columnPossession = base.Columns["Possession"];
                this.columnDownDistance = base.Columns["DownDistance"];
                this.columnPlay = base.Columns["Play"];
                this.columnSeq = base.Columns["Seq"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnURL = new global::System.Data.DataColumn("URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnURL);
                this.columnPossession = new global::System.Data.DataColumn("Possession", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPossession);
                this.columnDownDistance = new global::System.Data.DataColumn("DownDistance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownDistance);
                this.columnPlay = new global::System.Data.DataColumn("Play", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlay);
                this.columnSeq = new global::System.Data.DataColumn("Seq", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeq);
                this.columnURL.AllowDBNull = false;
                this.columnURL.MaxLength = 1024;
                this.columnPossession.AllowDBNull = false;
                this.columnPossession.MaxLength = 5;
                this.columnDownDistance.AllowDBNull = false;
                this.columnDownDistance.MaxLength = 32;
                this.columnPlay.AllowDBNull = false;
                this.columnPlay.MaxLength = 512;
                this.columnSeq.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlayByPlayRow NewPlayByPlayRow()
            {
                return ((PlayByPlayRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new PlayByPlayRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(PlayByPlayRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PlayByPlayRowChanged != null))
                {
                    this.PlayByPlayRowChanged(this, new PlayByPlayRowChangeEvent(((PlayByPlayRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PlayByPlayRowChanging != null))
                {
                    this.PlayByPlayRowChanging(this, new PlayByPlayRowChangeEvent(((PlayByPlayRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PlayByPlayRowDeleted != null))
                {
                    this.PlayByPlayRowDeleted(this, new PlayByPlayRowChangeEvent(((PlayByPlayRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PlayByPlayRowDeleting != null))
                {
                    this.PlayByPlayRowDeleting(this, new PlayByPlayRowChangeEvent(((PlayByPlayRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePlayByPlayRow(PlayByPlayRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FFToiletBowlDataSet ds = new FFToiletBowlDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlayByPlayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParsedPlayByPlayDataTable : global::System.Data.TypedTableBase<ParsedPlayByPlayRow>
        {

            private global::System.Data.DataColumn columnURL;

            private global::System.Data.DataColumn columnPossession;

            private global::System.Data.DataColumn columnSeq;

            private global::System.Data.DataColumn columnDown;

            private global::System.Data.DataColumn columnSide;

            private global::System.Data.DataColumn columnDistance;

            private global::System.Data.DataColumn columnTimeLeftSec;

            private global::System.Data.DataColumn columnQtr;

            private global::System.Data.DataColumn columnTeam1;

            private global::System.Data.DataColumn columnTeam2;

            private global::System.Data.DataColumn columnIsGameMilestone;

            private global::System.Data.DataColumn columnIsTimeout;

            private global::System.Data.DataColumn columnTimeout;

            private global::System.Data.DataColumn columnIsKick;

            private global::System.Data.DataColumn columnKickPlayer;

            private global::System.Data.DataColumn columnKickYards;

            private global::System.Data.DataColumn columnKickStartSide;

            private global::System.Data.DataColumn columnKickStartDistance;

            private global::System.Data.DataColumn columnKickLandSide;

            private global::System.Data.DataColumn columnKickLandDistance;

            private global::System.Data.DataColumn columnKickReturnPlayer;

            private global::System.Data.DataColumn columnIsKickTouchback;

            private global::System.Data.DataColumn columnKickAdvanceStopSide;

            private global::System.Data.DataColumn columnKickAdvanceStopYards;

            private global::System.Data.DataColumn columnKickReturn;

            private global::System.Data.DataColumn columnIsOnsideKick;

            private global::System.Data.DataColumn columnIsPunt;

            private global::System.Data.DataColumn columnPuntPlayer;

            private global::System.Data.DataColumn columnPuntYardage;

            private global::System.Data.DataColumn columnPuntLandedSide;

            private global::System.Data.DataColumn columnPuntLandedDistance;

            private global::System.Data.DataColumn columnPuntSnapper;

            private global::System.Data.DataColumn columnIsPuntFairCatch;

            private global::System.Data.DataColumn columnIsPuntMuffed;

            private global::System.Data.DataColumn columnPuntReceiver;

            private global::System.Data.DataColumn columnIsPuntTouchback;

            private global::System.Data.DataColumn columnPuntingTeamPlayerDowned;

            private global::System.Data.DataColumn columnPuntReturningPlayer;

            private global::System.Data.DataColumn columnPuntStoppedSide;

            private global::System.Data.DataColumn columnPuntStoppedYards;

            private global::System.Data.DataColumn columnPuntReturnYardage;

            private global::System.Data.DataColumn columnIsPuntOutOfBounds;

            private global::System.Data.DataColumn columnIsFieldGoalAttempt;

            private global::System.Data.DataColumn columnIsFieldGoalGood;

            private global::System.Data.DataColumn columnFieldGoalYardage;

            private global::System.Data.DataColumn columnFieldGoalPlayer;

            private global::System.Data.DataColumn columnFieldGoalMissBy;

            private global::System.Data.DataColumn columnFieldGoalCenter;

            private global::System.Data.DataColumn columnFieldGoalHolder;

            private global::System.Data.DataColumn columnFormation;

            private global::System.Data.DataColumn columnPassPlayer;

            private global::System.Data.DataColumn columnIsIncomplete;

            private global::System.Data.DataColumn columnIsPass;

            private global::System.Data.DataColumn columnIsSacked;

            private global::System.Data.DataColumn columnSackAtSide;

            private global::System.Data.DataColumn columnSackAtDistance;

            private global::System.Data.DataColumn columnPassDirection;

            private global::System.Data.DataColumn columnPassLength;

            private global::System.Data.DataColumn columnPassCaughtAtDist;

            private global::System.Data.DataColumn columnPassCaughtAtSide;

            private global::System.Data.DataColumn columnPassYAC;

            private global::System.Data.DataColumn columnPassYardage;

            private global::System.Data.DataColumn columnPassStopSide;

            private global::System.Data.DataColumn columnPassStopDistance;

            private global::System.Data.DataColumn columnPassWR;

            private global::System.Data.DataColumn columnIsRun;

            private global::System.Data.DataColumn columnIsScramble;

            private global::System.Data.DataColumn columnRunPlayer;

            private global::System.Data.DataColumn columnRunDirection;

            private global::System.Data.DataColumn columnRunFormation;

            private global::System.Data.DataColumn columnRunStopAtDist;

            private global::System.Data.DataColumn columnRunStopAtSide;

            private global::System.Data.DataColumn columnRunYardage;

            private global::System.Data.DataColumn columnIsOb;

            private global::System.Data.DataColumn columnOb;

            private global::System.Data.DataColumn columnTackledByPlayer;

            private global::System.Data.DataColumn columnIsFumble;

            private global::System.Data.DataColumn columnIsFumbleLost;

            private global::System.Data.DataColumn columnIsIntercepted;

            private global::System.Data.DataColumn columnIsTouchdown;

            private global::System.Data.DataColumn columnConversion;

            private global::System.Data.DataColumn columnIsTdYardPassFromFormat;

            private global::System.Data.DataColumn columnIsTouchdownStandardPlayFormat;

            private global::System.Data.DataColumn columnIsPenaltyCalled;

            private global::System.Data.DataColumn columnIsPenaltyAccepted;

            private global::System.Data.DataColumn columnIsPenaltyNoPlay;

            private global::System.Data.DataColumn columnPenaltyPlayer;

            private global::System.Data.DataColumn columnPenaltyRule;

            private global::System.Data.DataColumn columnPenaltyYardage;

            private global::System.Data.DataColumn columnPenaltyEnforcedAtDist;

            private global::System.Data.DataColumn columnPenaltyEnforcedAtSide;

            private global::System.Data.DataColumn columnValidatedAgainst;

            private global::System.Data.DataColumn columnIsValidated;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParsedPlayByPlayDataTable()
            {
                this.TableName = "ParsedPlayByPlay";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ParsedPlayByPlayDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ParsedPlayByPlayDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn URLColumn
            {
                get
                {
                    return this.columnURL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PossessionColumn
            {
                get
                {
                    return this.columnPossession;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SeqColumn
            {
                get
                {
                    return this.columnSeq;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DownColumn
            {
                get
                {
                    return this.columnDown;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SideColumn
            {
                get
                {
                    return this.columnSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DistanceColumn
            {
                get
                {
                    return this.columnDistance;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TimeLeftSecColumn
            {
                get
                {
                    return this.columnTimeLeftSec;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn QtrColumn
            {
                get
                {
                    return this.columnQtr;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Team1Column
            {
                get
                {
                    return this.columnTeam1;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Team2Column
            {
                get
                {
                    return this.columnTeam2;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsGameMilestoneColumn
            {
                get
                {
                    return this.columnIsGameMilestone;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsTimeoutColumn
            {
                get
                {
                    return this.columnIsTimeout;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TimeoutColumn
            {
                get
                {
                    return this.columnTimeout;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsKickColumn
            {
                get
                {
                    return this.columnIsKick;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KickPlayerColumn
            {
                get
                {
                    return this.columnKickPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KickYardsColumn
            {
                get
                {
                    return this.columnKickYards;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KickStartSideColumn
            {
                get
                {
                    return this.columnKickStartSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KickStartDistanceColumn
            {
                get
                {
                    return this.columnKickStartDistance;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KickLandSideColumn
            {
                get
                {
                    return this.columnKickLandSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KickLandDistanceColumn
            {
                get
                {
                    return this.columnKickLandDistance;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KickReturnPlayerColumn
            {
                get
                {
                    return this.columnKickReturnPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsKickTouchbackColumn
            {
                get
                {
                    return this.columnIsKickTouchback;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KickAdvanceStopSideColumn
            {
                get
                {
                    return this.columnKickAdvanceStopSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KickAdvanceStopYardsColumn
            {
                get
                {
                    return this.columnKickAdvanceStopYards;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KickReturnColumn
            {
                get
                {
                    return this.columnKickReturn;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsOnsideKickColumn
            {
                get
                {
                    return this.columnIsOnsideKick;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPuntColumn
            {
                get
                {
                    return this.columnIsPunt;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntPlayerColumn
            {
                get
                {
                    return this.columnPuntPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntYardageColumn
            {
                get
                {
                    return this.columnPuntYardage;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntLandedSideColumn
            {
                get
                {
                    return this.columnPuntLandedSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntLandedDistanceColumn
            {
                get
                {
                    return this.columnPuntLandedDistance;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntSnapperColumn
            {
                get
                {
                    return this.columnPuntSnapper;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPuntFairCatchColumn
            {
                get
                {
                    return this.columnIsPuntFairCatch;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPuntMuffedColumn
            {
                get
                {
                    return this.columnIsPuntMuffed;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntReceiverColumn
            {
                get
                {
                    return this.columnPuntReceiver;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPuntTouchbackColumn
            {
                get
                {
                    return this.columnIsPuntTouchback;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntingTeamPlayerDownedColumn
            {
                get
                {
                    return this.columnPuntingTeamPlayerDowned;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntReturningPlayerColumn
            {
                get
                {
                    return this.columnPuntReturningPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntStoppedSideColumn
            {
                get
                {
                    return this.columnPuntStoppedSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntStoppedYardsColumn
            {
                get
                {
                    return this.columnPuntStoppedYards;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PuntReturnYardageColumn
            {
                get
                {
                    return this.columnPuntReturnYardage;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPuntOutOfBoundsColumn
            {
                get
                {
                    return this.columnIsPuntOutOfBounds;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsFieldGoalAttemptColumn
            {
                get
                {
                    return this.columnIsFieldGoalAttempt;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsFieldGoalGoodColumn
            {
                get
                {
                    return this.columnIsFieldGoalGood;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FieldGoalYardageColumn
            {
                get
                {
                    return this.columnFieldGoalYardage;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FieldGoalPlayerColumn
            {
                get
                {
                    return this.columnFieldGoalPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FieldGoalMissByColumn
            {
                get
                {
                    return this.columnFieldGoalMissBy;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FieldGoalCenterColumn
            {
                get
                {
                    return this.columnFieldGoalCenter;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FieldGoalHolderColumn
            {
                get
                {
                    return this.columnFieldGoalHolder;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FormationColumn
            {
                get
                {
                    return this.columnFormation;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PassPlayerColumn
            {
                get
                {
                    return this.columnPassPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsIncompleteColumn
            {
                get
                {
                    return this.columnIsIncomplete;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPassColumn
            {
                get
                {
                    return this.columnIsPass;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsSackedColumn
            {
                get
                {
                    return this.columnIsSacked;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SackAtSideColumn
            {
                get
                {
                    return this.columnSackAtSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SackAtDistanceColumn
            {
                get
                {
                    return this.columnSackAtDistance;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PassDirectionColumn
            {
                get
                {
                    return this.columnPassDirection;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PassLengthColumn
            {
                get
                {
                    return this.columnPassLength;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PassCaughtAtDistColumn
            {
                get
                {
                    return this.columnPassCaughtAtDist;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PassCaughtAtSideColumn
            {
                get
                {
                    return this.columnPassCaughtAtSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PassYACColumn
            {
                get
                {
                    return this.columnPassYAC;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PassYardageColumn
            {
                get
                {
                    return this.columnPassYardage;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PassStopSideColumn
            {
                get
                {
                    return this.columnPassStopSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PassStopDistanceColumn
            {
                get
                {
                    return this.columnPassStopDistance;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PassWRColumn
            {
                get
                {
                    return this.columnPassWR;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsRunColumn
            {
                get
                {
                    return this.columnIsRun;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsScrambleColumn
            {
                get
                {
                    return this.columnIsScramble;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RunPlayerColumn
            {
                get
                {
                    return this.columnRunPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RunDirectionColumn
            {
                get
                {
                    return this.columnRunDirection;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RunFormationColumn
            {
                get
                {
                    return this.columnRunFormation;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RunStopAtDistColumn
            {
                get
                {
                    return this.columnRunStopAtDist;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RunStopAtSideColumn
            {
                get
                {
                    return this.columnRunStopAtSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RunYardageColumn
            {
                get
                {
                    return this.columnRunYardage;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsObColumn
            {
                get
                {
                    return this.columnIsOb;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ObColumn
            {
                get
                {
                    return this.columnOb;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TackledByPlayerColumn
            {
                get
                {
                    return this.columnTackledByPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsFumbleColumn
            {
                get
                {
                    return this.columnIsFumble;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsFumbleLostColumn
            {
                get
                {
                    return this.columnIsFumbleLost;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsInterceptedColumn
            {
                get
                {
                    return this.columnIsIntercepted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsTouchdownColumn
            {
                get
                {
                    return this.columnIsTouchdown;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ConversionColumn
            {
                get
                {
                    return this.columnConversion;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsTdYardPassFromFormatColumn
            {
                get
                {
                    return this.columnIsTdYardPassFromFormat;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsTouchdownStandardPlayFormatColumn
            {
                get
                {
                    return this.columnIsTouchdownStandardPlayFormat;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPenaltyCalledColumn
            {
                get
                {
                    return this.columnIsPenaltyCalled;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPenaltyAcceptedColumn
            {
                get
                {
                    return this.columnIsPenaltyAccepted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPenaltyNoPlayColumn
            {
                get
                {
                    return this.columnIsPenaltyNoPlay;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PenaltyPlayerColumn
            {
                get
                {
                    return this.columnPenaltyPlayer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PenaltyRuleColumn
            {
                get
                {
                    return this.columnPenaltyRule;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PenaltyYardageColumn
            {
                get
                {
                    return this.columnPenaltyYardage;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PenaltyEnforcedAtDistColumn
            {
                get
                {
                    return this.columnPenaltyEnforcedAtDist;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PenaltyEnforcedAtSideColumn
            {
                get
                {
                    return this.columnPenaltyEnforcedAtSide;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ValidatedAgainstColumn
            {
                get
                {
                    return this.columnValidatedAgainst;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsValidatedColumn
            {
                get
                {
                    return this.columnIsValidated;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParsedPlayByPlayRow this[int index]
            {
                get
                {
                    return ((ParsedPlayByPlayRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParsedPlayByPlayRowChangeEventHandler ParsedPlayByPlayRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParsedPlayByPlayRowChangeEventHandler ParsedPlayByPlayRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParsedPlayByPlayRowChangeEventHandler ParsedPlayByPlayRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParsedPlayByPlayRowChangeEventHandler ParsedPlayByPlayRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddParsedPlayByPlayRow(ParsedPlayByPlayRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParsedPlayByPlayRow AddParsedPlayByPlayRow(
                        string URL,
                        string Possession,
                        int Seq,
                        int Down,
                        string Side,
                        int Distance,
                        int TimeLeftSec,
                        int Qtr,
                        string Team1,
                        string Team2,
                        bool IsGameMilestone,
                        bool IsTimeout,
                        int Timeout,
                        bool IsKick,
                        string KickPlayer,
                        int KickYards,
                        string KickStartSide,
                        int KickStartDistance,
                        string KickLandSide,
                        int KickLandDistance,
                        string KickReturnPlayer,
                        bool IsKickTouchback,
                        string KickAdvanceStopSide,
                        int KickAdvanceStopYards,
                        int KickReturn,
                        bool IsOnsideKick,
                        bool IsPunt,
                        string PuntPlayer,
                        int PuntYardage,
                        string PuntLandedSide,
                        int PuntLandedDistance,
                        string PuntSnapper,
                        bool IsPuntFairCatch,
                        bool IsPuntMuffed,
                        string PuntReceiver,
                        bool IsPuntTouchback,
                        string PuntingTeamPlayerDowned,
                        string PuntReturningPlayer,
                        string PuntStoppedSide,
                        int PuntStoppedYards,
                        int PuntReturnYardage,
                        bool IsPuntOutOfBounds,
                        bool IsFieldGoalAttempt,
                        bool IsFieldGoalGood,
                        int FieldGoalYardage,
                        string FieldGoalPlayer,
                        string FieldGoalMissBy,
                        string FieldGoalCenter,
                        string FieldGoalHolder,
                        string Formation,
                        string PassPlayer,
                        bool IsIncomplete,
                        bool IsPass,
                        bool IsSacked,
                        string SackAtSide,
                        int SackAtDistance,
                        string PassDirection,
                        string PassLength,
                        int PassCaughtAtDist,
                        string PassCaughtAtSide,
                        int PassYAC,
                        int PassYardage,
                        string PassStopSide,
                        int PassStopDistance,
                        string PassWR,
                        bool IsRun,
                        bool IsScramble,
                        string RunPlayer,
                        string RunDirection,
                        string RunFormation,
                        int RunStopAtDist,
                        string RunStopAtSide,
                        int RunYardage,
                        bool IsOb,
                        string Ob,
                        string TackledByPlayer,
                        bool IsFumble,
                        bool IsFumbleLost,
                        bool IsIntercepted,
                        bool IsTouchdown,
                        string Conversion,
                        bool IsTdYardPassFromFormat,
                        bool IsTouchdownStandardPlayFormat,
                        bool IsPenaltyCalled,
                        bool IsPenaltyAccepted,
                        bool IsPenaltyNoPlay,
                        string PenaltyPlayer,
                        string PenaltyRule,
                        int PenaltyYardage,
                        int PenaltyEnforcedAtDist,
                        string PenaltyEnforcedAtSide,
                        string ValidatedAgainst,
                        bool IsValidated)
            {
                ParsedPlayByPlayRow rowParsedPlayByPlayRow = ((ParsedPlayByPlayRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        URL,
                        Possession,
                        Seq,
                        Down,
                        Side,
                        Distance,
                        TimeLeftSec,
                        Qtr,
                        Team1,
                        Team2,
                        IsGameMilestone,
                        IsTimeout,
                        Timeout,
                        IsKick,
                        KickPlayer,
                        KickYards,
                        KickStartSide,
                        KickStartDistance,
                        KickLandSide,
                        KickLandDistance,
                        KickReturnPlayer,
                        IsKickTouchback,
                        KickAdvanceStopSide,
                        KickAdvanceStopYards,
                        KickReturn,
                        IsOnsideKick,
                        IsPunt,
                        PuntPlayer,
                        PuntYardage,
                        PuntLandedSide,
                        PuntLandedDistance,
                        PuntSnapper,
                        IsPuntFairCatch,
                        IsPuntMuffed,
                        PuntReceiver,
                        IsPuntTouchback,
                        PuntingTeamPlayerDowned,
                        PuntReturningPlayer,
                        PuntStoppedSide,
                        PuntStoppedYards,
                        PuntReturnYardage,
                        IsPuntOutOfBounds,
                        IsFieldGoalAttempt,
                        IsFieldGoalGood,
                        FieldGoalYardage,
                        FieldGoalPlayer,
                        FieldGoalMissBy,
                        FieldGoalCenter,
                        FieldGoalHolder,
                        Formation,
                        PassPlayer,
                        IsIncomplete,
                        IsPass,
                        IsSacked,
                        SackAtSide,
                        SackAtDistance,
                        PassDirection,
                        PassLength,
                        PassCaughtAtDist,
                        PassCaughtAtSide,
                        PassYAC,
                        PassYardage,
                        PassStopSide,
                        PassStopDistance,
                        PassWR,
                        IsRun,
                        IsScramble,
                        RunPlayer,
                        RunDirection,
                        RunFormation,
                        RunStopAtDist,
                        RunStopAtSide,
                        RunYardage,
                        IsOb,
                        Ob,
                        TackledByPlayer,
                        IsFumble,
                        IsFumbleLost,
                        IsIntercepted,
                        IsTouchdown,
                        Conversion,
                        IsTdYardPassFromFormat,
                        IsTouchdownStandardPlayFormat,
                        IsPenaltyCalled,
                        IsPenaltyAccepted,
                        IsPenaltyNoPlay,
                        PenaltyPlayer,
                        PenaltyRule,
                        PenaltyYardage,
                        PenaltyEnforcedAtDist,
                        PenaltyEnforcedAtSide,
                        ValidatedAgainst,
                        IsValidated};
                rowParsedPlayByPlayRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParsedPlayByPlayRow);
                return rowParsedPlayByPlayRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                ParsedPlayByPlayDataTable cln = ((ParsedPlayByPlayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ParsedPlayByPlayDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnURL = base.Columns["URL"];
                this.columnPossession = base.Columns["Possession"];
                this.columnSeq = base.Columns["Seq"];
                this.columnDown = base.Columns["Down"];
                this.columnSide = base.Columns["Side"];
                this.columnDistance = base.Columns["Distance"];
                this.columnTimeLeftSec = base.Columns["TimeLeftSec"];
                this.columnQtr = base.Columns["Qtr"];
                this.columnTeam1 = base.Columns["Team1"];
                this.columnTeam2 = base.Columns["Team2"];
                this.columnIsGameMilestone = base.Columns["IsGameMilestone"];
                this.columnIsTimeout = base.Columns["IsTimeout"];
                this.columnTimeout = base.Columns["Timeout"];
                this.columnIsKick = base.Columns["IsKick"];
                this.columnKickPlayer = base.Columns["KickPlayer"];
                this.columnKickYards = base.Columns["KickYards"];
                this.columnKickStartSide = base.Columns["KickStartSide"];
                this.columnKickStartDistance = base.Columns["KickStartDistance"];
                this.columnKickLandSide = base.Columns["KickLandSide"];
                this.columnKickLandDistance = base.Columns["KickLandDistance"];
                this.columnKickReturnPlayer = base.Columns["KickReturnPlayer"];
                this.columnIsKickTouchback = base.Columns["IsKickTouchback"];
                this.columnKickAdvanceStopSide = base.Columns["KickAdvanceStopSide"];
                this.columnKickAdvanceStopYards = base.Columns["KickAdvanceStopYards"];
                this.columnKickReturn = base.Columns["KickReturn"];
                this.columnIsOnsideKick = base.Columns["IsOnsideKick"];
                this.columnIsPunt = base.Columns["IsPunt"];
                this.columnPuntPlayer = base.Columns["PuntPlayer"];
                this.columnPuntYardage = base.Columns["PuntYardage"];
                this.columnPuntLandedSide = base.Columns["PuntLandedSide"];
                this.columnPuntLandedDistance = base.Columns["PuntLandedDistance"];
                this.columnPuntSnapper = base.Columns["PuntSnapper"];
                this.columnIsPuntFairCatch = base.Columns["IsPuntFairCatch"];
                this.columnIsPuntMuffed = base.Columns["IsPuntMuffed"];
                this.columnPuntReceiver = base.Columns["PuntReceiver"];
                this.columnIsPuntTouchback = base.Columns["IsPuntTouchback"];
                this.columnPuntingTeamPlayerDowned = base.Columns["PuntingTeamPlayerDowned"];
                this.columnPuntReturningPlayer = base.Columns["PuntReturningPlayer"];
                this.columnPuntStoppedSide = base.Columns["PuntStoppedSide"];
                this.columnPuntStoppedYards = base.Columns["PuntStoppedYards"];
                this.columnPuntReturnYardage = base.Columns["PuntReturnYardage"];
                this.columnIsPuntOutOfBounds = base.Columns["IsPuntOutOfBounds"];
                this.columnIsFieldGoalAttempt = base.Columns["IsFieldGoalAttempt"];
                this.columnIsFieldGoalGood = base.Columns["IsFieldGoalGood"];
                this.columnFieldGoalYardage = base.Columns["FieldGoalYardage"];
                this.columnFieldGoalPlayer = base.Columns["FieldGoalPlayer"];
                this.columnFieldGoalMissBy = base.Columns["FieldGoalMissBy"];
                this.columnFieldGoalCenter = base.Columns["FieldGoalCenter"];
                this.columnFieldGoalHolder = base.Columns["FieldGoalHolder"];
                this.columnFormation = base.Columns["Formation"];
                this.columnPassPlayer = base.Columns["PassPlayer"];
                this.columnIsIncomplete = base.Columns["IsIncomplete"];
                this.columnIsPass = base.Columns["IsPass"];
                this.columnIsSacked = base.Columns["IsSacked"];
                this.columnSackAtSide = base.Columns["SackAtSide"];
                this.columnSackAtDistance = base.Columns["SackAtDistance"];
                this.columnPassDirection = base.Columns["PassDirection"];
                this.columnPassLength = base.Columns["PassLength"];
                this.columnPassCaughtAtDist = base.Columns["PassCaughtAtDist"];
                this.columnPassCaughtAtSide = base.Columns["PassCaughtAtSide"];
                this.columnPassYAC = base.Columns["PassYAC"];
                this.columnPassYardage = base.Columns["PassYardage"];
                this.columnPassStopSide = base.Columns["PassStopSide"];
                this.columnPassStopDistance = base.Columns["PassStopDistance"];
                this.columnPassWR = base.Columns["PassWR"];
                this.columnIsRun = base.Columns["IsRun"];
                this.columnIsScramble = base.Columns["IsScramble"];
                this.columnRunPlayer = base.Columns["RunPlayer"];
                this.columnRunDirection = base.Columns["RunDirection"];
                this.columnRunFormation = base.Columns["RunFormation"];
                this.columnRunStopAtDist = base.Columns["RunStopAtDist"];
                this.columnRunStopAtSide = base.Columns["RunStopAtSide"];
                this.columnRunYardage = base.Columns["RunYardage"];
                this.columnIsOb = base.Columns["IsOb"];
                this.columnOb = base.Columns["Ob"];
                this.columnTackledByPlayer = base.Columns["TackledByPlayer"];
                this.columnIsFumble = base.Columns["IsFumble"];
                this.columnIsFumbleLost = base.Columns["IsFumbleLost"];
                this.columnIsIntercepted = base.Columns["IsIntercepted"];
                this.columnIsTouchdown = base.Columns["IsTouchdown"];
                this.columnConversion = base.Columns["Conversion"];
                this.columnIsTdYardPassFromFormat = base.Columns["IsTdYardPassFromFormat"];
                this.columnIsTouchdownStandardPlayFormat = base.Columns["IsTouchdownStandardPlayFormat"];
                this.columnIsPenaltyCalled = base.Columns["IsPenaltyCalled"];
                this.columnIsPenaltyAccepted = base.Columns["IsPenaltyAccepted"];
                this.columnIsPenaltyNoPlay = base.Columns["IsPenaltyNoPlay"];
                this.columnPenaltyPlayer = base.Columns["PenaltyPlayer"];
                this.columnPenaltyRule = base.Columns["PenaltyRule"];
                this.columnPenaltyYardage = base.Columns["PenaltyYardage"];
                this.columnPenaltyEnforcedAtDist = base.Columns["PenaltyEnforcedAtDist"];
                this.columnPenaltyEnforcedAtSide = base.Columns["PenaltyEnforcedAtSide"];
                this.columnValidatedAgainst = base.Columns["ValidatedAgainst"];
                this.columnIsValidated = base.Columns["IsValidated"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnURL = new global::System.Data.DataColumn("URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnURL);
                this.columnPossession = new global::System.Data.DataColumn("Possession", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPossession);
                this.columnSeq = new global::System.Data.DataColumn("Seq", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeq);
                this.columnDown = new global::System.Data.DataColumn("Down", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDown);
                this.columnSide = new global::System.Data.DataColumn("Side", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSide);
                this.columnDistance = new global::System.Data.DataColumn("Distance", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistance);
                this.columnTimeLeftSec = new global::System.Data.DataColumn("TimeLeftSec", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeLeftSec);
                this.columnQtr = new global::System.Data.DataColumn("Qtr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQtr);
                this.columnTeam1 = new global::System.Data.DataColumn("Team1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeam1);
                this.columnTeam2 = new global::System.Data.DataColumn("Team2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeam2);
                this.columnIsGameMilestone = new global::System.Data.DataColumn("IsGameMilestone", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGameMilestone);
                this.columnIsTimeout = new global::System.Data.DataColumn("IsTimeout", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTimeout);
                this.columnTimeout = new global::System.Data.DataColumn("Timeout", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeout);
                this.columnIsKick = new global::System.Data.DataColumn("IsKick", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsKick);
                this.columnKickPlayer = new global::System.Data.DataColumn("KickPlayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKickPlayer);
                this.columnKickYards = new global::System.Data.DataColumn("KickYards", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKickYards);
                this.columnKickStartSide = new global::System.Data.DataColumn("KickStartSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKickStartSide);
                this.columnKickStartDistance = new global::System.Data.DataColumn("KickStartDistance", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKickStartDistance);
                this.columnKickLandSide = new global::System.Data.DataColumn("KickLandSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKickLandSide);
                this.columnKickLandDistance = new global::System.Data.DataColumn("KickLandDistance", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKickLandDistance);
                this.columnKickReturnPlayer = new global::System.Data.DataColumn("KickReturnPlayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKickReturnPlayer);
                this.columnIsKickTouchback = new global::System.Data.DataColumn("IsKickTouchback", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsKickTouchback);
                this.columnKickAdvanceStopSide = new global::System.Data.DataColumn("KickAdvanceStopSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKickAdvanceStopSide);
                this.columnKickAdvanceStopYards = new global::System.Data.DataColumn("KickAdvanceStopYards", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKickAdvanceStopYards);
                this.columnKickReturn = new global::System.Data.DataColumn("KickReturn", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKickReturn);
                this.columnIsOnsideKick = new global::System.Data.DataColumn("IsOnsideKick", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOnsideKick);
                this.columnIsPunt = new global::System.Data.DataColumn("IsPunt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPunt);
                this.columnPuntPlayer = new global::System.Data.DataColumn("PuntPlayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntPlayer);
                this.columnPuntYardage = new global::System.Data.DataColumn("PuntYardage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntYardage);
                this.columnPuntLandedSide = new global::System.Data.DataColumn("PuntLandedSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntLandedSide);
                this.columnPuntLandedDistance = new global::System.Data.DataColumn("PuntLandedDistance", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntLandedDistance);
                this.columnPuntSnapper = new global::System.Data.DataColumn("PuntSnapper", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntSnapper);
                this.columnIsPuntFairCatch = new global::System.Data.DataColumn("IsPuntFairCatch", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPuntFairCatch);
                this.columnIsPuntMuffed = new global::System.Data.DataColumn("IsPuntMuffed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPuntMuffed);
                this.columnPuntReceiver = new global::System.Data.DataColumn("PuntReceiver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntReceiver);
                this.columnIsPuntTouchback = new global::System.Data.DataColumn("IsPuntTouchback", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPuntTouchback);
                this.columnPuntingTeamPlayerDowned = new global::System.Data.DataColumn("PuntingTeamPlayerDowned", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntingTeamPlayerDowned);
                this.columnPuntReturningPlayer = new global::System.Data.DataColumn("PuntReturningPlayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntReturningPlayer);
                this.columnPuntStoppedSide = new global::System.Data.DataColumn("PuntStoppedSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntStoppedSide);
                this.columnPuntStoppedYards = new global::System.Data.DataColumn("PuntStoppedYards", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntStoppedYards);
                this.columnPuntReturnYardage = new global::System.Data.DataColumn("PuntReturnYardage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPuntReturnYardage);
                this.columnIsPuntOutOfBounds = new global::System.Data.DataColumn("IsPuntOutOfBounds", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPuntOutOfBounds);
                this.columnIsFieldGoalAttempt = new global::System.Data.DataColumn("IsFieldGoalAttempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFieldGoalAttempt);
                this.columnIsFieldGoalGood = new global::System.Data.DataColumn("IsFieldGoalGood", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFieldGoalGood);
                this.columnFieldGoalYardage = new global::System.Data.DataColumn("FieldGoalYardage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldGoalYardage);
                this.columnFieldGoalPlayer = new global::System.Data.DataColumn("FieldGoalPlayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldGoalPlayer);
                this.columnFieldGoalMissBy = new global::System.Data.DataColumn("FieldGoalMissBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldGoalMissBy);
                this.columnFieldGoalCenter = new global::System.Data.DataColumn("FieldGoalCenter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldGoalCenter);
                this.columnFieldGoalHolder = new global::System.Data.DataColumn("FieldGoalHolder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldGoalHolder);
                this.columnFormation = new global::System.Data.DataColumn("Formation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormation);
                this.columnPassPlayer = new global::System.Data.DataColumn("PassPlayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassPlayer);
                this.columnIsIncomplete = new global::System.Data.DataColumn("IsIncomplete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsIncomplete);
                this.columnIsPass = new global::System.Data.DataColumn("IsPass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPass);
                this.columnIsSacked = new global::System.Data.DataColumn("IsSacked", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSacked);
                this.columnSackAtSide = new global::System.Data.DataColumn("SackAtSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSackAtSide);
                this.columnSackAtDistance = new global::System.Data.DataColumn("SackAtDistance", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSackAtDistance);
                this.columnPassDirection = new global::System.Data.DataColumn("PassDirection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassDirection);
                this.columnPassLength = new global::System.Data.DataColumn("PassLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassLength);
                this.columnPassCaughtAtDist = new global::System.Data.DataColumn("PassCaughtAtDist", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassCaughtAtDist);
                this.columnPassCaughtAtSide = new global::System.Data.DataColumn("PassCaughtAtSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassCaughtAtSide);
                this.columnPassYAC = new global::System.Data.DataColumn("PassYAC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassYAC);
                this.columnPassYardage = new global::System.Data.DataColumn("PassYardage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassYardage);
                this.columnPassStopSide = new global::System.Data.DataColumn("PassStopSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassStopSide);
                this.columnPassStopDistance = new global::System.Data.DataColumn("PassStopDistance", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassStopDistance);
                this.columnPassWR = new global::System.Data.DataColumn("PassWR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassWR);
                this.columnIsRun = new global::System.Data.DataColumn("IsRun", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRun);
                this.columnIsScramble = new global::System.Data.DataColumn("IsScramble", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsScramble);
                this.columnRunPlayer = new global::System.Data.DataColumn("RunPlayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunPlayer);
                this.columnRunDirection = new global::System.Data.DataColumn("RunDirection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunDirection);
                this.columnRunFormation = new global::System.Data.DataColumn("RunFormation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunFormation);
                this.columnRunStopAtDist = new global::System.Data.DataColumn("RunStopAtDist", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunStopAtDist);
                this.columnRunStopAtSide = new global::System.Data.DataColumn("RunStopAtSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunStopAtSide);
                this.columnRunYardage = new global::System.Data.DataColumn("RunYardage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunYardage);
                this.columnIsOb = new global::System.Data.DataColumn("IsOb", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOb);
                this.columnOb = new global::System.Data.DataColumn("Ob", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOb);
                this.columnTackledByPlayer = new global::System.Data.DataColumn("TackledByPlayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTackledByPlayer);
                this.columnIsFumble = new global::System.Data.DataColumn("IsFumble", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFumble);
                this.columnIsFumbleLost = new global::System.Data.DataColumn("IsFumbleLost", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFumbleLost);
                this.columnIsIntercepted = new global::System.Data.DataColumn("IsIntercepted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsIntercepted);
                this.columnIsTouchdown = new global::System.Data.DataColumn("IsTouchdown", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTouchdown);
                this.columnConversion = new global::System.Data.DataColumn("Conversion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConversion);
                this.columnIsTdYardPassFromFormat = new global::System.Data.DataColumn("IsTdYardPassFromFormat", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTdYardPassFromFormat);
                this.columnIsTouchdownStandardPlayFormat = new global::System.Data.DataColumn("IsTouchdownStandardPlayFormat", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTouchdownStandardPlayFormat);
                this.columnIsPenaltyCalled = new global::System.Data.DataColumn("IsPenaltyCalled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPenaltyCalled);
                this.columnIsPenaltyAccepted = new global::System.Data.DataColumn("IsPenaltyAccepted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPenaltyAccepted);
                this.columnIsPenaltyNoPlay = new global::System.Data.DataColumn("IsPenaltyNoPlay", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPenaltyNoPlay);
                this.columnPenaltyPlayer = new global::System.Data.DataColumn("PenaltyPlayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPenaltyPlayer);
                this.columnPenaltyRule = new global::System.Data.DataColumn("PenaltyRule", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPenaltyRule);
                this.columnPenaltyYardage = new global::System.Data.DataColumn("PenaltyYardage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPenaltyYardage);
                this.columnPenaltyEnforcedAtDist = new global::System.Data.DataColumn("PenaltyEnforcedAtDist", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPenaltyEnforcedAtDist);
                this.columnPenaltyEnforcedAtSide = new global::System.Data.DataColumn("PenaltyEnforcedAtSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPenaltyEnforcedAtSide);
                this.columnValidatedAgainst = new global::System.Data.DataColumn("ValidatedAgainst", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidatedAgainst);
                this.columnIsValidated = new global::System.Data.DataColumn("IsValidated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValidated);
                this.columnURL.AllowDBNull = false;
                this.columnURL.MaxLength = 1024;
                this.columnPossession.AllowDBNull = false;
                this.columnPossession.MaxLength = 5;
                this.columnSeq.AllowDBNull = false;
                this.columnSide.MaxLength = 5;
                this.columnTeam1.MaxLength = 5;
                this.columnTeam2.MaxLength = 5;
                this.columnKickPlayer.MaxLength = 128;
                this.columnKickStartSide.MaxLength = 5;
                this.columnKickLandSide.MaxLength = 5;
                this.columnKickReturnPlayer.MaxLength = 128;
                this.columnKickAdvanceStopSide.MaxLength = 5;
                this.columnPuntPlayer.MaxLength = 128;
                this.columnPuntLandedSide.MaxLength = 5;
                this.columnPuntSnapper.MaxLength = 128;
                this.columnPuntReceiver.MaxLength = 128;
                this.columnPuntingTeamPlayerDowned.MaxLength = 128;
                this.columnPuntReturningPlayer.MaxLength = 128;
                this.columnPuntStoppedSide.MaxLength = 5;
                this.columnFieldGoalPlayer.MaxLength = 128;
                this.columnFieldGoalMissBy.MaxLength = 256;
                this.columnFieldGoalCenter.MaxLength = 128;
                this.columnFieldGoalHolder.MaxLength = 128;
                this.columnFormation.MaxLength = 32;
                this.columnPassPlayer.MaxLength = 128;
                this.columnSackAtSide.MaxLength = 5;
                this.columnPassDirection.MaxLength = 32;
                this.columnPassLength.MaxLength = 32;
                this.columnPassCaughtAtSide.MaxLength = 5;
                this.columnPassStopSide.MaxLength = 5;
                this.columnPassWR.MaxLength = 128;
                this.columnRunPlayer.MaxLength = 128;
                this.columnRunDirection.MaxLength = 32;
                this.columnRunFormation.MaxLength = 32;
                this.columnRunStopAtSide.MaxLength = 5;
                this.columnOb.MaxLength = 32;
                this.columnTackledByPlayer.MaxLength = 128;
                this.columnConversion.MaxLength = 256;
                this.columnPenaltyPlayer.MaxLength = 128;
                this.columnPenaltyRule.MaxLength = 256;
                this.columnPenaltyEnforcedAtSide.MaxLength = 5;
                this.columnValidatedAgainst.MaxLength = 512;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParsedPlayByPlayRow NewParsedPlayByPlayRow()
            {
                return ((ParsedPlayByPlayRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ParsedPlayByPlayRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(ParsedPlayByPlayRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ParsedPlayByPlayRowChanged != null))
                {
                    this.ParsedPlayByPlayRowChanged(this, new ParsedPlayByPlayRowChangeEvent(((ParsedPlayByPlayRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ParsedPlayByPlayRowChanging != null))
                {
                    this.ParsedPlayByPlayRowChanging(this, new ParsedPlayByPlayRowChangeEvent(((ParsedPlayByPlayRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ParsedPlayByPlayRowDeleted != null))
                {
                    this.ParsedPlayByPlayRowDeleted(this, new ParsedPlayByPlayRowChangeEvent(((ParsedPlayByPlayRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ParsedPlayByPlayRowDeleting != null))
                {
                    this.ParsedPlayByPlayRowDeleting(this, new ParsedPlayByPlayRowChangeEvent(((ParsedPlayByPlayRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveParsedPlayByPlayRow(ParsedPlayByPlayRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FFToiletBowlDataSet ds = new FFToiletBowlDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParsedPlayByPlayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class StatsRow : global::System.Data.DataRow
        {

            private StatsDataTable tableStats;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal StatsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableStats = ((StatsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PlayerID
            {
                get
                {
                    return ((string)(this[this.tableStats.PlayerIDColumn]));
                }
                set
                {
                    this[this.tableStats.PlayerIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Player
            {
                get
                {
                    return ((string)(this[this.tableStats.PlayerColumn]));
                }
                set
                {
                    this[this.tableStats.PlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Pos
            {
                get
                {
                    return ((string)(this[this.tableStats.PosColumn]));
                }
                set
                {
                    this[this.tableStats.PosColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Team
            {
                get
                {
                    return ((string)(this[this.tableStats.TeamColumn]));
                }
                set
                {
                    this[this.tableStats.TeamColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Year
            {
                get
                {
                    return ((int)(this[this.tableStats.YearColumn]));
                }
                set
                {
                    this[this.tableStats.YearColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gm
            {
                get
                {
                    return ((int)(this[this.tableStats.GmColumn]));
                }
                set
                {
                    this[this.tableStats.GmColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PaComp
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.PaCompColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaComp\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.PaCompColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PaAtt
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.PaAttColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaAtt\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.PaAttColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PaYd
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.PaYdColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaYd\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.PaYdColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PaTD
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.PaTDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaTD\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.PaTDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PaINT
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.PaINTColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaINT\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.PaINTColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RuAtt
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.RuAttColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RuAtt\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.RuAttColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RuYd
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.RuYdColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RuYd\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.RuYdColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RuTD
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.RuTDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RuTD\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.RuTDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ReTgt
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.ReTgtColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReTgt\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.ReTgtColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ReRec
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.ReRecColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReRec\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.ReRecColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ReYd
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.ReYdColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReYd\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.ReYdColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ReTD
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.ReTDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReTD\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.ReTDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int KiFGM
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.KiFGMColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KiFGM\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.KiFGMColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int KiFGA
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.KiFGAColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KiFGA\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.KiFGAColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal KiFGP
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableStats.KiFGPColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KiFGP\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.KiFGPColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int KiEPM
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.KiEPMColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KiEPM\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.KiEPMColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int KiEPA
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.KiEPAColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KiEPA\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.KiEPAColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DSack
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.DSackColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSack\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.DSackColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DFR
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.DFRColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DFR\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.DFRColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DINT
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.DINTColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DINT\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.DINTColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DTD
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.DTDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DTD\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.DTDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DPA
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.DPAColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DPA\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.DPAColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DPaYd
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.DPaYdColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DPaYd\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.DPaYdColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DRuYd
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.DRuYdColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DRuYd\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.DRuYdColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DSafety
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.DSafetyColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSafety\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.DSafetyColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DKickTD
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStats.DKickTDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DKickTD\' in table \'Stats\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStats.DKickTDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPaCompNull()
            {
                return this.IsNull(this.tableStats.PaCompColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPaCompNull()
            {
                this[this.tableStats.PaCompColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPaAttNull()
            {
                return this.IsNull(this.tableStats.PaAttColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPaAttNull()
            {
                this[this.tableStats.PaAttColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPaYdNull()
            {
                return this.IsNull(this.tableStats.PaYdColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPaYdNull()
            {
                this[this.tableStats.PaYdColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPaTDNull()
            {
                return this.IsNull(this.tableStats.PaTDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPaTDNull()
            {
                this[this.tableStats.PaTDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPaINTNull()
            {
                return this.IsNull(this.tableStats.PaINTColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPaINTNull()
            {
                this[this.tableStats.PaINTColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRuAttNull()
            {
                return this.IsNull(this.tableStats.RuAttColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRuAttNull()
            {
                this[this.tableStats.RuAttColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRuYdNull()
            {
                return this.IsNull(this.tableStats.RuYdColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRuYdNull()
            {
                this[this.tableStats.RuYdColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRuTDNull()
            {
                return this.IsNull(this.tableStats.RuTDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRuTDNull()
            {
                this[this.tableStats.RuTDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsReTgtNull()
            {
                return this.IsNull(this.tableStats.ReTgtColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetReTgtNull()
            {
                this[this.tableStats.ReTgtColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsReRecNull()
            {
                return this.IsNull(this.tableStats.ReRecColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetReRecNull()
            {
                this[this.tableStats.ReRecColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsReYdNull()
            {
                return this.IsNull(this.tableStats.ReYdColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetReYdNull()
            {
                this[this.tableStats.ReYdColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsReTDNull()
            {
                return this.IsNull(this.tableStats.ReTDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetReTDNull()
            {
                this[this.tableStats.ReTDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKiFGMNull()
            {
                return this.IsNull(this.tableStats.KiFGMColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKiFGMNull()
            {
                this[this.tableStats.KiFGMColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKiFGANull()
            {
                return this.IsNull(this.tableStats.KiFGAColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKiFGANull()
            {
                this[this.tableStats.KiFGAColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKiFGPNull()
            {
                return this.IsNull(this.tableStats.KiFGPColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKiFGPNull()
            {
                this[this.tableStats.KiFGPColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKiEPMNull()
            {
                return this.IsNull(this.tableStats.KiEPMColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKiEPMNull()
            {
                this[this.tableStats.KiEPMColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKiEPANull()
            {
                return this.IsNull(this.tableStats.KiEPAColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKiEPANull()
            {
                this[this.tableStats.KiEPAColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSackNull()
            {
                return this.IsNull(this.tableStats.DSackColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSackNull()
            {
                this[this.tableStats.DSackColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDFRNull()
            {
                return this.IsNull(this.tableStats.DFRColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDFRNull()
            {
                this[this.tableStats.DFRColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDINTNull()
            {
                return this.IsNull(this.tableStats.DINTColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDINTNull()
            {
                this[this.tableStats.DINTColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDTDNull()
            {
                return this.IsNull(this.tableStats.DTDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDTDNull()
            {
                this[this.tableStats.DTDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDPANull()
            {
                return this.IsNull(this.tableStats.DPAColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDPANull()
            {
                this[this.tableStats.DPAColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDPaYdNull()
            {
                return this.IsNull(this.tableStats.DPaYdColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDPaYdNull()
            {
                this[this.tableStats.DPaYdColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDRuYdNull()
            {
                return this.IsNull(this.tableStats.DRuYdColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDRuYdNull()
            {
                this[this.tableStats.DRuYdColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSafetyNull()
            {
                return this.IsNull(this.tableStats.DSafetyColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSafetyNull()
            {
                this[this.tableStats.DSafetyColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDKickTDNull()
            {
                return this.IsNull(this.tableStats.DKickTDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDKickTDNull()
            {
                this[this.tableStats.DKickTDColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class InjuredReserveRow : global::System.Data.DataRow
        {

            private InjuredReserveDataTable tableInjuredReserve;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InjuredReserveRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableInjuredReserve = ((InjuredReserveDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string InjuredID
            {
                get
                {
                    return ((string)(this[this.tableInjuredReserve.InjuredIDColumn]));
                }
                set
                {
                    this[this.tableInjuredReserve.InjuredIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gm
            {
                get
                {
                    return ((int)(this[this.tableInjuredReserve.GmColumn]));
                }
                set
                {
                    this[this.tableInjuredReserve.GmColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Year
            {
                get
                {
                    return ((int)(this[this.tableInjuredReserve.YearColumn]));
                }
                set
                {
                    this[this.tableInjuredReserve.YearColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Player
            {
                get
                {
                    return ((string)(this[this.tableInjuredReserve.PlayerColumn]));
                }
                set
                {
                    this[this.tableInjuredReserve.PlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Pos
            {
                get
                {
                    return ((string)(this[this.tableInjuredReserve.PosColumn]));
                }
                set
                {
                    this[this.tableInjuredReserve.PosColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Team
            {
                get
                {
                    return ((string)(this[this.tableInjuredReserve.TeamColumn]));
                }
                set
                {
                    this[this.tableInjuredReserve.TeamColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Status
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableInjuredReserve.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'InjuredReserve\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuredReserve.StatusColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string StatsPlayerID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableInjuredReserve.StatsPlayerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatsPlayerID\' in table \'InjuredReserve\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuredReserve.StatsPlayerIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStatusNull()
            {
                return this.IsNull(this.tableInjuredReserve.StatusColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStatusNull()
            {
                this[this.tableInjuredReserve.StatusColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStatsPlayerIDNull()
            {
                return this.IsNull(this.tableInjuredReserve.StatsPlayerIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStatsPlayerIDNull()
            {
                this[this.tableInjuredReserve.StatsPlayerIDColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class InjuryReportRow : global::System.Data.DataRow
        {

            private InjuryReportDataTable tableInjuryReport;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InjuryReportRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableInjuryReport = ((InjuryReportDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Player
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableInjuryReport.PlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Player\' in table \'InjuryReport\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuryReport.PlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Pos
            {
                get
                {
                    return ((string)(this[this.tableInjuryReport.PosColumn]));
                }
                set
                {
                    this[this.tableInjuryReport.PosColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EspnPlayerURL
            {
                get
                {
                    return ((string)(this[this.tableInjuryReport.EspnPlayerURLColumn]));
                }
                set
                {
                    this[this.tableInjuryReport.EspnPlayerURLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EspnPlayerID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableInjuryReport.EspnPlayerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'EspnPlayerID\' in table \'InjuryReport\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuryReport.EspnPlayerIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EspnTeam
            {
                get
                {
                    return ((string)(this[this.tableInjuryReport.EspnTeamColumn]));
                }
                set
                {
                    this[this.tableInjuryReport.EspnTeamColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Team
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableInjuryReport.TeamColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Team\' in table \'InjuryReport\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuryReport.TeamColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Status
            {
                get
                {
                    return ((string)(this[this.tableInjuryReport.StatusColumn]));
                }
                set
                {
                    this[this.tableInjuryReport.StatusColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime ReportDate
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableInjuryReport.ReportDateColumn]));
                }
                set
                {
                    this[this.tableInjuryReport.ReportDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LoadDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableInjuryReport.LoadDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadDate\' in table \'InjuryReport\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuryReport.LoadDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LoadID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableInjuryReport.LoadIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadID\' in table \'InjuryReport\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuryReport.LoadIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string StatsPlayerID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableInjuryReport.StatsPlayerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatsPlayerID\' in table \'InjuryReport\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuryReport.StatsPlayerIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Year
            {
                get
                {
                    return ((int)(this[this.tableInjuryReport.YearColumn]));
                }
                set
                {
                    this[this.tableInjuryReport.YearColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gm
            {
                get
                {
                    return ((int)(this[this.tableInjuryReport.GmColumn]));
                }
                set
                {
                    this[this.tableInjuryReport.GmColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Injury
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableInjuryReport.InjuryColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Injury\' in table \'InjuryReport\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuryReport.InjuryColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Notes
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableInjuryReport.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'InjuryReport\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuryReport.NotesColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Source
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableInjuryReport.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'InjuryReport\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableInjuryReport.SourceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPlayerNull()
            {
                return this.IsNull(this.tableInjuryReport.PlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPlayerNull()
            {
                this[this.tableInjuryReport.PlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEspnPlayerIDNull()
            {
                return this.IsNull(this.tableInjuryReport.EspnPlayerIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEspnPlayerIDNull()
            {
                this[this.tableInjuryReport.EspnPlayerIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTeamNull()
            {
                return this.IsNull(this.tableInjuryReport.TeamColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTeamNull()
            {
                this[this.tableInjuryReport.TeamColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoadDateNull()
            {
                return this.IsNull(this.tableInjuryReport.LoadDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoadDateNull()
            {
                this[this.tableInjuryReport.LoadDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoadIDNull()
            {
                return this.IsNull(this.tableInjuryReport.LoadIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoadIDNull()
            {
                this[this.tableInjuryReport.LoadIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStatsPlayerIDNull()
            {
                return this.IsNull(this.tableInjuryReport.StatsPlayerIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStatsPlayerIDNull()
            {
                this[this.tableInjuryReport.StatsPlayerIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInjuryNull()
            {
                return this.IsNull(this.tableInjuryReport.InjuryColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInjuryNull()
            {
                this[this.tableInjuryReport.InjuryColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNotesNull()
            {
                return this.IsNull(this.tableInjuryReport.NotesColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                this[this.tableInjuryReport.NotesColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSourceNull()
            {
                return this.IsNull(this.tableInjuryReport.SourceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSourceNull()
            {
                this[this.tableInjuryReport.SourceColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CityIslandRosterSpotsRow : global::System.Data.DataRow
        {

            private CityIslandRosterSpotsDataTable tableCityIslandRosterSpots;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CityIslandRosterSpotsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableCityIslandRosterSpots = ((CityIslandRosterSpotsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Pos
            {
                get
                {
                    return ((string)(this[this.tableCityIslandRosterSpots.PosColumn]));
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.PosColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Slot
            {
                get
                {
                    return ((int)(this[this.tableCityIslandRosterSpots.SlotColumn]));
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.SlotColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Starter
            {
                get
                {
                    return ((bool)(this[this.tableCityIslandRosterSpots.StarterColumn]));
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.StarterColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EspnPlayerID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandRosterSpots.EspnPlayerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'EspnPlayerID\' in table \'CityIslandRosterSpots\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.EspnPlayerIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string StatsPlayerID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandRosterSpots.StatsPlayerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatsPlayerID\' in table \'CityIslandRosterSpots\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.StatsPlayerIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Player
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandRosterSpots.PlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Player\' in table \'CityIslandRosterSpots\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.PlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NflTeam
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandRosterSpots.NflTeamColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'NflTeam\' in table \'CityIslandRosterSpots\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.NflTeamColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LoadDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableCityIslandRosterSpots.LoadDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadDate\' in table \'CityIslandRosterSpots\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.LoadDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LoadID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandRosterSpots.LoadIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadID\' in table \'CityIslandRosterSpots\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.LoadIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TeamID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandRosterSpots.TeamIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TeamID\' in table \'CityIslandRosterSpots\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.TeamIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RosterSlot
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandRosterSpots.RosterSlotColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RosterSlot\' in table \'CityIslandRosterSpots\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandRosterSpots.RosterSlotColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEspnPlayerIDNull()
            {
                return this.IsNull(this.tableCityIslandRosterSpots.EspnPlayerIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEspnPlayerIDNull()
            {
                this[this.tableCityIslandRosterSpots.EspnPlayerIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStatsPlayerIDNull()
            {
                return this.IsNull(this.tableCityIslandRosterSpots.StatsPlayerIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStatsPlayerIDNull()
            {
                this[this.tableCityIslandRosterSpots.StatsPlayerIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPlayerNull()
            {
                return this.IsNull(this.tableCityIslandRosterSpots.PlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPlayerNull()
            {
                this[this.tableCityIslandRosterSpots.PlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNflTeamNull()
            {
                return this.IsNull(this.tableCityIslandRosterSpots.NflTeamColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNflTeamNull()
            {
                this[this.tableCityIslandRosterSpots.NflTeamColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoadDateNull()
            {
                return this.IsNull(this.tableCityIslandRosterSpots.LoadDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoadDateNull()
            {
                this[this.tableCityIslandRosterSpots.LoadDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoadIDNull()
            {
                return this.IsNull(this.tableCityIslandRosterSpots.LoadIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoadIDNull()
            {
                this[this.tableCityIslandRosterSpots.LoadIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTeamIDNull()
            {
                return this.IsNull(this.tableCityIslandRosterSpots.TeamIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTeamIDNull()
            {
                this[this.tableCityIslandRosterSpots.TeamIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRosterSlotNull()
            {
                return this.IsNull(this.tableCityIslandRosterSpots.RosterSlotColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRosterSlotNull()
            {
                this[this.tableCityIslandRosterSpots.RosterSlotColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CityIslandTeamsRow : global::System.Data.DataRow
        {

            private CityIslandTeamsDataTable tableCityIslandTeams;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CityIslandTeamsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableCityIslandTeams = ((CityIslandTeamsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TeamName
            {
                get
                {
                    return ((string)(this[this.tableCityIslandTeams.TeamNameColumn]));
                }
                set
                {
                    this[this.tableCityIslandTeams.TeamNameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Alias
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandTeams.AliasColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Alias\' in table \'CityIslandTeams\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandTeams.AliasColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Num
            {
                get
                {
                    return ((int)(this[this.tableCityIslandTeams.NumColumn]));
                }
                set
                {
                    this[this.tableCityIslandTeams.NumColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TeamID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandTeams.TeamIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TeamID\' in table \'CityIslandTeams\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandTeams.TeamIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Wins
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableCityIslandTeams.WinsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Wins\' in table \'CityIslandTeams\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandTeams.WinsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Losses
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableCityIslandTeams.LossesColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Losses\' in table \'CityIslandTeams\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandTeams.LossesColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Ties
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableCityIslandTeams.TiesColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ties\' in table \'CityIslandTeams\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandTeams.TiesColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LoadDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableCityIslandTeams.LoadDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadDate\' in table \'CityIslandTeams\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandTeams.LoadDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LoadID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandTeams.LoadIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadID\' in table \'CityIslandTeams\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandTeams.LoadIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TargetGm
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableCityIslandTeams.TargetGmColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TargetGm\' in table \'CityIslandTeams\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandTeams.TargetGmColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GmVersus
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCityIslandTeams.GmVersusColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'GmVersus\' in table \'CityIslandTeams\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCityIslandTeams.GmVersusColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAliasNull()
            {
                return this.IsNull(this.tableCityIslandTeams.AliasColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAliasNull()
            {
                this[this.tableCityIslandTeams.AliasColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTeamIDNull()
            {
                return this.IsNull(this.tableCityIslandTeams.TeamIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTeamIDNull()
            {
                this[this.tableCityIslandTeams.TeamIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWinsNull()
            {
                return this.IsNull(this.tableCityIslandTeams.WinsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWinsNull()
            {
                this[this.tableCityIslandTeams.WinsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLossesNull()
            {
                return this.IsNull(this.tableCityIslandTeams.LossesColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLossesNull()
            {
                this[this.tableCityIslandTeams.LossesColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTiesNull()
            {
                return this.IsNull(this.tableCityIslandTeams.TiesColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTiesNull()
            {
                this[this.tableCityIslandTeams.TiesColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoadDateNull()
            {
                return this.IsNull(this.tableCityIslandTeams.LoadDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoadDateNull()
            {
                this[this.tableCityIslandTeams.LoadDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoadIDNull()
            {
                return this.IsNull(this.tableCityIslandTeams.LoadIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoadIDNull()
            {
                this[this.tableCityIslandTeams.LoadIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTargetGmNull()
            {
                return this.IsNull(this.tableCityIslandTeams.TargetGmColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTargetGmNull()
            {
                this[this.tableCityIslandTeams.TargetGmColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGmVersusNull()
            {
                return this.IsNull(this.tableCityIslandTeams.GmVersusColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGmVersusNull()
            {
                this[this.tableCityIslandTeams.GmVersusColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ScheduleRow : global::System.Data.DataRow
        {

            private ScheduleDataTable tableSchedule;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ScheduleRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableSchedule = ((ScheduleDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Year
            {
                get
                {
                    return ((int)(this[this.tableSchedule.YearColumn]));
                }
                set
                {
                    this[this.tableSchedule.YearColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Wk
            {
                get
                {
                    return ((int)(this[this.tableSchedule.WkColumn]));
                }
                set
                {
                    this[this.tableSchedule.WkColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Team
            {
                get
                {
                    return ((string)(this[this.tableSchedule.TeamColumn]));
                }
                set
                {
                    this[this.tableSchedule.TeamColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Versus
            {
                get
                {
                    return ((string)(this[this.tableSchedule.VersusColumn]));
                }
                set
                {
                    this[this.tableSchedule.VersusColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Away
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableSchedule.AwayColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Away\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSchedule.AwayColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LoadURL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSchedule.LoadURLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadURL\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSchedule.LoadURLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LoadDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableSchedule.LoadDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadDate\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSchedule.LoadDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LoadResult
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSchedule.LoadResultColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadResult\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSchedule.LoadResultColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PlayByPlayURL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSchedule.PlayByPlayURLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlayByPlayURL\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSchedule.PlayByPlayURLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAwayNull()
            {
                return this.IsNull(this.tableSchedule.AwayColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAwayNull()
            {
                this[this.tableSchedule.AwayColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoadURLNull()
            {
                return this.IsNull(this.tableSchedule.LoadURLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoadURLNull()
            {
                this[this.tableSchedule.LoadURLColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoadDateNull()
            {
                return this.IsNull(this.tableSchedule.LoadDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoadDateNull()
            {
                this[this.tableSchedule.LoadDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoadResultNull()
            {
                return this.IsNull(this.tableSchedule.LoadResultColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoadResultNull()
            {
                this[this.tableSchedule.LoadResultColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPlayByPlayURLNull()
            {
                return this.IsNull(this.tableSchedule.PlayByPlayURLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPlayByPlayURLNull()
            {
                this[this.tableSchedule.PlayByPlayURLColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PlayByPlayRow : global::System.Data.DataRow
        {

            private PlayByPlayDataTable tablePlayByPlay;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PlayByPlayRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tablePlayByPlay = ((PlayByPlayDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string URL
            {
                get
                {
                    return ((string)(this[this.tablePlayByPlay.URLColumn]));
                }
                set
                {
                    this[this.tablePlayByPlay.URLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Possession
            {
                get
                {
                    return ((string)(this[this.tablePlayByPlay.PossessionColumn]));
                }
                set
                {
                    this[this.tablePlayByPlay.PossessionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DownDistance
            {
                get
                {
                    return ((string)(this[this.tablePlayByPlay.DownDistanceColumn]));
                }
                set
                {
                    this[this.tablePlayByPlay.DownDistanceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Play
            {
                get
                {
                    return ((string)(this[this.tablePlayByPlay.PlayColumn]));
                }
                set
                {
                    this[this.tablePlayByPlay.PlayColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Seq
            {
                get
                {
                    return ((int)(this[this.tablePlayByPlay.SeqColumn]));
                }
                set
                {
                    this[this.tablePlayByPlay.SeqColumn] = value;
                }
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ParsedPlayByPlayRow : global::System.Data.DataRow
        {

            private ParsedPlayByPlayDataTable tableParsedPlayByPlay;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ParsedPlayByPlayRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableParsedPlayByPlay = ((ParsedPlayByPlayDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string URL
            {
                get
                {
                    return ((string)(this[this.tableParsedPlayByPlay.URLColumn]));
                }
                set
                {
                    this[this.tableParsedPlayByPlay.URLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Possession
            {
                get
                {
                    return ((string)(this[this.tableParsedPlayByPlay.PossessionColumn]));
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PossessionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Seq
            {
                get
                {
                    return ((int)(this[this.tableParsedPlayByPlay.SeqColumn]));
                }
                set
                {
                    this[this.tableParsedPlayByPlay.SeqColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Down
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.DownColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Down\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.DownColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Side
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.SideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Side\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.SideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Distance
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.DistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Distance\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.DistanceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TimeLeftSec
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.TimeLeftSecColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeLeftSec\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.TimeLeftSecColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Qtr
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.QtrColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qtr\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.QtrColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Team1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.Team1Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Team1\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.Team1Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Team2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.Team2Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Team2\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.Team2Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGameMilestone
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsGameMilestoneColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsGameMilestone\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsGameMilestoneColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTimeout
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsTimeoutColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTimeout\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsTimeoutColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Timeout
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.TimeoutColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Timeout\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.TimeoutColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKick
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsKickColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsKick\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsKickColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string KickPlayer
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.KickPlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KickPlayer\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.KickPlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int KickYards
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.KickYardsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KickYards\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.KickYardsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string KickStartSide
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.KickStartSideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KickStartSide\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.KickStartSideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int KickStartDistance
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.KickStartDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KickStartDistance\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.KickStartDistanceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string KickLandSide
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.KickLandSideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KickLandSide\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.KickLandSideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int KickLandDistance
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.KickLandDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KickLandDistance\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.KickLandDistanceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string KickReturnPlayer
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.KickReturnPlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KickReturnPlayer\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.KickReturnPlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickTouchback
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsKickTouchbackColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsKickTouchback\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsKickTouchbackColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string KickAdvanceStopSide
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.KickAdvanceStopSideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KickAdvanceStopSide\' in table \'ParsedPlayByPlay\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.KickAdvanceStopSideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int KickAdvanceStopYards
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.KickAdvanceStopYardsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KickAdvanceStopYards\' in table \'ParsedPlayByPlay\' is DBNull" +
                                ".", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.KickAdvanceStopYardsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int KickReturn
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.KickReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'KickReturn\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.KickReturnColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOnsideKick
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsOnsideKickColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOnsideKick\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsOnsideKickColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPunt
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsPuntColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPunt\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsPuntColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PuntPlayer
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PuntPlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntPlayer\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntPlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PuntYardage
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.PuntYardageColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntYardage\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntYardageColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PuntLandedSide
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PuntLandedSideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntLandedSide\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntLandedSideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PuntLandedDistance
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.PuntLandedDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntLandedDistance\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntLandedDistanceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PuntSnapper
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PuntSnapperColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntSnapper\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntSnapperColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntFairCatch
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsPuntFairCatchColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPuntFairCatch\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsPuntFairCatchColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntMuffed
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsPuntMuffedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPuntMuffed\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsPuntMuffedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PuntReceiver
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PuntReceiverColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntReceiver\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntReceiverColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntTouchback
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsPuntTouchbackColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPuntTouchback\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsPuntTouchbackColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PuntingTeamPlayerDowned
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PuntingTeamPlayerDownedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntingTeamPlayerDowned\' in table \'ParsedPlayByPlay\' is DBN" +
                                "ull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntingTeamPlayerDownedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PuntReturningPlayer
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PuntReturningPlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntReturningPlayer\' in table \'ParsedPlayByPlay\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntReturningPlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PuntStoppedSide
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PuntStoppedSideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntStoppedSide\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntStoppedSideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PuntStoppedYards
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.PuntStoppedYardsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntStoppedYards\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntStoppedYardsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PuntReturnYardage
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.PuntReturnYardageColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PuntReturnYardage\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PuntReturnYardageColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntOutOfBounds
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsPuntOutOfBoundsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPuntOutOfBounds\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsPuntOutOfBoundsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFieldGoalAttempt
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsFieldGoalAttemptColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFieldGoalAttempt\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsFieldGoalAttemptColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFieldGoalGood
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsFieldGoalGoodColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFieldGoalGood\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsFieldGoalGoodColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FieldGoalYardage
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.FieldGoalYardageColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'FieldGoalYardage\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.FieldGoalYardageColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FieldGoalPlayer
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.FieldGoalPlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'FieldGoalPlayer\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.FieldGoalPlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FieldGoalMissBy
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.FieldGoalMissByColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'FieldGoalMissBy\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.FieldGoalMissByColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FieldGoalCenter
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.FieldGoalCenterColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'FieldGoalCenter\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.FieldGoalCenterColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FieldGoalHolder
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.FieldGoalHolderColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'FieldGoalHolder\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.FieldGoalHolderColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Formation
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.FormationColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Formation\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.FormationColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PassPlayer
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PassPlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassPlayer\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PassPlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIncomplete
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsIncompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsIncomplete\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsIncompleteColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPass
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsPassColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPass\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsPassColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSacked
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsSackedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSacked\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsSackedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SackAtSide
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.SackAtSideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SackAtSide\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.SackAtSideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SackAtDistance
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.SackAtDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SackAtDistance\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.SackAtDistanceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PassDirection
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PassDirectionColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassDirection\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PassDirectionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PassLength
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PassLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassLength\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PassLengthColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PassCaughtAtDist
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.PassCaughtAtDistColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassCaughtAtDist\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PassCaughtAtDistColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PassCaughtAtSide
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PassCaughtAtSideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassCaughtAtSide\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PassCaughtAtSideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PassYAC
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.PassYACColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassYAC\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PassYACColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PassYardage
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.PassYardageColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassYardage\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PassYardageColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PassStopSide
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PassStopSideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassStopSide\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PassStopSideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PassStopDistance
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.PassStopDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassStopDistance\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PassStopDistanceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PassWR
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PassWRColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassWR\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PassWRColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRun
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsRunColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRun\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsRunColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsScramble
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsScrambleColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsScramble\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsScrambleColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RunPlayer
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.RunPlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunPlayer\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.RunPlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RunDirection
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.RunDirectionColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunDirection\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.RunDirectionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RunFormation
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.RunFormationColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunFormation\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.RunFormationColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RunStopAtDist
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.RunStopAtDistColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunStopAtDist\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.RunStopAtDistColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RunStopAtSide
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.RunStopAtSideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunStopAtSide\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.RunStopAtSideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RunYardage
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.RunYardageColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunYardage\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.RunYardageColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOb
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsObColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOb\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsObColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Ob
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.ObColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ob\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.ObColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TackledByPlayer
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.TackledByPlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TackledByPlayer\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.TackledByPlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFumble
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsFumbleColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFumble\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsFumbleColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFumbleLost
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsFumbleLostColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFumbleLost\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsFumbleLostColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIntercepted
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsInterceptedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsIntercepted\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsInterceptedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTouchdown
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsTouchdownColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTouchdown\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsTouchdownColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Conversion
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.ConversionColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Conversion\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.ConversionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTdYardPassFromFormat
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsTdYardPassFromFormatColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTdYardPassFromFormat\' in table \'ParsedPlayByPlay\' is DBNu" +
                                "ll.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsTdYardPassFromFormatColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTouchdownStandardPlayFormat
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsTouchdownStandardPlayFormatColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTouchdownStandardPlayFormat\' in table \'ParsedPlayByPlay\' " +
                                "is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsTouchdownStandardPlayFormatColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPenaltyCalled
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsPenaltyCalledColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPenaltyCalled\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsPenaltyCalledColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPenaltyAccepted
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsPenaltyAcceptedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPenaltyAccepted\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsPenaltyAcceptedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPenaltyNoPlay
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsPenaltyNoPlayColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPenaltyNoPlay\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsPenaltyNoPlayColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PenaltyPlayer
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PenaltyPlayerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PenaltyPlayer\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PenaltyPlayerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PenaltyRule
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PenaltyRuleColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PenaltyRule\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PenaltyRuleColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PenaltyYardage
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.PenaltyYardageColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PenaltyYardage\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PenaltyYardageColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PenaltyEnforcedAtDist
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParsedPlayByPlay.PenaltyEnforcedAtDistColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PenaltyEnforcedAtDist\' in table \'ParsedPlayByPlay\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PenaltyEnforcedAtDistColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PenaltyEnforcedAtSide
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.PenaltyEnforcedAtSideColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PenaltyEnforcedAtSide\' in table \'ParsedPlayByPlay\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.PenaltyEnforcedAtSideColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ValidatedAgainst
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParsedPlayByPlay.ValidatedAgainstColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidatedAgainst\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.ValidatedAgainstColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsValidated
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableParsedPlayByPlay.IsValidatedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValidated\' in table \'ParsedPlayByPlay\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParsedPlayByPlay.IsValidatedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDownNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.DownColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDownNull()
            {
                this[this.tableParsedPlayByPlay.DownColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.SideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSideNull()
            {
                this[this.tableParsedPlayByPlay.SideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDistanceNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.DistanceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDistanceNull()
            {
                this[this.tableParsedPlayByPlay.DistanceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTimeLeftSecNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.TimeLeftSecColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTimeLeftSecNull()
            {
                this[this.tableParsedPlayByPlay.TimeLeftSecColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQtrNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.QtrColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetQtrNull()
            {
                this[this.tableParsedPlayByPlay.QtrColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTeam1Null()
            {
                return this.IsNull(this.tableParsedPlayByPlay.Team1Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTeam1Null()
            {
                this[this.tableParsedPlayByPlay.Team1Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTeam2Null()
            {
                return this.IsNull(this.tableParsedPlayByPlay.Team2Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTeam2Null()
            {
                this[this.tableParsedPlayByPlay.Team2Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsGameMilestoneNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsGameMilestoneColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsGameMilestoneNull()
            {
                this[this.tableParsedPlayByPlay.IsGameMilestoneColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsTimeoutNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsTimeoutColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsTimeoutNull()
            {
                this[this.tableParsedPlayByPlay.IsTimeoutColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTimeoutNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.TimeoutColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTimeoutNull()
            {
                this[this.tableParsedPlayByPlay.TimeoutColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsKickNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsKickColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsKickNull()
            {
                this[this.tableParsedPlayByPlay.IsKickColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickPlayerNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.KickPlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKickPlayerNull()
            {
                this[this.tableParsedPlayByPlay.KickPlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickYardsNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.KickYardsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKickYardsNull()
            {
                this[this.tableParsedPlayByPlay.KickYardsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickStartSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.KickStartSideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKickStartSideNull()
            {
                this[this.tableParsedPlayByPlay.KickStartSideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickStartDistanceNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.KickStartDistanceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKickStartDistanceNull()
            {
                this[this.tableParsedPlayByPlay.KickStartDistanceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickLandSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.KickLandSideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKickLandSideNull()
            {
                this[this.tableParsedPlayByPlay.KickLandSideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickLandDistanceNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.KickLandDistanceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKickLandDistanceNull()
            {
                this[this.tableParsedPlayByPlay.KickLandDistanceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickReturnPlayerNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.KickReturnPlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKickReturnPlayerNull()
            {
                this[this.tableParsedPlayByPlay.KickReturnPlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsKickTouchbackNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsKickTouchbackColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsKickTouchbackNull()
            {
                this[this.tableParsedPlayByPlay.IsKickTouchbackColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickAdvanceStopSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.KickAdvanceStopSideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKickAdvanceStopSideNull()
            {
                this[this.tableParsedPlayByPlay.KickAdvanceStopSideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickAdvanceStopYardsNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.KickAdvanceStopYardsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKickAdvanceStopYardsNull()
            {
                this[this.tableParsedPlayByPlay.KickAdvanceStopYardsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKickReturnNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.KickReturnColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKickReturnNull()
            {
                this[this.tableParsedPlayByPlay.KickReturnColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsOnsideKickNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsOnsideKickColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsOnsideKickNull()
            {
                this[this.tableParsedPlayByPlay.IsOnsideKickColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsPuntNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsPuntColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsPuntNull()
            {
                this[this.tableParsedPlayByPlay.IsPuntColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntPlayerNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntPlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntPlayerNull()
            {
                this[this.tableParsedPlayByPlay.PuntPlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntYardageNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntYardageColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntYardageNull()
            {
                this[this.tableParsedPlayByPlay.PuntYardageColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntLandedSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntLandedSideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntLandedSideNull()
            {
                this[this.tableParsedPlayByPlay.PuntLandedSideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntLandedDistanceNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntLandedDistanceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntLandedDistanceNull()
            {
                this[this.tableParsedPlayByPlay.PuntLandedDistanceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntSnapperNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntSnapperColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntSnapperNull()
            {
                this[this.tableParsedPlayByPlay.PuntSnapperColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsPuntFairCatchNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsPuntFairCatchColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsPuntFairCatchNull()
            {
                this[this.tableParsedPlayByPlay.IsPuntFairCatchColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsPuntMuffedNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsPuntMuffedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsPuntMuffedNull()
            {
                this[this.tableParsedPlayByPlay.IsPuntMuffedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntReceiverNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntReceiverColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntReceiverNull()
            {
                this[this.tableParsedPlayByPlay.PuntReceiverColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsPuntTouchbackNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsPuntTouchbackColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsPuntTouchbackNull()
            {
                this[this.tableParsedPlayByPlay.IsPuntTouchbackColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntingTeamPlayerDownedNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntingTeamPlayerDownedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntingTeamPlayerDownedNull()
            {
                this[this.tableParsedPlayByPlay.PuntingTeamPlayerDownedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntReturningPlayerNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntReturningPlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntReturningPlayerNull()
            {
                this[this.tableParsedPlayByPlay.PuntReturningPlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntStoppedSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntStoppedSideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntStoppedSideNull()
            {
                this[this.tableParsedPlayByPlay.PuntStoppedSideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntStoppedYardsNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntStoppedYardsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntStoppedYardsNull()
            {
                this[this.tableParsedPlayByPlay.PuntStoppedYardsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPuntReturnYardageNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PuntReturnYardageColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPuntReturnYardageNull()
            {
                this[this.tableParsedPlayByPlay.PuntReturnYardageColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsPuntOutOfBoundsNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsPuntOutOfBoundsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsPuntOutOfBoundsNull()
            {
                this[this.tableParsedPlayByPlay.IsPuntOutOfBoundsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsFieldGoalAttemptNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsFieldGoalAttemptColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsFieldGoalAttemptNull()
            {
                this[this.tableParsedPlayByPlay.IsFieldGoalAttemptColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsFieldGoalGoodNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsFieldGoalGoodColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsFieldGoalGoodNull()
            {
                this[this.tableParsedPlayByPlay.IsFieldGoalGoodColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFieldGoalYardageNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.FieldGoalYardageColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFieldGoalYardageNull()
            {
                this[this.tableParsedPlayByPlay.FieldGoalYardageColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFieldGoalPlayerNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.FieldGoalPlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFieldGoalPlayerNull()
            {
                this[this.tableParsedPlayByPlay.FieldGoalPlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFieldGoalMissByNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.FieldGoalMissByColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFieldGoalMissByNull()
            {
                this[this.tableParsedPlayByPlay.FieldGoalMissByColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFieldGoalCenterNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.FieldGoalCenterColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFieldGoalCenterNull()
            {
                this[this.tableParsedPlayByPlay.FieldGoalCenterColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFieldGoalHolderNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.FieldGoalHolderColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFieldGoalHolderNull()
            {
                this[this.tableParsedPlayByPlay.FieldGoalHolderColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFormationNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.FormationColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFormationNull()
            {
                this[this.tableParsedPlayByPlay.FormationColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPassPlayerNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PassPlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPassPlayerNull()
            {
                this[this.tableParsedPlayByPlay.PassPlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsIncompleteNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsIncompleteColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsIncompleteNull()
            {
                this[this.tableParsedPlayByPlay.IsIncompleteColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsPassNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsPassColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsPassNull()
            {
                this[this.tableParsedPlayByPlay.IsPassColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsSackedNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsSackedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsSackedNull()
            {
                this[this.tableParsedPlayByPlay.IsSackedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSackAtSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.SackAtSideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSackAtSideNull()
            {
                this[this.tableParsedPlayByPlay.SackAtSideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSackAtDistanceNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.SackAtDistanceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSackAtDistanceNull()
            {
                this[this.tableParsedPlayByPlay.SackAtDistanceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPassDirectionNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PassDirectionColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPassDirectionNull()
            {
                this[this.tableParsedPlayByPlay.PassDirectionColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPassLengthNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PassLengthColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPassLengthNull()
            {
                this[this.tableParsedPlayByPlay.PassLengthColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPassCaughtAtDistNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PassCaughtAtDistColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPassCaughtAtDistNull()
            {
                this[this.tableParsedPlayByPlay.PassCaughtAtDistColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPassCaughtAtSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PassCaughtAtSideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPassCaughtAtSideNull()
            {
                this[this.tableParsedPlayByPlay.PassCaughtAtSideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPassYACNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PassYACColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPassYACNull()
            {
                this[this.tableParsedPlayByPlay.PassYACColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPassYardageNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PassYardageColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPassYardageNull()
            {
                this[this.tableParsedPlayByPlay.PassYardageColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPassStopSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PassStopSideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPassStopSideNull()
            {
                this[this.tableParsedPlayByPlay.PassStopSideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPassStopDistanceNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PassStopDistanceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPassStopDistanceNull()
            {
                this[this.tableParsedPlayByPlay.PassStopDistanceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPassWRNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PassWRColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPassWRNull()
            {
                this[this.tableParsedPlayByPlay.PassWRColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsRunNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsRunColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsRunNull()
            {
                this[this.tableParsedPlayByPlay.IsRunColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsScrambleNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsScrambleColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsScrambleNull()
            {
                this[this.tableParsedPlayByPlay.IsScrambleColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRunPlayerNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.RunPlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRunPlayerNull()
            {
                this[this.tableParsedPlayByPlay.RunPlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRunDirectionNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.RunDirectionColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRunDirectionNull()
            {
                this[this.tableParsedPlayByPlay.RunDirectionColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRunFormationNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.RunFormationColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRunFormationNull()
            {
                this[this.tableParsedPlayByPlay.RunFormationColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRunStopAtDistNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.RunStopAtDistColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRunStopAtDistNull()
            {
                this[this.tableParsedPlayByPlay.RunStopAtDistColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRunStopAtSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.RunStopAtSideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRunStopAtSideNull()
            {
                this[this.tableParsedPlayByPlay.RunStopAtSideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRunYardageNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.RunYardageColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRunYardageNull()
            {
                this[this.tableParsedPlayByPlay.RunYardageColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsObNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsObColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsObNull()
            {
                this[this.tableParsedPlayByPlay.IsObColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsObNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.ObColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetObNull()
            {
                this[this.tableParsedPlayByPlay.ObColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTackledByPlayerNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.TackledByPlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTackledByPlayerNull()
            {
                this[this.tableParsedPlayByPlay.TackledByPlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsFumbleNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsFumbleColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsFumbleNull()
            {
                this[this.tableParsedPlayByPlay.IsFumbleColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsFumbleLostNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsFumbleLostColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsFumbleLostNull()
            {
                this[this.tableParsedPlayByPlay.IsFumbleLostColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsInterceptedNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsInterceptedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsInterceptedNull()
            {
                this[this.tableParsedPlayByPlay.IsInterceptedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsTouchdownNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsTouchdownColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsTouchdownNull()
            {
                this[this.tableParsedPlayByPlay.IsTouchdownColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsConversionNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.ConversionColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetConversionNull()
            {
                this[this.tableParsedPlayByPlay.ConversionColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsTdYardPassFromFormatNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsTdYardPassFromFormatColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsTdYardPassFromFormatNull()
            {
                this[this.tableParsedPlayByPlay.IsTdYardPassFromFormatColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsTouchdownStandardPlayFormatNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsTouchdownStandardPlayFormatColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsTouchdownStandardPlayFormatNull()
            {
                this[this.tableParsedPlayByPlay.IsTouchdownStandardPlayFormatColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsPenaltyCalledNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsPenaltyCalledColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsPenaltyCalledNull()
            {
                this[this.tableParsedPlayByPlay.IsPenaltyCalledColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsPenaltyAcceptedNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsPenaltyAcceptedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsPenaltyAcceptedNull()
            {
                this[this.tableParsedPlayByPlay.IsPenaltyAcceptedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsPenaltyNoPlayNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsPenaltyNoPlayColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsPenaltyNoPlayNull()
            {
                this[this.tableParsedPlayByPlay.IsPenaltyNoPlayColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPenaltyPlayerNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PenaltyPlayerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPenaltyPlayerNull()
            {
                this[this.tableParsedPlayByPlay.PenaltyPlayerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPenaltyRuleNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PenaltyRuleColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPenaltyRuleNull()
            {
                this[this.tableParsedPlayByPlay.PenaltyRuleColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPenaltyYardageNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PenaltyYardageColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPenaltyYardageNull()
            {
                this[this.tableParsedPlayByPlay.PenaltyYardageColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPenaltyEnforcedAtDistNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PenaltyEnforcedAtDistColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPenaltyEnforcedAtDistNull()
            {
                this[this.tableParsedPlayByPlay.PenaltyEnforcedAtDistColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPenaltyEnforcedAtSideNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.PenaltyEnforcedAtSideColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPenaltyEnforcedAtSideNull()
            {
                this[this.tableParsedPlayByPlay.PenaltyEnforcedAtSideColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsValidatedAgainstNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.ValidatedAgainstColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetValidatedAgainstNull()
            {
                this[this.tableParsedPlayByPlay.ValidatedAgainstColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsValidatedNull()
            {
                return this.IsNull(this.tableParsedPlayByPlay.IsValidatedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsValidatedNull()
            {
                this[this.tableParsedPlayByPlay.IsValidatedColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class StatsRowChangeEvent : global::System.EventArgs
        {

            private StatsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StatsRowChangeEvent(StatsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StatsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class InjuredReserveRowChangeEvent : global::System.EventArgs
        {

            private InjuredReserveRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuredReserveRowChangeEvent(InjuredReserveRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuredReserveRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class InjuryReportRowChangeEvent : global::System.EventArgs
        {

            private InjuryReportRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuryReportRowChangeEvent(InjuryReportRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InjuryReportRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CityIslandRosterSpotsRowChangeEvent : global::System.EventArgs
        {

            private CityIslandRosterSpotsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandRosterSpotsRowChangeEvent(CityIslandRosterSpotsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandRosterSpotsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CityIslandTeamsRowChangeEvent : global::System.EventArgs
        {

            private CityIslandTeamsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandTeamsRowChangeEvent(CityIslandTeamsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityIslandTeamsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ScheduleRowChangeEvent : global::System.EventArgs
        {

            private ScheduleRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ScheduleRowChangeEvent(ScheduleRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ScheduleRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PlayByPlayRowChangeEvent : global::System.EventArgs
        {

            private PlayByPlayRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlayByPlayRowChangeEvent(PlayByPlayRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlayByPlayRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ParsedPlayByPlayRowChangeEvent : global::System.EventArgs
        {

            private ParsedPlayByPlayRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParsedPlayByPlayRowChangeEvent(ParsedPlayByPlayRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParsedPlayByPlayRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace FFToiletBowl.FFToiletBowlDataSetTableAdapters
{


    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StatsTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlTransaction _transaction;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public StatsTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.DeleteCommand != null)))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.InsertCommand != null)))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.UpdateCommand != null)))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Stats";
            tableMapping.ColumnMappings.Add("PlayerID", "PlayerID");
            tableMapping.ColumnMappings.Add("Player", "Player");
            tableMapping.ColumnMappings.Add("Pos", "Pos");
            tableMapping.ColumnMappings.Add("Team", "Team");
            tableMapping.ColumnMappings.Add("Year", "Year");
            tableMapping.ColumnMappings.Add("Gm", "Gm");
            tableMapping.ColumnMappings.Add("PaComp", "PaComp");
            tableMapping.ColumnMappings.Add("PaAtt", "PaAtt");
            tableMapping.ColumnMappings.Add("PaYd", "PaYd");
            tableMapping.ColumnMappings.Add("PaTD", "PaTD");
            tableMapping.ColumnMappings.Add("PaINT", "PaINT");
            tableMapping.ColumnMappings.Add("RuAtt", "RuAtt");
            tableMapping.ColumnMappings.Add("RuYd", "RuYd");
            tableMapping.ColumnMappings.Add("RuTD", "RuTD");
            tableMapping.ColumnMappings.Add("ReTgt", "ReTgt");
            tableMapping.ColumnMappings.Add("ReRec", "ReRec");
            tableMapping.ColumnMappings.Add("ReYd", "ReYd");
            tableMapping.ColumnMappings.Add("ReTD", "ReTD");
            tableMapping.ColumnMappings.Add("KiFGM", "KiFGM");
            tableMapping.ColumnMappings.Add("KiFGA", "KiFGA");
            tableMapping.ColumnMappings.Add("KiFGP", "KiFGP");
            tableMapping.ColumnMappings.Add("KiEPM", "KiEPM");
            tableMapping.ColumnMappings.Add("KiEPA", "KiEPA");
            tableMapping.ColumnMappings.Add("DSack", "DSack");
            tableMapping.ColumnMappings.Add("DFR", "DFR");
            tableMapping.ColumnMappings.Add("DINT", "DINT");
            tableMapping.ColumnMappings.Add("DTD", "DTD");
            tableMapping.ColumnMappings.Add("DPA", "DPA");
            tableMapping.ColumnMappings.Add("DPaYd", "DPaYd");
            tableMapping.ColumnMappings.Add("DRuYd", "DRuYd");
            tableMapping.ColumnMappings.Add("DSafety", "DSafety");
            tableMapping.ColumnMappings.Add("DKickTD", "DKickTD");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Stats] ([PlayerID], [Player], [Pos], [Team], [Year], [Gm], [PaComp], [PaAtt], [PaYd], [PaTD], [PaINT], [RuAtt], [RuYd], [RuTD], [ReTgt], [ReRec], [ReYd], [ReTD], [KiFGM], [KiFGA], [KiFGP], [KiEPM], [KiEPA], [DSack], [DFR], [DINT], [DTD], [DPA], [DPaYd], [DRuYd], [DSafety], [DKickTD]) VALUES (@PlayerID, @Player, @Pos, @Team, @Year, @Gm, @PaComp, @PaAtt, @PaYd, @PaTD, @PaINT, @RuAtt, @RuYd, @RuTD, @ReTgt, @ReRec, @ReYd, @ReTD, @KiFGM, @KiFGA, @KiFGP, @KiEPM, @KiEPA, @DSack, @DFR, @DINT, @DTD, @DPA, @DPaYd, @DRuYd, @DSafety, @DKickTD)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PlayerID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Player", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Player", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pos", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pos", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Team", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gm", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaComp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaComp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaAtt", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaAtt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaYd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaYd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaTD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaTD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaINT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaINT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RuAtt", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RuAtt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RuYd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RuYd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RuTD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RuTD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReTgt", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReTgt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReRec", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReRec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReYd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReYd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReTD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReTD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KiFGM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KiFGM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KiFGA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KiFGA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KiFGP", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 5, 2, "KiFGP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KiEPM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KiEPM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KiEPA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KiEPA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DSack", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DSack", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DFR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DFR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DINT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DINT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DTD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DTD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DPA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DPA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DPaYd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DPaYd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DRuYd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DRuYd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DSafety", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DSafety", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DKickTD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DKickTD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FFToiletBowl.Properties.Settings.Default.FFToiletBowlConnectionString1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PlayerID, Player, Pos, Team, Year, Gm, PaComp, PaAtt, PaYd, PaTD, PaINT, R" +
                "uAtt, RuYd, RuTD, ReTgt, ReRec, ReYd, ReTD, KiFGM, KiFGA, KiFGP, KiEPM, KiEPA, D" +
                "Sack, DFR, DINT, DTD, DPA, DPaYd, DRuYd, DSafety, DKickTD FROM dbo.Stats";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ClearStats";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "select COUNT(0) \r\nfrom dbo.Stats\r\nwhere Year=@Year\r\nand Gm=@Week\r\n";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Week", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Gm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.CreateReports";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "DELETE\r\nFROM dbo.Stats\r\nWHERE Year=@Year\r\nand Gm=@Week";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Week", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Gm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = @"INSERT INTO [dbo].[Stats] ([PlayerID], [Player], [Pos], [Team], [Year], [Gm], [PaComp], [PaAtt], [PaYd], [PaTD], [PaINT], [RuAtt], [RuYd], [RuTD], [ReTgt], [ReRec], [ReYd], [ReTD], [KiFGM], [KiFGA], [KiFGP], [KiEPM], [KiEPA], [DSack], [DFR], [DINT], [DTD], [DPA], [DPaYd], [DRuYd], [DSafety], [DKickTD]) VALUES (@PlayerID, @Player, @Pos, @Team, @Year, @Gm, @PaComp, @PaAtt, @PaYd, @PaTD, @PaINT, @RuAtt, @RuYd, @RuTD, @ReTgt, @ReRec, @ReYd, @ReTD, @KiFGM, @KiFGA, @KiFGP, @KiEPM, @KiEPA, @DSack, @DFR, @DINT, @DTD, @DPA, @DPaYd, @DRuYd, @DSafety, @DKickTD)";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PlayerID", global::System.Data.SqlDbType.VarChar, 150, global::System.Data.ParameterDirection.Input, 0, 0, "PlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Player", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, "Player", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pos", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Pos", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Team", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gm", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Gm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaComp", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PaComp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaAtt", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PaAtt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaYd", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PaYd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaTD", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PaTD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaINT", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PaINT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RuAtt", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RuAtt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RuYd", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RuYd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RuTD", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RuTD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReTgt", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ReTgt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReRec", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ReRec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReYd", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ReYd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReTD", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ReTD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KiFGM", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "KiFGM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KiFGA", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "KiFGA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KiFGP", global::System.Data.SqlDbType.Decimal, 5, global::System.Data.ParameterDirection.Input, 5, 2, "KiFGP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KiEPM", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "KiEPM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KiEPA", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "KiEPA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DSack", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "DSack", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DFR", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "DFR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DINT", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "DINT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DTD", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "DTD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DPA", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "DPA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DPaYd", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "DPaYd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DRuYd", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "DRuYd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DSafety", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "DSafety", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DKickTD", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "DKickTD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FFToiletBowlDataSet.StatsDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FFToiletBowlDataSet.StatsDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FFToiletBowlDataSet.StatsDataTable dataTable = new FFToiletBowlDataSet.StatsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet.StatsDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "Stats");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string PlayerID,
                    string Player,
                    string Pos,
                    string Team,
                    int Year,
                    int Gm,
                    global::System.Nullable<int> PaComp,
                    global::System.Nullable<int> PaAtt,
                    global::System.Nullable<int> PaYd,
                    global::System.Nullable<int> PaTD,
                    global::System.Nullable<int> PaINT,
                    global::System.Nullable<int> RuAtt,
                    global::System.Nullable<int> RuYd,
                    global::System.Nullable<int> RuTD,
                    global::System.Nullable<int> ReTgt,
                    global::System.Nullable<int> ReRec,
                    global::System.Nullable<int> ReYd,
                    global::System.Nullable<int> ReTD,
                    global::System.Nullable<int> KiFGM,
                    global::System.Nullable<int> KiFGA,
                    global::System.Nullable<decimal> KiFGP,
                    global::System.Nullable<int> KiEPM,
                    global::System.Nullable<int> KiEPA,
                    global::System.Nullable<int> DSack,
                    global::System.Nullable<int> DFR,
                    global::System.Nullable<int> DINT,
                    global::System.Nullable<int> DTD,
                    global::System.Nullable<int> DPA,
                    global::System.Nullable<int> DPaYd,
                    global::System.Nullable<int> DRuYd,
                    global::System.Nullable<int> DSafety,
                    global::System.Nullable<int> DKickTD)
        {
            if ((PlayerID == null))
            {
                throw new global::System.ArgumentNullException("PlayerID");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PlayerID));
            }
            if ((Player == null))
            {
                throw new global::System.ArgumentNullException("Player");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Player));
            }
            if ((Pos == null))
            {
                throw new global::System.ArgumentNullException("Pos");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Pos));
            }
            if ((Team == null))
            {
                throw new global::System.ArgumentNullException("Team");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Team));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Year));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Gm));
            if ((PaComp.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(PaComp.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((PaAtt.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(PaAtt.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((PaYd.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(PaYd.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((PaTD.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(PaTD.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((PaINT.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(PaINT.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((RuAtt.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(RuAtt.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((RuYd.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(RuYd.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((RuTD.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(RuTD.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ReTgt.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(ReTgt.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((ReRec.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(ReRec.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((ReYd.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(ReYd.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((ReTD.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(ReTD.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((KiFGM.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[18].Value = ((int)(KiFGM.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((KiFGA.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[19].Value = ((int)(KiFGA.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((KiFGP.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[20].Value = ((decimal)(KiFGP.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((KiEPM.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[21].Value = ((int)(KiEPM.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((KiEPA.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[22].Value = ((int)(KiEPA.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((DSack.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[23].Value = ((int)(DSack.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((DFR.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(DFR.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((DINT.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[25].Value = ((int)(DINT.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((DTD.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[26].Value = ((int)(DTD.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((DPA.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[27].Value = ((int)(DPA.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((DPaYd.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[28].Value = ((int)(DPaYd.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((DRuYd.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[29].Value = ((int)(DRuYd.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((DSafety.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[30].Value = ((int)(DSafety.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((DKickTD.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[31].Value = ((int)(DKickTD.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ClearStats()
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<int> CountStatsFor(int Year, int Week)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((int)(Year));
            command.Parameters[1].Value = ((int)(Week));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            object returnValue;
            try
            {
                returnValue = command.ExecuteScalar();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null)
                        || (returnValue.GetType() == typeof(global::System.DBNull))))
            {
                return new global::System.Nullable<int>();
            }
            else
            {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int CreateReports()
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteByWeek(int Year, int Week)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            command.Parameters[0].Value = ((int)(Year));
            command.Parameters[1].Value = ((int)(Week));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(
                    string PlayerID,
                    string Player,
                    string Pos,
                    string Team,
                    int Year,
                    int Gm,
                    global::System.Nullable<int> PaComp,
                    global::System.Nullable<int> PaAtt,
                    global::System.Nullable<int> PaYd,
                    global::System.Nullable<int> PaTD,
                    global::System.Nullable<int> PaINT,
                    global::System.Nullable<int> RuAtt,
                    global::System.Nullable<int> RuYd,
                    global::System.Nullable<int> RuTD,
                    global::System.Nullable<int> ReTgt,
                    global::System.Nullable<int> ReRec,
                    global::System.Nullable<int> ReYd,
                    global::System.Nullable<int> ReTD,
                    global::System.Nullable<int> KiFGM,
                    global::System.Nullable<int> KiFGA,
                    global::System.Nullable<decimal> KiFGP,
                    global::System.Nullable<int> KiEPM,
                    global::System.Nullable<int> KiEPA,
                    global::System.Nullable<int> DSack,
                    global::System.Nullable<int> DFR,
                    global::System.Nullable<int> DINT,
                    global::System.Nullable<int> DTD,
                    global::System.Nullable<int> DPA,
                    global::System.Nullable<int> DPaYd,
                    global::System.Nullable<int> DRuYd,
                    global::System.Nullable<int> DSafety,
                    global::System.Nullable<int> DKickTD)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((PlayerID == null))
            {
                throw new global::System.ArgumentNullException("PlayerID");
            }
            else
            {
                command.Parameters[0].Value = ((string)(PlayerID));
            }
            if ((Player == null))
            {
                throw new global::System.ArgumentNullException("Player");
            }
            else
            {
                command.Parameters[1].Value = ((string)(Player));
            }
            if ((Pos == null))
            {
                throw new global::System.ArgumentNullException("Pos");
            }
            else
            {
                command.Parameters[2].Value = ((string)(Pos));
            }
            if ((Team == null))
            {
                throw new global::System.ArgumentNullException("Team");
            }
            else
            {
                command.Parameters[3].Value = ((string)(Team));
            }
            command.Parameters[4].Value = ((int)(Year));
            command.Parameters[5].Value = ((int)(Gm));
            if ((PaComp.HasValue == true))
            {
                command.Parameters[6].Value = ((int)(PaComp.Value));
            }
            else
            {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((PaAtt.HasValue == true))
            {
                command.Parameters[7].Value = ((int)(PaAtt.Value));
            }
            else
            {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((PaYd.HasValue == true))
            {
                command.Parameters[8].Value = ((int)(PaYd.Value));
            }
            else
            {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((PaTD.HasValue == true))
            {
                command.Parameters[9].Value = ((int)(PaTD.Value));
            }
            else
            {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((PaINT.HasValue == true))
            {
                command.Parameters[10].Value = ((int)(PaINT.Value));
            }
            else
            {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((RuAtt.HasValue == true))
            {
                command.Parameters[11].Value = ((int)(RuAtt.Value));
            }
            else
            {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((RuYd.HasValue == true))
            {
                command.Parameters[12].Value = ((int)(RuYd.Value));
            }
            else
            {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((RuTD.HasValue == true))
            {
                command.Parameters[13].Value = ((int)(RuTD.Value));
            }
            else
            {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ReTgt.HasValue == true))
            {
                command.Parameters[14].Value = ((int)(ReTgt.Value));
            }
            else
            {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((ReRec.HasValue == true))
            {
                command.Parameters[15].Value = ((int)(ReRec.Value));
            }
            else
            {
                command.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((ReYd.HasValue == true))
            {
                command.Parameters[16].Value = ((int)(ReYd.Value));
            }
            else
            {
                command.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((ReTD.HasValue == true))
            {
                command.Parameters[17].Value = ((int)(ReTD.Value));
            }
            else
            {
                command.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((KiFGM.HasValue == true))
            {
                command.Parameters[18].Value = ((int)(KiFGM.Value));
            }
            else
            {
                command.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((KiFGA.HasValue == true))
            {
                command.Parameters[19].Value = ((int)(KiFGA.Value));
            }
            else
            {
                command.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((KiFGP.HasValue == true))
            {
                command.Parameters[20].Value = ((decimal)(KiFGP.Value));
            }
            else
            {
                command.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((KiEPM.HasValue == true))
            {
                command.Parameters[21].Value = ((int)(KiEPM.Value));
            }
            else
            {
                command.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((KiEPA.HasValue == true))
            {
                command.Parameters[22].Value = ((int)(KiEPA.Value));
            }
            else
            {
                command.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((DSack.HasValue == true))
            {
                command.Parameters[23].Value = ((int)(DSack.Value));
            }
            else
            {
                command.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((DFR.HasValue == true))
            {
                command.Parameters[24].Value = ((int)(DFR.Value));
            }
            else
            {
                command.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((DINT.HasValue == true))
            {
                command.Parameters[25].Value = ((int)(DINT.Value));
            }
            else
            {
                command.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((DTD.HasValue == true))
            {
                command.Parameters[26].Value = ((int)(DTD.Value));
            }
            else
            {
                command.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((DPA.HasValue == true))
            {
                command.Parameters[27].Value = ((int)(DPA.Value));
            }
            else
            {
                command.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((DPaYd.HasValue == true))
            {
                command.Parameters[28].Value = ((int)(DPaYd.Value));
            }
            else
            {
                command.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((DRuYd.HasValue == true))
            {
                command.Parameters[29].Value = ((int)(DRuYd.Value));
            }
            else
            {
                command.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((DSafety.HasValue == true))
            {
                command.Parameters[30].Value = ((int)(DSafety.Value));
            }
            else
            {
                command.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((DKickTD.HasValue == true))
            {
                command.Parameters[31].Value = ((int)(DKickTD.Value));
            }
            else
            {
                command.Parameters[31].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InjuredReserveTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlTransaction _transaction;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public InjuredReserveTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.DeleteCommand != null)))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.InsertCommand != null)))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.UpdateCommand != null)))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InjuredReserve";
            tableMapping.ColumnMappings.Add("InjuredID", "InjuredID");
            tableMapping.ColumnMappings.Add("Gm", "Gm");
            tableMapping.ColumnMappings.Add("Year", "Year");
            tableMapping.ColumnMappings.Add("Player", "Player");
            tableMapping.ColumnMappings.Add("Pos", "Pos");
            tableMapping.ColumnMappings.Add("Team", "Team");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("StatsPlayerID", "StatsPlayerID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[InjuredReserve] ([InjuredID], [Gm], [Year], [Player], [Pos], [" +
                "Team], [Status], [StatsPlayerID]) VALUES (@InjuredID, @Gm, @Year, @Player, @Pos," +
                " @Team, @Status, @StatsPlayerID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InjuredID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InjuredID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gm", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Player", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Player", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pos", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pos", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Team", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StatsPlayerID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StatsPlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FFToiletBowl.Properties.Settings.Default.FFToiletBowlConnectionString1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT InjuredID, Gm, Year, Player, Pos, Team, Status, StatsPlayerID FROM dbo.Inj" +
                "uredReserve";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ClearInjuredReserve";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "DELETE\r\nFROM dbo.InjuredReserve\r\nWHERE Gm=@gm\r\nAND Year=@year";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gm", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Gm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "INSERT INTO [dbo].[InjuredReserve] ([InjuredID], [Gm], [Year], [Player], [Pos], [" +
                "Team], [Status], [StatsPlayerID]) VALUES (@InjuredID, @Gm, @Year, @Player, @Pos," +
                " @Team, @Status, @StatsPlayerID)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InjuredID", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, "InjuredID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gm", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Gm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Player", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, "Player", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pos", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Pos", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Team", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 30, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StatsPlayerID", global::System.Data.SqlDbType.VarChar, 150, global::System.Data.ParameterDirection.Input, 0, 0, "StatsPlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FFToiletBowlDataSet.InjuredReserveDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FFToiletBowlDataSet.InjuredReserveDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FFToiletBowlDataSet.InjuredReserveDataTable dataTable = new FFToiletBowlDataSet.InjuredReserveDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet.InjuredReserveDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "InjuredReserve");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string InjuredID, int Gm, int Year, string Player, string Pos, string Team, string Status, string StatsPlayerID)
        {
            if ((InjuredID == null))
            {
                throw new global::System.ArgumentNullException("InjuredID");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(InjuredID));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Gm));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Year));
            if ((Player == null))
            {
                throw new global::System.ArgumentNullException("Player");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Player));
            }
            if ((Pos == null))
            {
                throw new global::System.ArgumentNullException("Pos");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Pos));
            }
            if ((Team == null))
            {
                throw new global::System.ArgumentNullException("Team");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Team));
            }
            if ((Status == null))
            {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Status));
            }
            if ((StatsPlayerID == null))
            {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(StatsPlayerID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ClearInjuredReserve()
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteByWeek(int gm, int year)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((int)(gm));
            command.Parameters[1].Value = ((int)(year));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string InjuredID, int Gm, int Year, string Player, string Pos, string Team, string Status, string StatsPlayerID)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((InjuredID == null))
            {
                throw new global::System.ArgumentNullException("InjuredID");
            }
            else
            {
                command.Parameters[0].Value = ((string)(InjuredID));
            }
            command.Parameters[1].Value = ((int)(Gm));
            command.Parameters[2].Value = ((int)(Year));
            if ((Player == null))
            {
                throw new global::System.ArgumentNullException("Player");
            }
            else
            {
                command.Parameters[3].Value = ((string)(Player));
            }
            if ((Pos == null))
            {
                throw new global::System.ArgumentNullException("Pos");
            }
            else
            {
                command.Parameters[4].Value = ((string)(Pos));
            }
            if ((Team == null))
            {
                throw new global::System.ArgumentNullException("Team");
            }
            else
            {
                command.Parameters[5].Value = ((string)(Team));
            }
            if ((Status == null))
            {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[6].Value = ((string)(Status));
            }
            if ((StatsPlayerID == null))
            {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[7].Value = ((string)(StatsPlayerID));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InjuryReportTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlTransaction _transaction;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public InjuryReportTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.DeleteCommand != null)))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.InsertCommand != null)))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.UpdateCommand != null)))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InjuryReport";
            tableMapping.ColumnMappings.Add("Player", "Player");
            tableMapping.ColumnMappings.Add("Pos", "Pos");
            tableMapping.ColumnMappings.Add("EspnPlayerURL", "EspnPlayerURL");
            tableMapping.ColumnMappings.Add("EspnPlayerID", "EspnPlayerID");
            tableMapping.ColumnMappings.Add("EspnTeam", "EspnTeam");
            tableMapping.ColumnMappings.Add("Team", "Team");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("ReportDate", "ReportDate");
            tableMapping.ColumnMappings.Add("LoadDate", "LoadDate");
            tableMapping.ColumnMappings.Add("LoadID", "LoadID");
            tableMapping.ColumnMappings.Add("StatsPlayerID", "StatsPlayerID");
            tableMapping.ColumnMappings.Add("Year", "Year");
            tableMapping.ColumnMappings.Add("Gm", "Gm");
            tableMapping.ColumnMappings.Add("Injury", "Injury");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("Source", "Source");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [InjuryReport] ([Year], [Gm], [Player], [Pos], [EspnPlayerURL], [EspnPlayerID], [EspnTeam], [Team], [Injury], [Status], [Notes], [ReportDate], [Source], [LoadDate], [LoadID], [StatsPlayerID]) VALUES (@Year, @Gm, @Player, @Pos, @EspnPlayerURL, @EspnPlayerID, @EspnTeam, @Team, @Injury, @Status, @Notes, @ReportDate, @Source, @LoadDate, @LoadID, @StatsPlayerID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gm", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Player", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Player", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pos", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pos", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EspnPlayerURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EspnPlayerURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EspnPlayerID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EspnPlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EspnTeam", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EspnTeam", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Team", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Injury", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Injury", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReportDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoadID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StatsPlayerID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StatsPlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FFToiletBowl.Properties.Settings.Default.FFToiletBowlConnectionString1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Year,Gm,Player, Pos, EspnPlayerURL, EspnPlayerID, EspnTeam, Team, Injury,S" +
                "tatus,Notes, ReportDate, Source,LoadDate, LoadID,StatsPlayerID FROM InjuryReport" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ClearInjuredReport";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "DELETE FROM [InjuryReport] WHERE EspnPlayerURL=@PlayerID AND Year=@Year AND Gm=@g" +
                "m";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PlayerID", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "EspnPlayerURL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gm", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Gm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"INSERT INTO InjuryReport
             (Year, Gm, Player, Pos, EspnPlayerURL, EspnPlayerID, EspnTeam, Team, Injury, Status, Notes, Source, ReportDate, LoadDate, LoadID, StatsPlayerID)
VALUES (@Year,@Gm,@Player,@Pos,@EspnPlayerURL,@EspnPlayerID,@EspnTeam,@Team,@Injury,@Status,@Notes,@Source,@ReportDate,@LoadDate,@LoadID,@StatsPlayerID)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gm", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Gm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Player", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Player", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pos", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Pos", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EspnPlayerURL", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "EspnPlayerURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EspnPlayerID", global::System.Data.SqlDbType.VarChar, 150, global::System.Data.ParameterDirection.Input, 0, 0, "EspnPlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EspnTeam", global::System.Data.SqlDbType.VarChar, 30, global::System.Data.ParameterDirection.Input, 0, 0, "EspnTeam", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Team", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Injury", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "Injury", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Notes", global::System.Data.SqlDbType.VarChar, 80, global::System.Data.ParameterDirection.Input, 0, 0, "Notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "Source", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReportDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ReportDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "LoadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "LoadID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StatsPlayerID", global::System.Data.SqlDbType.VarChar, 150, global::System.Data.ParameterDirection.Input, 0, 0, "StatsPlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FFToiletBowlDataSet.InjuryReportDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FFToiletBowlDataSet.InjuryReportDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FFToiletBowlDataSet.InjuryReportDataTable dataTable = new FFToiletBowlDataSet.InjuryReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet.InjuryReportDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "InjuryReport");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ClearInjuredReport()
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(string PlayerID, int Year, int gm)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((PlayerID == null))
            {
                throw new global::System.ArgumentNullException("PlayerID");
            }
            else
            {
                command.Parameters[0].Value = ((string)(PlayerID));
            }
            command.Parameters[1].Value = ((int)(Year));
            command.Parameters[2].Value = ((int)(gm));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(
                    int Year,
                    int Gm,
                    string Player,
                    string Pos,
                    string EspnPlayerURL,
                    string EspnPlayerID,
                    string EspnTeam,
                    string Team,
                    string Injury,
                    string Status,
                    string Notes,
                    string Source,
                    System.DateTime ReportDate,
                    global::System.Nullable<global::System.DateTime> LoadDate,
                    string LoadID,
                    string StatsPlayerID)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            command.Parameters[0].Value = ((int)(Year));
            command.Parameters[1].Value = ((int)(Gm));
            if ((Player == null))
            {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[2].Value = ((string)(Player));
            }
            if ((Pos == null))
            {
                throw new global::System.ArgumentNullException("Pos");
            }
            else
            {
                command.Parameters[3].Value = ((string)(Pos));
            }
            if ((EspnPlayerURL == null))
            {
                throw new global::System.ArgumentNullException("EspnPlayerURL");
            }
            else
            {
                command.Parameters[4].Value = ((string)(EspnPlayerURL));
            }
            if ((EspnPlayerID == null))
            {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[5].Value = ((string)(EspnPlayerID));
            }
            if ((EspnTeam == null))
            {
                throw new global::System.ArgumentNullException("EspnTeam");
            }
            else
            {
                command.Parameters[6].Value = ((string)(EspnTeam));
            }
            if ((Team == null))
            {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[7].Value = ((string)(Team));
            }
            if ((Injury == null))
            {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[8].Value = ((string)(Injury));
            }
            if ((Status == null))
            {
                throw new global::System.ArgumentNullException("Status");
            }
            else
            {
                command.Parameters[9].Value = ((string)(Status));
            }
            if ((Notes == null))
            {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[10].Value = ((string)(Notes));
            }
            if ((Source == null))
            {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[11].Value = ((string)(Source));
            }
            command.Parameters[12].Value = ((System.DateTime)(ReportDate));
            if ((LoadDate.HasValue == true))
            {
                command.Parameters[13].Value = ((System.DateTime)(LoadDate.Value));
            }
            else
            {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((LoadID == null))
            {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[14].Value = ((string)(LoadID));
            }
            if ((StatsPlayerID == null))
            {
                command.Parameters[15].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[15].Value = ((string)(StatsPlayerID));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CityIslandRosterSpotsTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlTransaction _transaction;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CityIslandRosterSpotsTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.DeleteCommand != null)))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.InsertCommand != null)))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.UpdateCommand != null)))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CityIslandRosterSpots";
            tableMapping.ColumnMappings.Add("Pos", "Pos");
            tableMapping.ColumnMappings.Add("Slot", "Slot");
            tableMapping.ColumnMappings.Add("Starter", "Starter");
            tableMapping.ColumnMappings.Add("EspnPlayerID", "EspnPlayerID");
            tableMapping.ColumnMappings.Add("StatsPlayerID", "StatsPlayerID");
            tableMapping.ColumnMappings.Add("Player", "Player");
            tableMapping.ColumnMappings.Add("NflTeam", "NflTeam");
            tableMapping.ColumnMappings.Add("LoadDate", "LoadDate");
            tableMapping.ColumnMappings.Add("LoadID", "LoadID");
            tableMapping.ColumnMappings.Add("TeamID", "TeamID");
            tableMapping.ColumnMappings.Add("RosterSlot", "RosterSlot");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CityIslandRosterSpots] ([Pos], [Slot], [Starter], [EspnPlayerID], [StatsPlayerID], [Player], [NflTeam], [LoadDate], [LoadID], [TeamID], [RosterSlot]) VALUES (@Pos, @Slot, @Starter, @EspnPlayerID, @StatsPlayerID, @Player, @NflTeam, @LoadDate, @LoadID, @TeamID, @RosterSlot)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pos", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pos", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Slot", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Slot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Starter", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Starter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EspnPlayerID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EspnPlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StatsPlayerID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StatsPlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Player", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Player", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NflTeam", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NflTeam", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoadID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TeamID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TeamID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RosterSlot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RosterSlot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FFToiletBowl.Properties.Settings.Default.FFToiletBowlConnectionString1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Pos, Slot, Starter, EspnPlayerID, StatsPlayerID, Player, NflTeam, LoadDate" +
                ", LoadID, TeamID, RosterSlot FROM dbo.CityIslandRosterSpots";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"INSERT INTO [dbo].[CityIslandRosterSpots] ([Pos], [Slot], [Starter], [EspnPlayerID], [StatsPlayerID], [Player], [NflTeam], [LoadDate], [LoadID], [TeamID], [RosterSlot]) VALUES (@Pos, @Slot, @Starter, @EspnPlayerID, @StatsPlayerID, @Player, @NflTeam, @LoadDate, @LoadID, @TeamID, @RosterSlot)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pos", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Pos", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Slot", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Slot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Starter", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "Starter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EspnPlayerID", global::System.Data.SqlDbType.VarChar, 150, global::System.Data.ParameterDirection.Input, 0, 0, "EspnPlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StatsPlayerID", global::System.Data.SqlDbType.VarChar, 150, global::System.Data.ParameterDirection.Input, 0, 0, "StatsPlayerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Player", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Player", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NflTeam", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "NflTeam", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "LoadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "LoadID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TeamID", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "TeamID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RosterSlot", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "RosterSlot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FFToiletBowlDataSet.CityIslandRosterSpotsDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FFToiletBowlDataSet.CityIslandRosterSpotsDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FFToiletBowlDataSet.CityIslandRosterSpotsDataTable dataTable = new FFToiletBowlDataSet.CityIslandRosterSpotsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet.CityIslandRosterSpotsDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "CityIslandRosterSpots");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Pos, int Slot, bool Starter, string EspnPlayerID, string StatsPlayerID, string Player, string NflTeam, global::System.Nullable<global::System.DateTime> LoadDate, string LoadID, string TeamID, string RosterSlot)
        {
            if ((Pos == null))
            {
                throw new global::System.ArgumentNullException("Pos");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Pos));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Slot));
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(Starter));
            if ((EspnPlayerID == null))
            {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(EspnPlayerID));
            }
            if ((StatsPlayerID == null))
            {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(StatsPlayerID));
            }
            if ((Player == null))
            {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Player));
            }
            if ((NflTeam == null))
            {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(NflTeam));
            }
            if ((LoadDate.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(LoadDate.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((LoadID == null))
            {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(LoadID));
            }
            if ((TeamID == null))
            {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(TeamID));
            }
            if ((RosterSlot == null))
            {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(RosterSlot));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string Pos, int Slot, bool Starter, string EspnPlayerID, string StatsPlayerID, string Player, string NflTeam, global::System.Nullable<global::System.DateTime> LoadDate, string LoadID, string TeamID, string RosterSlot)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Pos == null))
            {
                throw new global::System.ArgumentNullException("Pos");
            }
            else
            {
                command.Parameters[0].Value = ((string)(Pos));
            }
            command.Parameters[1].Value = ((int)(Slot));
            command.Parameters[2].Value = ((bool)(Starter));
            if ((EspnPlayerID == null))
            {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[3].Value = ((string)(EspnPlayerID));
            }
            if ((StatsPlayerID == null))
            {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[4].Value = ((string)(StatsPlayerID));
            }
            if ((Player == null))
            {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[5].Value = ((string)(Player));
            }
            if ((NflTeam == null))
            {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[6].Value = ((string)(NflTeam));
            }
            if ((LoadDate.HasValue == true))
            {
                command.Parameters[7].Value = ((System.DateTime)(LoadDate.Value));
            }
            else
            {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((LoadID == null))
            {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[8].Value = ((string)(LoadID));
            }
            if ((TeamID == null))
            {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[9].Value = ((string)(TeamID));
            }
            if ((RosterSlot == null))
            {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[10].Value = ((string)(RosterSlot));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CityIslandTeamsTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlTransaction _transaction;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CityIslandTeamsTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.DeleteCommand != null)))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.InsertCommand != null)))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.UpdateCommand != null)))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CityIslandTeams";
            tableMapping.ColumnMappings.Add("TeamName", "TeamName");
            tableMapping.ColumnMappings.Add("Alias", "Alias");
            tableMapping.ColumnMappings.Add("Num", "Num");
            tableMapping.ColumnMappings.Add("TeamID", "TeamID");
            tableMapping.ColumnMappings.Add("Wins", "Wins");
            tableMapping.ColumnMappings.Add("Losses", "Losses");
            tableMapping.ColumnMappings.Add("Ties", "Ties");
            tableMapping.ColumnMappings.Add("LoadDate", "LoadDate");
            tableMapping.ColumnMappings.Add("LoadID", "LoadID");
            tableMapping.ColumnMappings.Add("TargetGm", "TargetGm");
            tableMapping.ColumnMappings.Add("GmVersus", "GmVersus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CityIslandTeams] ([TeamName], [Alias], [Num], [TeamID], [Wins]" +
                ", [Losses], [Ties], [LoadDate], [LoadID], [TargetGm], [GmVersus]) VALUES (@TeamN" +
                "ame, @Alias, @Num, @TeamID, @Wins, @Losses, @Ties, @LoadDate, @LoadID, @TargetGm" +
                ", @GmVersus)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TeamName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TeamName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Alias", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Alias", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Num", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Num", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TeamID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TeamID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Wins", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Wins", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Losses", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Losses", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ties", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ties", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoadID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TargetGm", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetGm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GmVersus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GmVersus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FFToiletBowl.Properties.Settings.Default.FFToiletBowlConnectionString1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TeamName, Alias, Num, TeamID, Wins, Losses, Ties, LoadDate, LoadID, Target" +
                "Gm, GmVersus FROM dbo.CityIslandTeams";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ClearCityIslandRoster";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [dbo].[CityIslandTeams] ([TeamName], [Alias], [Num], [TeamID], [Wins]" +
                ", [Losses], [Ties], [LoadDate], [LoadID], [TargetGm], [GmVersus]) VALUES (@TeamN" +
                "ame, @Alias, @Num, @TeamID, @Wins, @Losses, @Ties, @LoadDate, @LoadID, @TargetGm" +
                ", @GmVersus)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TeamName", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "TeamName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Alias", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Alias", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Num", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Num", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TeamID", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "TeamID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Wins", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Wins", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Losses", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Losses", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ties", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Ties", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "LoadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadID", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "LoadID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TargetGm", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TargetGm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GmVersus", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "GmVersus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FFToiletBowlDataSet.CityIslandTeamsDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FFToiletBowlDataSet.CityIslandTeamsDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FFToiletBowlDataSet.CityIslandTeamsDataTable dataTable = new FFToiletBowlDataSet.CityIslandTeamsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet.CityIslandTeamsDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "CityIslandTeams");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TeamName, string Alias, int Num, string TeamID, global::System.Nullable<int> Wins, global::System.Nullable<int> Losses, global::System.Nullable<int> Ties, global::System.Nullable<global::System.DateTime> LoadDate, string LoadID, global::System.Nullable<int> TargetGm, string GmVersus)
        {
            if ((TeamName == null))
            {
                throw new global::System.ArgumentNullException("TeamName");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TeamName));
            }
            if ((Alias == null))
            {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Alias));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Num));
            if ((TeamID == null))
            {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TeamID));
            }
            if ((Wins.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Wins.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Losses.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Losses.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Ties.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Ties.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((LoadDate.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(LoadDate.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((LoadID == null))
            {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(LoadID));
            }
            if ((TargetGm.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(TargetGm.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((GmVersus == null))
            {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(GmVersus));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ClearCityIslandRoster()
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string TeamName, string Alias, int Num, string TeamID, global::System.Nullable<int> Wins, global::System.Nullable<int> Losses, global::System.Nullable<int> Ties, global::System.Nullable<global::System.DateTime> LoadDate, string LoadID, global::System.Nullable<int> TargetGm, string GmVersus)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((TeamName == null))
            {
                throw new global::System.ArgumentNullException("TeamName");
            }
            else
            {
                command.Parameters[0].Value = ((string)(TeamName));
            }
            if ((Alias == null))
            {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[1].Value = ((string)(Alias));
            }
            command.Parameters[2].Value = ((int)(Num));
            if ((TeamID == null))
            {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[3].Value = ((string)(TeamID));
            }
            if ((Wins.HasValue == true))
            {
                command.Parameters[4].Value = ((int)(Wins.Value));
            }
            else
            {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Losses.HasValue == true))
            {
                command.Parameters[5].Value = ((int)(Losses.Value));
            }
            else
            {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Ties.HasValue == true))
            {
                command.Parameters[6].Value = ((int)(Ties.Value));
            }
            else
            {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((LoadDate.HasValue == true))
            {
                command.Parameters[7].Value = ((System.DateTime)(LoadDate.Value));
            }
            else
            {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((LoadID == null))
            {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[8].Value = ((string)(LoadID));
            }
            if ((TargetGm.HasValue == true))
            {
                command.Parameters[9].Value = ((int)(TargetGm.Value));
            }
            else
            {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((GmVersus == null))
            {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[10].Value = ((string)(GmVersus));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ScheduleTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlTransaction _transaction;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ScheduleTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.DeleteCommand != null)))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.InsertCommand != null)))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.UpdateCommand != null)))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Schedule";
            tableMapping.ColumnMappings.Add("Year", "Year");
            tableMapping.ColumnMappings.Add("Wk", "Wk");
            tableMapping.ColumnMappings.Add("Team", "Team");
            tableMapping.ColumnMappings.Add("Versus", "Versus");
            tableMapping.ColumnMappings.Add("Away", "Away");
            tableMapping.ColumnMappings.Add("LoadURL", "LoadURL");
            tableMapping.ColumnMappings.Add("LoadDate", "LoadDate");
            tableMapping.ColumnMappings.Add("LoadResult", "LoadResult");
            tableMapping.ColumnMappings.Add("PlayByPlayURL", "PlayByPlayURL");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Schedule] ([Year], [Wk], [Team], [Versus], [Away], [LoadURL], " +
                "[LoadDate], [LoadResult], [PlayByPlayURL]) VALUES (@Year, @Wk, @Team, @Versus, @" +
                "Away, @LoadURL, @LoadDate, @LoadResult, @PlayByPlayURL)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Wk", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Wk", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Team", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Versus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Versus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Away", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Away", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoadURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadResult", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoadResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PlayByPlayURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PlayByPlayURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FFToiletBowl.Properties.Settings.Default.FFToiletBowlConnectionString1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[8];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Year, Wk, Team, Versus, Away, LoadURL, LoadDate, LoadResult, PlayByPlayURL" +
                " FROM dbo.Schedule";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ClearSchedule";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "DELETE\r\nFROM dbo.Schedule\r\nWHERE Year=@Year\r\n";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT Year, Wk, Team, Versus, Away, LoadURL, LoadDate, LoadResult, PlayByPlayURL" +
                " \r\nFROM dbo.Schedule\r\nWHERE PlayByPlayUrl = @PlayByPlayUrl";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PlayByPlayUrl", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "PlayByPlayURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT Away, LoadDate, LoadResult, LoadURL, PlayByPlayURL, Team, Versus, Wk, Year" +
                " FROM Schedule WHERE (Year = @Year)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.GetScheduleCount";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "INSERT INTO [dbo].[Schedule] ([Year], [Wk], [Team], [Versus], [Away], [LoadURL], " +
                "[LoadDate], [LoadResult]) VALUES (@Year, @Wk, @Team, @Versus, @Away, @LoadURL, @" +
                "LoadDate, @LoadResult)";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Wk", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Wk", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Team", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Versus", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Versus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Away", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "Away", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadURL", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "LoadURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "LoadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadResult", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "LoadResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "UPDATE Schedule\r\nSET LoadURL = @LoadURL\r\n     , LoadDate = @LoadDate\r\n     , Load" +
                "Result = @LoadResult\r\n    , PlayByPlayURL = @PlayByPlayURL\r\nWHERE Year=@Year\r\nAN" +
                "D Wk=@Wk\r\nAND Team=@Team\r\nAND Versus=@Versus\r\nAND Away=@Away";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadURL", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "LoadURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "LoadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoadResult", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "LoadResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PlayByPlayURL", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "PlayByPlayURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Wk", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Wk", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Team", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Versus", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Versus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Away", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "Away", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FFToiletBowlDataSet.ScheduleDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FFToiletBowlDataSet.ScheduleDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FFToiletBowlDataSet.ScheduleDataTable dataTable = new FFToiletBowlDataSet.ScheduleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPlayByPlayURL(FFToiletBowlDataSet.ScheduleDataTable dataTable, string PlayByPlayUrl)
        {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((PlayByPlayUrl == null))
            {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(PlayByPlayUrl));
            }
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual FFToiletBowlDataSet.ScheduleDataTable GetDataByPlayByPlayURL(string PlayByPlayUrl)
        {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((PlayByPlayUrl == null))
            {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(PlayByPlayUrl));
            }
            FFToiletBowlDataSet.ScheduleDataTable dataTable = new FFToiletBowlDataSet.ScheduleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByYear(FFToiletBowlDataSet.ScheduleDataTable dataTable, int Year)
        {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Year));
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual FFToiletBowlDataSet.ScheduleDataTable GetDataByYear(int Year)
        {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Year));
            FFToiletBowlDataSet.ScheduleDataTable dataTable = new FFToiletBowlDataSet.ScheduleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet.ScheduleDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "Schedule");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Year, int Wk, string Team, string Versus, global::System.Nullable<bool> Away, string LoadURL, global::System.Nullable<global::System.DateTime> LoadDate, string LoadResult, string PlayByPlayURL)
        {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Year));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Wk));
            if ((Team == null))
            {
                throw new global::System.ArgumentNullException("Team");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Team));
            }
            if ((Versus == null))
            {
                throw new global::System.ArgumentNullException("Versus");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Versus));
            }
            if ((Away.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(Away.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((LoadURL == null))
            {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(LoadURL));
            }
            if ((LoadDate.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(LoadDate.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((LoadResult == null))
            {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(LoadResult));
            }
            if ((PlayByPlayURL == null))
            {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(PlayByPlayURL));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ClearSchedule()
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteSeason(int Year)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((int)(Year));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetScheduleCount(global::System.Nullable<int> year)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((year.HasValue == true))
            {
                command.Parameters[1].Value = ((int)(year.Value));
            }
            else
            {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            object returnValue;
            try
            {
                returnValue = command.ExecuteScalar();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null)
                        || (returnValue.GetType() == typeof(global::System.DBNull))))
            {
                return null;
            }
            else
            {
                return ((object)(returnValue));
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(int Year, int Wk, string Team, string Versus, global::System.Nullable<bool> Away, string LoadURL, global::System.Nullable<global::System.DateTime> LoadDate, string LoadResult)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            command.Parameters[0].Value = ((int)(Year));
            command.Parameters[1].Value = ((int)(Wk));
            if ((Team == null))
            {
                throw new global::System.ArgumentNullException("Team");
            }
            else
            {
                command.Parameters[2].Value = ((string)(Team));
            }
            if ((Versus == null))
            {
                throw new global::System.ArgumentNullException("Versus");
            }
            else
            {
                command.Parameters[3].Value = ((string)(Versus));
            }
            if ((Away.HasValue == true))
            {
                command.Parameters[4].Value = ((bool)(Away.Value));
            }
            else
            {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((LoadURL == null))
            {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[5].Value = ((string)(LoadURL));
            }
            if ((LoadDate.HasValue == true))
            {
                command.Parameters[6].Value = ((System.DateTime)(LoadDate.Value));
            }
            else
            {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((LoadResult == null))
            {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[7].Value = ((string)(LoadResult));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateQuery(string LoadURL, global::System.Nullable<global::System.DateTime> LoadDate, string LoadResult, string PlayByPlayURL, int Year, int Wk, string Team, string Versus, global::System.Nullable<bool> Away)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[7];
            if ((LoadURL == null))
            {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[0].Value = ((string)(LoadURL));
            }
            if ((LoadDate.HasValue == true))
            {
                command.Parameters[1].Value = ((System.DateTime)(LoadDate.Value));
            }
            else
            {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((LoadResult == null))
            {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[2].Value = ((string)(LoadResult));
            }
            if ((PlayByPlayURL == null))
            {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[3].Value = ((string)(PlayByPlayURL));
            }
            command.Parameters[4].Value = ((int)(Year));
            command.Parameters[5].Value = ((int)(Wk));
            if ((Team == null))
            {
                throw new global::System.ArgumentNullException("Team");
            }
            else
            {
                command.Parameters[6].Value = ((string)(Team));
            }
            if ((Versus == null))
            {
                throw new global::System.ArgumentNullException("Versus");
            }
            else
            {
                command.Parameters[7].Value = ((string)(Versus));
            }
            if ((Away.HasValue == true))
            {
                command.Parameters[8].Value = ((bool)(Away.Value));
            }
            else
            {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PlayByPlayTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlTransaction _transaction;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlayByPlayTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.DeleteCommand != null)))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.InsertCommand != null)))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.UpdateCommand != null)))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PlayByPlay";
            tableMapping.ColumnMappings.Add("URL", "URL");
            tableMapping.ColumnMappings.Add("Possession", "Possession");
            tableMapping.ColumnMappings.Add("DownDistance", "DownDistance");
            tableMapping.ColumnMappings.Add("Play", "Play");
            tableMapping.ColumnMappings.Add("Seq", "Seq");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PlayByPlay] ([URL], [Possession], [DownDistance], [Play], [Seq" +
                "]) VALUES (@URL, @Possession, @DownDistance, @Play, @Seq)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@URL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "URL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Possession", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Possession", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DownDistance", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Play", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Play", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Seq", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Seq", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FFToiletBowl.Properties.Settings.Default.FFToiletBowlConnectionString1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [URL]\r\n      ,[Possession]\r\n      ,[DownDistance]\r\n      ,[Play]\r\n      ,[" +
                "Seq]\r\n  FROM [dbo].[PlayByPlay]\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE\r\nFROM dbo.PlayByPlay\r\nWHERE URL=@URL";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@URL", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "URL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT o.DownDistance, o.Play, o.Possession, o.Seq, o.URL \r\nFROM PlayByPlay o LEF" +
                "T JOIN ParsedPlayByPlay p \r\nON o.URL=p.URL and o.Seq=p.Seq\r\nWHERE ((p.TimeLeftSe" +
                "c IS NULL) \r\nOR (p.Qtr IS NULL))\r\n";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "INSERT INTO [dbo].[PlayByPlay] ([URL], [Possession], [DownDistance], [Play], [Seq" +
                "]) VALUES (@URL, @Possession, @DownDistance, @Play, @Seq)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@URL", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "URL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Possession", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Possession", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DownDistance", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "DownDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Play", global::System.Data.SqlDbType.VarChar, 512, global::System.Data.ParameterDirection.Input, 0, 0, "Play", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Seq", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Seq", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FFToiletBowlDataSet.PlayByPlayDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FFToiletBowlDataSet.PlayByPlayDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FFToiletBowlDataSet.PlayByPlayDataTable dataTable = new FFToiletBowlDataSet.PlayByPlayDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillUnparsed(FFToiletBowlDataSet.PlayByPlayDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual FFToiletBowlDataSet.PlayByPlayDataTable GetDataUnparsed()
        {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            FFToiletBowlDataSet.PlayByPlayDataTable dataTable = new FFToiletBowlDataSet.PlayByPlayDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet.PlayByPlayDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "PlayByPlay");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQueryByURL(string URL)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((URL == null))
            {
                throw new global::System.ArgumentNullException("URL");
            }
            else
            {
                command.Parameters[0].Value = ((string)(URL));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string URL, string Possession, string DownDistance, string Play, int Seq)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((URL == null))
            {
                throw new global::System.ArgumentNullException("URL");
            }
            else
            {
                command.Parameters[0].Value = ((string)(URL));
            }
            if ((Possession == null))
            {
                throw new global::System.ArgumentNullException("Possession");
            }
            else
            {
                command.Parameters[1].Value = ((string)(Possession));
            }
            if ((DownDistance == null))
            {
                throw new global::System.ArgumentNullException("DownDistance");
            }
            else
            {
                command.Parameters[2].Value = ((string)(DownDistance));
            }
            if ((Play == null))
            {
                throw new global::System.ArgumentNullException("Play");
            }
            else
            {
                command.Parameters[3].Value = ((string)(Play));
            }
            command.Parameters[4].Value = ((int)(Seq));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ParsedPlayByPlayTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlTransaction _transaction;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ParsedPlayByPlayTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.DeleteCommand != null)))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.InsertCommand != null)))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null)
                            && (this.Adapter.UpdateCommand != null)))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ParsedPlayByPlay";
            tableMapping.ColumnMappings.Add("URL", "URL");
            tableMapping.ColumnMappings.Add("Possession", "Possession");
            tableMapping.ColumnMappings.Add("Seq", "Seq");
            tableMapping.ColumnMappings.Add("Down", "Down");
            tableMapping.ColumnMappings.Add("Side", "Side");
            tableMapping.ColumnMappings.Add("Distance", "Distance");
            tableMapping.ColumnMappings.Add("TimeLeftSec", "TimeLeftSec");
            tableMapping.ColumnMappings.Add("Qtr", "Qtr");
            tableMapping.ColumnMappings.Add("Team1", "Team1");
            tableMapping.ColumnMappings.Add("Team2", "Team2");
            tableMapping.ColumnMappings.Add("IsGameMilestone", "IsGameMilestone");
            tableMapping.ColumnMappings.Add("IsTimeout", "IsTimeout");
            tableMapping.ColumnMappings.Add("Timeout", "Timeout");
            tableMapping.ColumnMappings.Add("IsKick", "IsKick");
            tableMapping.ColumnMappings.Add("KickPlayer", "KickPlayer");
            tableMapping.ColumnMappings.Add("KickYards", "KickYards");
            tableMapping.ColumnMappings.Add("KickStartSide", "KickStartSide");
            tableMapping.ColumnMappings.Add("KickStartDistance", "KickStartDistance");
            tableMapping.ColumnMappings.Add("KickLandSide", "KickLandSide");
            tableMapping.ColumnMappings.Add("KickLandDistance", "KickLandDistance");
            tableMapping.ColumnMappings.Add("KickReturnPlayer", "KickReturnPlayer");
            tableMapping.ColumnMappings.Add("IsKickTouchback", "IsKickTouchback");
            tableMapping.ColumnMappings.Add("KickAdvanceStopSide", "KickAdvanceStopSide");
            tableMapping.ColumnMappings.Add("KickAdvanceStopYards", "KickAdvanceStopYards");
            tableMapping.ColumnMappings.Add("KickReturn", "KickReturn");
            tableMapping.ColumnMappings.Add("IsOnsideKick", "IsOnsideKick");
            tableMapping.ColumnMappings.Add("IsPunt", "IsPunt");
            tableMapping.ColumnMappings.Add("PuntPlayer", "PuntPlayer");
            tableMapping.ColumnMappings.Add("PuntYardage", "PuntYardage");
            tableMapping.ColumnMappings.Add("PuntLandedSide", "PuntLandedSide");
            tableMapping.ColumnMappings.Add("PuntLandedDistance", "PuntLandedDistance");
            tableMapping.ColumnMappings.Add("PuntSnapper", "PuntSnapper");
            tableMapping.ColumnMappings.Add("IsPuntFairCatch", "IsPuntFairCatch");
            tableMapping.ColumnMappings.Add("IsPuntMuffed", "IsPuntMuffed");
            tableMapping.ColumnMappings.Add("PuntReceiver", "PuntReceiver");
            tableMapping.ColumnMappings.Add("IsPuntTouchback", "IsPuntTouchback");
            tableMapping.ColumnMappings.Add("PuntingTeamPlayerDowned", "PuntingTeamPlayerDowned");
            tableMapping.ColumnMappings.Add("PuntReturningPlayer", "PuntReturningPlayer");
            tableMapping.ColumnMappings.Add("PuntStoppedSide", "PuntStoppedSide");
            tableMapping.ColumnMappings.Add("PuntStoppedYards", "PuntStoppedYards");
            tableMapping.ColumnMappings.Add("PuntReturnYardage", "PuntReturnYardage");
            tableMapping.ColumnMappings.Add("IsPuntOutOfBounds", "IsPuntOutOfBounds");
            tableMapping.ColumnMappings.Add("IsFieldGoalAttempt", "IsFieldGoalAttempt");
            tableMapping.ColumnMappings.Add("IsFieldGoalGood", "IsFieldGoalGood");
            tableMapping.ColumnMappings.Add("FieldGoalYardage", "FieldGoalYardage");
            tableMapping.ColumnMappings.Add("FieldGoalPlayer", "FieldGoalPlayer");
            tableMapping.ColumnMappings.Add("FieldGoalMissBy", "FieldGoalMissBy");
            tableMapping.ColumnMappings.Add("FieldGoalCenter", "FieldGoalCenter");
            tableMapping.ColumnMappings.Add("FieldGoalHolder", "FieldGoalHolder");
            tableMapping.ColumnMappings.Add("Formation", "Formation");
            tableMapping.ColumnMappings.Add("PassPlayer", "PassPlayer");
            tableMapping.ColumnMappings.Add("IsIncomplete", "IsIncomplete");
            tableMapping.ColumnMappings.Add("IsPass", "IsPass");
            tableMapping.ColumnMappings.Add("IsSacked", "IsSacked");
            tableMapping.ColumnMappings.Add("SackAtSide", "SackAtSide");
            tableMapping.ColumnMappings.Add("SackAtDistance", "SackAtDistance");
            tableMapping.ColumnMappings.Add("PassDirection", "PassDirection");
            tableMapping.ColumnMappings.Add("PassLength", "PassLength");
            tableMapping.ColumnMappings.Add("PassCaughtAtDist", "PassCaughtAtDist");
            tableMapping.ColumnMappings.Add("PassCaughtAtSide", "PassCaughtAtSide");
            tableMapping.ColumnMappings.Add("PassYAC", "PassYAC");
            tableMapping.ColumnMappings.Add("PassYardage", "PassYardage");
            tableMapping.ColumnMappings.Add("PassStopSide", "PassStopSide");
            tableMapping.ColumnMappings.Add("PassStopDistance", "PassStopDistance");
            tableMapping.ColumnMappings.Add("PassWR", "PassWR");
            tableMapping.ColumnMappings.Add("IsRun", "IsRun");
            tableMapping.ColumnMappings.Add("IsScramble", "IsScramble");
            tableMapping.ColumnMappings.Add("RunPlayer", "RunPlayer");
            tableMapping.ColumnMappings.Add("RunDirection", "RunDirection");
            tableMapping.ColumnMappings.Add("RunFormation", "RunFormation");
            tableMapping.ColumnMappings.Add("RunStopAtDist", "RunStopAtDist");
            tableMapping.ColumnMappings.Add("RunStopAtSide", "RunStopAtSide");
            tableMapping.ColumnMappings.Add("RunYardage", "RunYardage");
            tableMapping.ColumnMappings.Add("IsOb", "IsOb");
            tableMapping.ColumnMappings.Add("Ob", "Ob");
            tableMapping.ColumnMappings.Add("TackledByPlayer", "TackledByPlayer");
            tableMapping.ColumnMappings.Add("IsFumble", "IsFumble");
            tableMapping.ColumnMappings.Add("IsFumbleLost", "IsFumbleLost");
            tableMapping.ColumnMappings.Add("IsIntercepted", "IsIntercepted");
            tableMapping.ColumnMappings.Add("IsTouchdown", "IsTouchdown");
            tableMapping.ColumnMappings.Add("Conversion", "Conversion");
            tableMapping.ColumnMappings.Add("IsTdYardPassFromFormat", "IsTdYardPassFromFormat");
            tableMapping.ColumnMappings.Add("IsTouchdownStandardPlayFormat", "IsTouchdownStandardPlayFormat");
            tableMapping.ColumnMappings.Add("IsPenaltyCalled", "IsPenaltyCalled");
            tableMapping.ColumnMappings.Add("IsPenaltyAccepted", "IsPenaltyAccepted");
            tableMapping.ColumnMappings.Add("IsPenaltyNoPlay", "IsPenaltyNoPlay");
            tableMapping.ColumnMappings.Add("PenaltyPlayer", "PenaltyPlayer");
            tableMapping.ColumnMappings.Add("PenaltyRule", "PenaltyRule");
            tableMapping.ColumnMappings.Add("PenaltyYardage", "PenaltyYardage");
            tableMapping.ColumnMappings.Add("PenaltyEnforcedAtDist", "PenaltyEnforcedAtDist");
            tableMapping.ColumnMappings.Add("PenaltyEnforcedAtSide", "PenaltyEnforcedAtSide");
            tableMapping.ColumnMappings.Add("ValidatedAgainst", "ValidatedAgainst");
            tableMapping.ColumnMappings.Add("IsValidated", "IsValidated");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [ParsedPlayByPlay] ([URL], [Possession], [Seq], [Down], [Side], [Dist" +
                "ance], [TimeLeftSec], [Qtr], [Team1], [Team2], [IsGameMilestone], [IsTimeout], [" +
                "Timeout], [IsKick], [KickPlayer], [KickYards], [KickStartSide], [KickStartDistan" +
                "ce], [KickLandSide], [KickLandDistance], [KickReturnPlayer], [IsKickTouchback], " +
                "[KickAdvanceStopSide], [KickAdvanceStopYards], [KickReturn], [IsOnsideKick], [Is" +
                "Punt], [PuntPlayer], [PuntYardage], [PuntLandedSide], [PuntLandedDistance], [Pun" +
                "tSnapper], [IsPuntFairCatch], [IsPuntMuffed], [PuntReceiver], [IsPuntTouchback]," +
                " [PuntingTeamPlayerDowned], [PuntReturningPlayer], [PuntStoppedSide], [PuntStopp" +
                "edYards], [PuntReturnYardage], [IsPuntOutOfBounds], [IsFieldGoalAttempt], [IsFie" +
                "ldGoalGood], [FieldGoalYardage], [FieldGoalPlayer], [FieldGoalMissBy], [FieldGoa" +
                "lCenter], [FieldGoalHolder], [Formation], [PassPlayer], [IsIncomplete], [IsPass]" +
                ", [IsSacked], [SackAtSide], [SackAtDistance], [PassDirection], [PassLength], [Pa" +
                "ssCaughtAtDist], [PassCaughtAtSide], [PassYAC], [PassYardage], [PassStopSide], [" +
                "PassStopDistance], [PassWR], [IsRun], [IsScramble], [RunPlayer], [RunDirection]," +
                " [RunFormation], [RunStopAtDist], [RunStopAtSide], [RunYardage], [IsOb], [Ob], [" +
                "TackledByPlayer], [IsFumble], [IsFumbleLost], [IsIntercepted], [IsTouchdown], [C" +
                "onversion], [IsTdYardPassFromFormat], [IsTouchdownStandardPlayFormat], [IsPenalt" +
                "yCalled], [IsPenaltyAccepted], [IsPenaltyNoPlay], [PenaltyPlayer], [PenaltyRule]" +
                ", [PenaltyYardage], [PenaltyEnforcedAtDist], [PenaltyEnforcedAtSide], [Validated" +
                "Against], [IsValidated]) VALUES (@URL, @Possession, @Seq, @Down, @Side, @Distanc" +
                "e, @TimeLeftSec, @Qtr, @Team1, @Team2, @IsGameMilestone, @IsTimeout, @Timeout, @" +
                "IsKick, @KickPlayer, @KickYards, @KickStartSide, @KickStartDistance, @KickLandSi" +
                "de, @KickLandDistance, @KickReturnPlayer, @IsKickTouchback, @KickAdvanceStopSide" +
                ", @KickAdvanceStopYards, @KickReturn, @IsOnsideKick, @IsPunt, @PuntPlayer, @Punt" +
                "Yardage, @PuntLandedSide, @PuntLandedDistance, @PuntSnapper, @IsPuntFairCatch, @" +
                "IsPuntMuffed, @PuntReceiver, @IsPuntTouchback, @PuntingTeamPlayerDowned, @PuntRe" +
                "turningPlayer, @PuntStoppedSide, @PuntStoppedYards, @PuntReturnYardage, @IsPuntO" +
                "utOfBounds, @IsFieldGoalAttempt, @IsFieldGoalGood, @FieldGoalYardage, @FieldGoal" +
                "Player, @FieldGoalMissBy, @FieldGoalCenter, @FieldGoalHolder, @Formation, @PassP" +
                "layer, @IsIncomplete, @IsPass, @IsSacked, @SackAtSide, @SackAtDistance, @PassDir" +
                "ection, @PassLength, @PassCaughtAtDist, @PassCaughtAtSide, @PassYAC, @PassYardag" +
                "e, @PassStopSide, @PassStopDistance, @PassWR, @IsRun, @IsScramble, @RunPlayer, @" +
                "RunDirection, @RunFormation, @RunStopAtDist, @RunStopAtSide, @RunYardage, @IsOb," +
                " @Ob, @TackledByPlayer, @IsFumble, @IsFumbleLost, @IsIntercepted, @IsTouchdown, " +
                "@Conversion, @IsTdYardPassFromFormat, @IsTouchdownStandardPlayFormat, @IsPenalty" +
                "Called, @IsPenaltyAccepted, @IsPenaltyNoPlay, @PenaltyPlayer, @PenaltyRule, @Pen" +
                "altyYardage, @PenaltyEnforcedAtDist, @PenaltyEnforcedAtSide, @ValidatedAgainst, " +
                "@IsValidated)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@URL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "URL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Possession", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Possession", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Seq", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Seq", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Down", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Down", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Side", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Side", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Distance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Distance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeLeftSec", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeLeftSec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Qtr", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Qtr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Team1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Team2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsGameMilestone", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsGameMilestone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsTimeout", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsTimeout", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Timeout", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Timeout", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsKick", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsKick", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickPlayer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KickPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickYards", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KickYards", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickStartSide", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KickStartSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickStartDistance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KickStartDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickLandSide", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KickLandSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickLandDistance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KickLandDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickReturnPlayer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KickReturnPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsKickTouchback", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsKickTouchback", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickAdvanceStopSide", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KickAdvanceStopSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickAdvanceStopYards", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KickAdvanceStopYards", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickReturn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KickReturn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsOnsideKick", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsOnsideKick", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPunt", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPunt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntPlayer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntYardage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntLandedSide", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntLandedSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntLandedDistance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntLandedDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntSnapper", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntSnapper", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPuntFairCatch", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPuntFairCatch", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPuntMuffed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPuntMuffed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntReceiver", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntReceiver", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPuntTouchback", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPuntTouchback", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntingTeamPlayerDowned", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntingTeamPlayerDowned", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntReturningPlayer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntReturningPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntStoppedSide", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntStoppedSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntStoppedYards", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntStoppedYards", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntReturnYardage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PuntReturnYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPuntOutOfBounds", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPuntOutOfBounds", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFieldGoalAttempt", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFieldGoalAttempt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFieldGoalGood", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFieldGoalGood", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FieldGoalYardage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FieldGoalYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FieldGoalPlayer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FieldGoalPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FieldGoalMissBy", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FieldGoalMissBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FieldGoalCenter", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FieldGoalCenter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FieldGoalHolder", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FieldGoalHolder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Formation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Formation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassPlayer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsIncomplete", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsIncomplete", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPass", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPass", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSacked", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSacked", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SackAtSide", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SackAtSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SackAtDistance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SackAtDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassDirection", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassDirection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassLength", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassCaughtAtDist", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassCaughtAtDist", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassCaughtAtSide", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassCaughtAtSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassYAC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassYAC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassYardage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassStopSide", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassStopSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassStopDistance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassStopDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassWR", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassWR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsRun", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsRun", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsScramble", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsScramble", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunPlayer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunDirection", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunDirection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunFormation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunFormation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunStopAtDist", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunStopAtDist", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunStopAtSide", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunStopAtSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunYardage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsOb", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsOb", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ob", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ob", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TackledByPlayer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TackledByPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFumble", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFumble", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFumbleLost", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFumbleLost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsIntercepted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsIntercepted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsTouchdown", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsTouchdown", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Conversion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Conversion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsTdYardPassFromFormat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsTdYardPassFromFormat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsTouchdownStandardPlayFormat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsTouchdownStandardPlayFormat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPenaltyCalled", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPenaltyCalled", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPenaltyAccepted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPenaltyAccepted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPenaltyNoPlay", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPenaltyNoPlay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PenaltyPlayer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PenaltyPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PenaltyRule", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PenaltyRule", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PenaltyYardage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PenaltyYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PenaltyEnforcedAtDist", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PenaltyEnforcedAtDist", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PenaltyEnforcedAtSide", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PenaltyEnforcedAtSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValidatedAgainst", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValidatedAgainst", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsValidated", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsValidated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FFToiletBowl.Properties.Settings.Default.FFToiletBowlConnectionString1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [URL]\r\n      ,[Possession]\r\n      ,[Seq]\r\n      ,[Down]\r\n      ,[Side]\r\n  " +
                "    ,[Distance]\r\n      ,[TimeLeftSec]\r\n      ,[Qtr]\r\n      ,[Team1]\r\n      ,[Tea" +
                "m2]\r\n      ,[IsGameMilestone]\r\n      ,[IsTimeout]\r\n      ,[Timeout]\r\n      ,[IsK" +
                "ick]\r\n      ,[KickPlayer]\r\n      ,[KickYards]\r\n      ,[KickStartSide]\r\n      ,[K" +
                "ickStartDistance]\r\n      ,[KickLandSide]\r\n      ,[KickLandDistance]\r\n      ,[Kic" +
                "kReturnPlayer]\r\n      ,[IsKickTouchback]\r\n      ,[KickAdvanceStopSide]\r\n      ,[" +
                "KickAdvanceStopYards]\r\n      ,[KickReturn]\r\n      ,[IsOnsideKick]\r\n      ,[IsPun" +
                "t]\r\n      ,[PuntPlayer]\r\n      ,[PuntYardage]\r\n      ,[PuntLandedSide]\r\n      ,[" +
                "PuntLandedDistance]\r\n      ,[PuntSnapper]\r\n      ,[IsPuntFairCatch]\r\n      ,[IsP" +
                "untMuffed]\r\n      ,[PuntReceiver]\r\n      ,[IsPuntTouchback]\r\n      ,[PuntingTeam" +
                "PlayerDowned]\r\n      ,[PuntReturningPlayer]\r\n      ,[PuntStoppedSide]\r\n      ,[P" +
                "untStoppedYards]\r\n      ,[PuntReturnYardage]\r\n      ,[IsPuntOutOfBounds]\r\n      " +
                ",[IsFieldGoalAttempt]\r\n      ,[IsFieldGoalGood]\r\n      ,[FieldGoalYardage]\r\n    " +
                "  ,[FieldGoalPlayer]\r\n      ,[FieldGoalMissBy]\r\n      ,[FieldGoalCenter]\r\n      " +
                ",[FieldGoalHolder]\r\n      ,[Formation]\r\n      ,[PassPlayer]\r\n      ,[IsIncomplet" +
                "e]\r\n      ,[IsPass]\r\n      ,[IsSacked]\r\n      ,[SackAtSide]\r\n      ,[SackAtDista" +
                "nce]\r\n      ,[PassDirection]\r\n      ,[PassLength]\r\n      ,[PassCaughtAtDist]\r\n  " +
                "    ,[PassCaughtAtSide]\r\n      ,[PassYAC]\r\n      ,[PassYardage]\r\n      ,[PassSto" +
                "pSide]\r\n      ,[PassStopDistance]\r\n      ,[PassWR]\r\n      ,[IsRun]\r\n      ,[IsSc" +
                "ramble]\r\n      ,[RunPlayer]\r\n      ,[RunDirection]\r\n      ,[RunFormation]\r\n     " +
                " ,[RunStopAtDist]\r\n      ,[RunStopAtSide]\r\n      ,[RunYardage]\r\n      ,[IsOb]\r\n " +
                "     ,[Ob]\r\n      ,[TackledByPlayer]\r\n      ,[IsFumble]\r\n      ,[IsFumbleLost]\r\n" +
                "      ,[IsIntercepted]\r\n      ,[IsTouchdown]\r\n      ,[Conversion]\r\n      ,[IsTdY" +
                "ardPassFromFormat]\r\n      ,[IsTouchdownStandardPlayFormat]\r\n      ,[IsPenaltyCal" +
                "led]\r\n      ,[IsPenaltyAccepted]\r\n      ,[IsPenaltyNoPlay]\r\n      ,[PenaltyPlaye" +
                "r]\r\n      ,[PenaltyRule]\r\n      ,[PenaltyYardage]\r\n      ,[PenaltyEnforcedAtDist" +
                "]\r\n      ,[PenaltyEnforcedAtSide]\r\n      ,[ValidatedAgainst]\r\n      ,[IsValidate" +
                "d]\r\n  FROM [ParsedPlayByPlay]\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "INSERT INTO [ParsedPlayByPlay] ([URL], [Possession], [Seq], [Down], [Side], [Dist" +
                "ance], [TimeLeftSec], [Qtr], [Team1], [Team2], [IsGameMilestone], [IsTimeout], [" +
                "Timeout], [IsKick], [KickPlayer], [KickYards], [KickStartSide], [KickStartDistan" +
                "ce], [KickLandSide], [KickLandDistance], [KickReturnPlayer], [IsKickTouchback], " +
                "[KickAdvanceStopSide], [KickAdvanceStopYards], [KickReturn], [IsOnsideKick], [Is" +
                "Punt], [PuntPlayer], [PuntYardage], [PuntLandedSide], [PuntLandedDistance], [Pun" +
                "tSnapper], [IsPuntFairCatch], [IsPuntMuffed], [PuntReceiver], [IsPuntTouchback]," +
                " [PuntingTeamPlayerDowned], [PuntReturningPlayer], [PuntStoppedSide], [PuntStopp" +
                "edYards], [PuntReturnYardage], [IsPuntOutOfBounds], [IsFieldGoalAttempt], [IsFie" +
                "ldGoalGood], [FieldGoalYardage], [FieldGoalPlayer], [FieldGoalMissBy], [FieldGoa" +
                "lCenter], [FieldGoalHolder], [Formation], [PassPlayer], [IsIncomplete], [IsPass]" +
                ", [IsSacked], [SackAtSide], [SackAtDistance], [PassDirection], [PassLength], [Pa" +
                "ssCaughtAtDist], [PassCaughtAtSide], [PassYAC], [PassYardage], [PassStopSide], [" +
                "PassStopDistance], [PassWR], [IsRun], [IsScramble], [RunPlayer], [RunDirection]," +
                " [RunFormation], [RunStopAtDist], [RunStopAtSide], [RunYardage], [IsOb], [Ob], [" +
                "TackledByPlayer], [IsFumble], [IsFumbleLost], [IsIntercepted], [IsTouchdown], [C" +
                "onversion], [IsTdYardPassFromFormat], [IsTouchdownStandardPlayFormat], [IsPenalt" +
                "yCalled], [IsPenaltyAccepted], [IsPenaltyNoPlay], [PenaltyPlayer], [PenaltyRule]" +
                ", [PenaltyYardage], [PenaltyEnforcedAtDist], [PenaltyEnforcedAtSide], [Validated" +
                "Against], [IsValidated]) VALUES (@URL, @Possession, @Seq, @Down, @Side, @Distanc" +
                "e, @TimeLeftSec, @Qtr, @Team1, @Team2, @IsGameMilestone, @IsTimeout, @Timeout, @" +
                "IsKick, @KickPlayer, @KickYards, @KickStartSide, @KickStartDistance, @KickLandSi" +
                "de, @KickLandDistance, @KickReturnPlayer, @IsKickTouchback, @KickAdvanceStopSide" +
                ", @KickAdvanceStopYards, @KickReturn, @IsOnsideKick, @IsPunt, @PuntPlayer, @Punt" +
                "Yardage, @PuntLandedSide, @PuntLandedDistance, @PuntSnapper, @IsPuntFairCatch, @" +
                "IsPuntMuffed, @PuntReceiver, @IsPuntTouchback, @PuntingTeamPlayerDowned, @PuntRe" +
                "turningPlayer, @PuntStoppedSide, @PuntStoppedYards, @PuntReturnYardage, @IsPuntO" +
                "utOfBounds, @IsFieldGoalAttempt, @IsFieldGoalGood, @FieldGoalYardage, @FieldGoal" +
                "Player, @FieldGoalMissBy, @FieldGoalCenter, @FieldGoalHolder, @Formation, @PassP" +
                "layer, @IsIncomplete, @IsPass, @IsSacked, @SackAtSide, @SackAtDistance, @PassDir" +
                "ection, @PassLength, @PassCaughtAtDist, @PassCaughtAtSide, @PassYAC, @PassYardag" +
                "e, @PassStopSide, @PassStopDistance, @PassWR, @IsRun, @IsScramble, @RunPlayer, @" +
                "RunDirection, @RunFormation, @RunStopAtDist, @RunStopAtSide, @RunYardage, @IsOb," +
                " @Ob, @TackledByPlayer, @IsFumble, @IsFumbleLost, @IsIntercepted, @IsTouchdown, " +
                "@Conversion, @IsTdYardPassFromFormat, @IsTouchdownStandardPlayFormat, @IsPenalty" +
                "Called, @IsPenaltyAccepted, @IsPenaltyNoPlay, @PenaltyPlayer, @PenaltyRule, @Pen" +
                "altyYardage, @PenaltyEnforcedAtDist, @PenaltyEnforcedAtSide, @ValidatedAgainst, " +
                "@IsValidated)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@URL", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "URL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Possession", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Possession", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Seq", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Seq", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Down", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Down", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Side", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Side", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Distance", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Distance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeLeftSec", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TimeLeftSec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Qtr", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Qtr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team1", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Team1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Team2", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "Team2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsGameMilestone", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsGameMilestone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsTimeout", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsTimeout", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Timeout", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Timeout", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsKick", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsKick", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickPlayer", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "KickPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickYards", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "KickYards", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickStartSide", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "KickStartSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickStartDistance", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "KickStartDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickLandSide", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "KickLandSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickLandDistance", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "KickLandDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickReturnPlayer", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "KickReturnPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsKickTouchback", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsKickTouchback", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickAdvanceStopSide", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "KickAdvanceStopSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickAdvanceStopYards", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "KickAdvanceStopYards", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KickReturn", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "KickReturn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsOnsideKick", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsOnsideKick", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPunt", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsPunt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntPlayer", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "PuntPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntYardage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PuntYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntLandedSide", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "PuntLandedSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntLandedDistance", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PuntLandedDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntSnapper", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "PuntSnapper", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPuntFairCatch", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsPuntFairCatch", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPuntMuffed", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsPuntMuffed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntReceiver", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "PuntReceiver", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPuntTouchback", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsPuntTouchback", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntingTeamPlayerDowned", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "PuntingTeamPlayerDowned", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntReturningPlayer", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "PuntReturningPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntStoppedSide", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "PuntStoppedSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntStoppedYards", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PuntStoppedYards", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PuntReturnYardage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PuntReturnYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPuntOutOfBounds", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsPuntOutOfBounds", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFieldGoalAttempt", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsFieldGoalAttempt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFieldGoalGood", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsFieldGoalGood", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FieldGoalYardage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "FieldGoalYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FieldGoalPlayer", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "FieldGoalPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FieldGoalMissBy", global::System.Data.SqlDbType.VarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "FieldGoalMissBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FieldGoalCenter", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "FieldGoalCenter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FieldGoalHolder", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "FieldGoalHolder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Formation", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Formation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassPlayer", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "PassPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsIncomplete", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsIncomplete", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPass", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsPass", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSacked", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsSacked", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SackAtSide", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "SackAtSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SackAtDistance", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "SackAtDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassDirection", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "PassDirection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassLength", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "PassLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassCaughtAtDist", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PassCaughtAtDist", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassCaughtAtSide", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "PassCaughtAtSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassYAC", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PassYAC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassYardage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PassYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassStopSide", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "PassStopSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassStopDistance", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PassStopDistance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassWR", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "PassWR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsRun", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsRun", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsScramble", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsScramble", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunPlayer", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "RunPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunDirection", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "RunDirection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunFormation", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "RunFormation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunStopAtDist", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RunStopAtDist", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunStopAtSide", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "RunStopAtSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunYardage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RunYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsOb", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsOb", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ob", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Ob", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TackledByPlayer", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "TackledByPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFumble", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsFumble", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFumbleLost", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsFumbleLost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsIntercepted", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsIntercepted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsTouchdown", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsTouchdown", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Conversion", global::System.Data.SqlDbType.VarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "Conversion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsTdYardPassFromFormat", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsTdYardPassFromFormat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsTouchdownStandardPlayFormat", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsTouchdownStandardPlayFormat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPenaltyCalled", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsPenaltyCalled", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPenaltyAccepted", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsPenaltyAccepted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPenaltyNoPlay", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsPenaltyNoPlay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PenaltyPlayer", global::System.Data.SqlDbType.VarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, "PenaltyPlayer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PenaltyRule", global::System.Data.SqlDbType.VarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "PenaltyRule", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PenaltyYardage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PenaltyYardage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PenaltyEnforcedAtDist", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PenaltyEnforcedAtDist", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PenaltyEnforcedAtSide", global::System.Data.SqlDbType.VarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "PenaltyEnforcedAtSide", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValidatedAgainst", global::System.Data.SqlDbType.VarChar, 512, global::System.Data.ParameterDirection.Input, 0, 0, "ValidatedAgainst", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsValidated", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsValidated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FFToiletBowlDataSet.ParsedPlayByPlayDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FFToiletBowlDataSet.ParsedPlayByPlayDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FFToiletBowlDataSet.ParsedPlayByPlayDataTable dataTable = new FFToiletBowlDataSet.ParsedPlayByPlayDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet.ParsedPlayByPlayDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FFToiletBowlDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "ParsedPlayByPlay");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string URL,
                    string Possession,
                    int Seq,
                    global::System.Nullable<int> Down,
                    string Side,
                    global::System.Nullable<int> Distance,
                    global::System.Nullable<int> TimeLeftSec,
                    global::System.Nullable<int> Qtr,
                    string Team1,
                    string Team2,
                    global::System.Nullable<bool> IsGameMilestone,
                    global::System.Nullable<bool> IsTimeout,
                    global::System.Nullable<int> Timeout,
                    global::System.Nullable<bool> IsKick,
                    string KickPlayer,
                    global::System.Nullable<int> KickYards,
                    string KickStartSide,
                    global::System.Nullable<int> KickStartDistance,
                    string KickLandSide,
                    global::System.Nullable<int> KickLandDistance,
                    string KickReturnPlayer,
                    global::System.Nullable<bool> IsKickTouchback,
                    string KickAdvanceStopSide,
                    global::System.Nullable<int> KickAdvanceStopYards,
                    global::System.Nullable<int> KickReturn,
                    global::System.Nullable<bool> IsOnsideKick,
                    global::System.Nullable<bool> IsPunt,
                    string PuntPlayer,
                    global::System.Nullable<int> PuntYardage,
                    string PuntLandedSide,
                    global::System.Nullable<int> PuntLandedDistance,
                    string PuntSnapper,
                    global::System.Nullable<bool> IsPuntFairCatch,
                    global::System.Nullable<bool> IsPuntMuffed,
                    string PuntReceiver,
                    global::System.Nullable<bool> IsPuntTouchback,
                    string PuntingTeamPlayerDowned,
                    string PuntReturningPlayer,
                    string PuntStoppedSide,
                    global::System.Nullable<int> PuntStoppedYards,
                    global::System.Nullable<int> PuntReturnYardage,
                    global::System.Nullable<bool> IsPuntOutOfBounds,
                    global::System.Nullable<bool> IsFieldGoalAttempt,
                    global::System.Nullable<bool> IsFieldGoalGood,
                    global::System.Nullable<int> FieldGoalYardage,
                    string FieldGoalPlayer,
                    string FieldGoalMissBy,
                    string FieldGoalCenter,
                    string FieldGoalHolder,
                    string Formation,
                    string PassPlayer,
                    global::System.Nullable<bool> IsIncomplete,
                    global::System.Nullable<bool> IsPass,
                    global::System.Nullable<bool> IsSacked,
                    string SackAtSide,
                    global::System.Nullable<int> SackAtDistance,
                    string PassDirection,
                    string PassLength,
                    global::System.Nullable<int> PassCaughtAtDist,
                    string PassCaughtAtSide,
                    global::System.Nullable<int> PassYAC,
                    global::System.Nullable<int> PassYardage,
                    string PassStopSide,
                    global::System.Nullable<int> PassStopDistance,
                    string PassWR,
                    global::System.Nullable<bool> IsRun,
                    global::System.Nullable<bool> IsScramble,
                    string RunPlayer,
                    string RunDirection,
                    string RunFormation,
                    global::System.Nullable<int> RunStopAtDist,
                    string RunStopAtSide,
                    global::System.Nullable<int> RunYardage,
                    global::System.Nullable<bool> IsOb,
                    string Ob,
                    string TackledByPlayer,
                    global::System.Nullable<bool> IsFumble,
                    global::System.Nullable<bool> IsFumbleLost,
                    global::System.Nullable<bool> IsIntercepted,
                    global::System.Nullable<bool> IsTouchdown,
                    string Conversion,
                    global::System.Nullable<bool> IsTdYardPassFromFormat,
                    global::System.Nullable<bool> IsTouchdownStandardPlayFormat,
                    global::System.Nullable<bool> IsPenaltyCalled,
                    global::System.Nullable<bool> IsPenaltyAccepted,
                    global::System.Nullable<bool> IsPenaltyNoPlay,
                    string PenaltyPlayer,
                    string PenaltyRule,
                    global::System.Nullable<int> PenaltyYardage,
                    global::System.Nullable<int> PenaltyEnforcedAtDist,
                    string PenaltyEnforcedAtSide,
                    string ValidatedAgainst,
                    global::System.Nullable<bool> IsValidated)
        {
            if ((URL == null))
            {
                throw new global::System.ArgumentNullException("URL");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(URL));
            }
            if ((Possession == null))
            {
                throw new global::System.ArgumentNullException("Possession");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Possession));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Seq));
            if ((Down.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Down.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Side == null))
            {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Side));
            }
            if ((Distance.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Distance.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((TimeLeftSec.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(TimeLeftSec.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Qtr.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(Qtr.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Team1 == null))
            {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Team1));
            }
            if ((Team2 == null))
            {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Team2));
            }
            if ((IsGameMilestone.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(IsGameMilestone.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((IsTimeout.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(IsTimeout.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Timeout.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(Timeout.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((IsKick.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[13].Value = ((bool)(IsKick.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((KickPlayer == null))
            {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(KickPlayer));
            }
            if ((KickYards.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(KickYards.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((KickStartSide == null))
            {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(KickStartSide));
            }
            if ((KickStartDistance.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(KickStartDistance.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((KickLandSide == null))
            {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(KickLandSide));
            }
            if ((KickLandDistance.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[19].Value = ((int)(KickLandDistance.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((KickReturnPlayer == null))
            {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(KickReturnPlayer));
            }
            if ((IsKickTouchback.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[21].Value = ((bool)(IsKickTouchback.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((KickAdvanceStopSide == null))
            {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(KickAdvanceStopSide));
            }
            if ((KickAdvanceStopYards.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[23].Value = ((int)(KickAdvanceStopYards.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((KickReturn.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(KickReturn.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((IsOnsideKick.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[25].Value = ((bool)(IsOnsideKick.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((IsPunt.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[26].Value = ((bool)(IsPunt.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((PuntPlayer == null))
            {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(PuntPlayer));
            }
            if ((PuntYardage.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[28].Value = ((int)(PuntYardage.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((PuntLandedSide == null))
            {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(PuntLandedSide));
            }
            if ((PuntLandedDistance.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[30].Value = ((int)(PuntLandedDistance.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((PuntSnapper == null))
            {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(PuntSnapper));
            }
            if ((IsPuntFairCatch.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[32].Value = ((bool)(IsPuntFairCatch.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((IsPuntMuffed.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[33].Value = ((bool)(IsPuntMuffed.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((PuntReceiver == null))
            {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(PuntReceiver));
            }
            if ((IsPuntTouchback.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[35].Value = ((bool)(IsPuntTouchback.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((PuntingTeamPlayerDowned == null))
            {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[36].Value = ((string)(PuntingTeamPlayerDowned));
            }
            if ((PuntReturningPlayer == null))
            {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(PuntReturningPlayer));
            }
            if ((PuntStoppedSide == null))
            {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[38].Value = ((string)(PuntStoppedSide));
            }
            if ((PuntStoppedYards.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[39].Value = ((int)(PuntStoppedYards.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((PuntReturnYardage.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[40].Value = ((int)(PuntReturnYardage.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((IsPuntOutOfBounds.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[41].Value = ((bool)(IsPuntOutOfBounds.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((IsFieldGoalAttempt.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[42].Value = ((bool)(IsFieldGoalAttempt.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((IsFieldGoalGood.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[43].Value = ((bool)(IsFieldGoalGood.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((FieldGoalYardage.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[44].Value = ((int)(FieldGoalYardage.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((FieldGoalPlayer == null))
            {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[45].Value = ((string)(FieldGoalPlayer));
            }
            if ((FieldGoalMissBy == null))
            {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[46].Value = ((string)(FieldGoalMissBy));
            }
            if ((FieldGoalCenter == null))
            {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[47].Value = ((string)(FieldGoalCenter));
            }
            if ((FieldGoalHolder == null))
            {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[48].Value = ((string)(FieldGoalHolder));
            }
            if ((Formation == null))
            {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[49].Value = ((string)(Formation));
            }
            if ((PassPlayer == null))
            {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[50].Value = ((string)(PassPlayer));
            }
            if ((IsIncomplete.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[51].Value = ((bool)(IsIncomplete.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((IsPass.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[52].Value = ((bool)(IsPass.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((IsSacked.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[53].Value = ((bool)(IsSacked.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((SackAtSide == null))
            {
                this.Adapter.InsertCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[54].Value = ((string)(SackAtSide));
            }
            if ((SackAtDistance.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[55].Value = ((int)(SackAtDistance.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((PassDirection == null))
            {
                this.Adapter.InsertCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[56].Value = ((string)(PassDirection));
            }
            if ((PassLength == null))
            {
                this.Adapter.InsertCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[57].Value = ((string)(PassLength));
            }
            if ((PassCaughtAtDist.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[58].Value = ((int)(PassCaughtAtDist.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((PassCaughtAtSide == null))
            {
                this.Adapter.InsertCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[59].Value = ((string)(PassCaughtAtSide));
            }
            if ((PassYAC.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[60].Value = ((int)(PassYAC.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((PassYardage.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[61].Value = ((int)(PassYardage.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((PassStopSide == null))
            {
                this.Adapter.InsertCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[62].Value = ((string)(PassStopSide));
            }
            if ((PassStopDistance.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[63].Value = ((int)(PassStopDistance.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((PassWR == null))
            {
                this.Adapter.InsertCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[64].Value = ((string)(PassWR));
            }
            if ((IsRun.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[65].Value = ((bool)(IsRun.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((IsScramble.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[66].Value = ((bool)(IsScramble.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((RunPlayer == null))
            {
                this.Adapter.InsertCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[67].Value = ((string)(RunPlayer));
            }
            if ((RunDirection == null))
            {
                this.Adapter.InsertCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[68].Value = ((string)(RunDirection));
            }
            if ((RunFormation == null))
            {
                this.Adapter.InsertCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[69].Value = ((string)(RunFormation));
            }
            if ((RunStopAtDist.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[70].Value = ((int)(RunStopAtDist.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((RunStopAtSide == null))
            {
                this.Adapter.InsertCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[71].Value = ((string)(RunStopAtSide));
            }
            if ((RunYardage.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[72].Value = ((int)(RunYardage.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((IsOb.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[73].Value = ((bool)(IsOb.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((Ob == null))
            {
                this.Adapter.InsertCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[74].Value = ((string)(Ob));
            }
            if ((TackledByPlayer == null))
            {
                this.Adapter.InsertCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[75].Value = ((string)(TackledByPlayer));
            }
            if ((IsFumble.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[76].Value = ((bool)(IsFumble.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((IsFumbleLost.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[77].Value = ((bool)(IsFumbleLost.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((IsIntercepted.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[78].Value = ((bool)(IsIntercepted.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((IsTouchdown.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[79].Value = ((bool)(IsTouchdown.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((Conversion == null))
            {
                this.Adapter.InsertCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[80].Value = ((string)(Conversion));
            }
            if ((IsTdYardPassFromFormat.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[81].Value = ((bool)(IsTdYardPassFromFormat.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((IsTouchdownStandardPlayFormat.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[82].Value = ((bool)(IsTouchdownStandardPlayFormat.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((IsPenaltyCalled.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[83].Value = ((bool)(IsPenaltyCalled.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((IsPenaltyAccepted.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[84].Value = ((bool)(IsPenaltyAccepted.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((IsPenaltyNoPlay.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[85].Value = ((bool)(IsPenaltyNoPlay.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((PenaltyPlayer == null))
            {
                this.Adapter.InsertCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[86].Value = ((string)(PenaltyPlayer));
            }
            if ((PenaltyRule == null))
            {
                this.Adapter.InsertCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[87].Value = ((string)(PenaltyRule));
            }
            if ((PenaltyYardage.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[88].Value = ((int)(PenaltyYardage.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((PenaltyEnforcedAtDist.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[89].Value = ((int)(PenaltyEnforcedAtDist.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((PenaltyEnforcedAtSide == null))
            {
                this.Adapter.InsertCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[90].Value = ((string)(PenaltyEnforcedAtSide));
            }
            if ((ValidatedAgainst == null))
            {
                this.Adapter.InsertCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[91].Value = ((string)(ValidatedAgainst));
            }
            if ((IsValidated.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[92].Value = ((bool)(IsValidated.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(
                    string URL,
                    string Possession,
                    int Seq,
                    global::System.Nullable<int> Down,
                    string Side,
                    global::System.Nullable<int> Distance,
                    global::System.Nullable<int> TimeLeftSec,
                    global::System.Nullable<int> Qtr,
                    string Team1,
                    string Team2,
                    global::System.Nullable<bool> IsGameMilestone,
                    global::System.Nullable<bool> IsTimeout,
                    global::System.Nullable<int> Timeout,
                    global::System.Nullable<bool> IsKick,
                    string KickPlayer,
                    global::System.Nullable<int> KickYards,
                    string KickStartSide,
                    global::System.Nullable<int> KickStartDistance,
                    string KickLandSide,
                    global::System.Nullable<int> KickLandDistance,
                    string KickReturnPlayer,
                    global::System.Nullable<bool> IsKickTouchback,
                    string KickAdvanceStopSide,
                    global::System.Nullable<int> KickAdvanceStopYards,
                    global::System.Nullable<int> KickReturn,
                    global::System.Nullable<bool> IsOnsideKick,
                    global::System.Nullable<bool> IsPunt,
                    string PuntPlayer,
                    global::System.Nullable<int> PuntYardage,
                    string PuntLandedSide,
                    global::System.Nullable<int> PuntLandedDistance,
                    string PuntSnapper,
                    global::System.Nullable<bool> IsPuntFairCatch,
                    global::System.Nullable<bool> IsPuntMuffed,
                    string PuntReceiver,
                    global::System.Nullable<bool> IsPuntTouchback,
                    string PuntingTeamPlayerDowned,
                    string PuntReturningPlayer,
                    string PuntStoppedSide,
                    global::System.Nullable<int> PuntStoppedYards,
                    global::System.Nullable<int> PuntReturnYardage,
                    global::System.Nullable<bool> IsPuntOutOfBounds,
                    global::System.Nullable<bool> IsFieldGoalAttempt,
                    global::System.Nullable<bool> IsFieldGoalGood,
                    global::System.Nullable<int> FieldGoalYardage,
                    string FieldGoalPlayer,
                    string FieldGoalMissBy,
                    string FieldGoalCenter,
                    string FieldGoalHolder,
                    string Formation,
                    string PassPlayer,
                    global::System.Nullable<bool> IsIncomplete,
                    global::System.Nullable<bool> IsPass,
                    global::System.Nullable<bool> IsSacked,
                    string SackAtSide,
                    global::System.Nullable<int> SackAtDistance,
                    string PassDirection,
                    string PassLength,
                    global::System.Nullable<int> PassCaughtAtDist,
                    string PassCaughtAtSide,
                    global::System.Nullable<int> PassYAC,
                    global::System.Nullable<int> PassYardage,
                    string PassStopSide,
                    global::System.Nullable<int> PassStopDistance,
                    string PassWR,
                    global::System.Nullable<bool> IsRun,
                    global::System.Nullable<bool> IsScramble,
                    string RunPlayer,
                    string RunDirection,
                    string RunFormation,
                    global::System.Nullable<int> RunStopAtDist,
                    string RunStopAtSide,
                    global::System.Nullable<int> RunYardage,
                    global::System.Nullable<bool> IsOb,
                    string Ob,
                    string TackledByPlayer,
                    global::System.Nullable<bool> IsFumble,
                    global::System.Nullable<bool> IsFumbleLost,
                    global::System.Nullable<bool> IsIntercepted,
                    global::System.Nullable<bool> IsTouchdown,
                    string Conversion,
                    global::System.Nullable<bool> IsTdYardPassFromFormat,
                    global::System.Nullable<bool> IsTouchdownStandardPlayFormat,
                    global::System.Nullable<bool> IsPenaltyCalled,
                    global::System.Nullable<bool> IsPenaltyAccepted,
                    global::System.Nullable<bool> IsPenaltyNoPlay,
                    string PenaltyPlayer,
                    string PenaltyRule,
                    global::System.Nullable<int> PenaltyYardage,
                    global::System.Nullable<int> PenaltyEnforcedAtDist,
                    string PenaltyEnforcedAtSide,
                    string ValidatedAgainst,
                    global::System.Nullable<bool> IsValidated)
        {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((URL == null))
            {
                throw new global::System.ArgumentNullException("URL");
            }
            else
            {
                command.Parameters[0].Value = ((string)(URL));
            }
            if ((Possession == null))
            {
                throw new global::System.ArgumentNullException("Possession");
            }
            else
            {
                command.Parameters[1].Value = ((string)(Possession));
            }
            command.Parameters[2].Value = ((int)(Seq));
            if ((Down.HasValue == true))
            {
                command.Parameters[3].Value = ((int)(Down.Value));
            }
            else
            {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Side == null))
            {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[4].Value = ((string)(Side));
            }
            if ((Distance.HasValue == true))
            {
                command.Parameters[5].Value = ((int)(Distance.Value));
            }
            else
            {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((TimeLeftSec.HasValue == true))
            {
                command.Parameters[6].Value = ((int)(TimeLeftSec.Value));
            }
            else
            {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Qtr.HasValue == true))
            {
                command.Parameters[7].Value = ((int)(Qtr.Value));
            }
            else
            {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Team1 == null))
            {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[8].Value = ((string)(Team1));
            }
            if ((Team2 == null))
            {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[9].Value = ((string)(Team2));
            }
            if ((IsGameMilestone.HasValue == true))
            {
                command.Parameters[10].Value = ((bool)(IsGameMilestone.Value));
            }
            else
            {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((IsTimeout.HasValue == true))
            {
                command.Parameters[11].Value = ((bool)(IsTimeout.Value));
            }
            else
            {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Timeout.HasValue == true))
            {
                command.Parameters[12].Value = ((int)(Timeout.Value));
            }
            else
            {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((IsKick.HasValue == true))
            {
                command.Parameters[13].Value = ((bool)(IsKick.Value));
            }
            else
            {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((KickPlayer == null))
            {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[14].Value = ((string)(KickPlayer));
            }
            if ((KickYards.HasValue == true))
            {
                command.Parameters[15].Value = ((int)(KickYards.Value));
            }
            else
            {
                command.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((KickStartSide == null))
            {
                command.Parameters[16].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[16].Value = ((string)(KickStartSide));
            }
            if ((KickStartDistance.HasValue == true))
            {
                command.Parameters[17].Value = ((int)(KickStartDistance.Value));
            }
            else
            {
                command.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((KickLandSide == null))
            {
                command.Parameters[18].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[18].Value = ((string)(KickLandSide));
            }
            if ((KickLandDistance.HasValue == true))
            {
                command.Parameters[19].Value = ((int)(KickLandDistance.Value));
            }
            else
            {
                command.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((KickReturnPlayer == null))
            {
                command.Parameters[20].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[20].Value = ((string)(KickReturnPlayer));
            }
            if ((IsKickTouchback.HasValue == true))
            {
                command.Parameters[21].Value = ((bool)(IsKickTouchback.Value));
            }
            else
            {
                command.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((KickAdvanceStopSide == null))
            {
                command.Parameters[22].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[22].Value = ((string)(KickAdvanceStopSide));
            }
            if ((KickAdvanceStopYards.HasValue == true))
            {
                command.Parameters[23].Value = ((int)(KickAdvanceStopYards.Value));
            }
            else
            {
                command.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((KickReturn.HasValue == true))
            {
                command.Parameters[24].Value = ((int)(KickReturn.Value));
            }
            else
            {
                command.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((IsOnsideKick.HasValue == true))
            {
                command.Parameters[25].Value = ((bool)(IsOnsideKick.Value));
            }
            else
            {
                command.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((IsPunt.HasValue == true))
            {
                command.Parameters[26].Value = ((bool)(IsPunt.Value));
            }
            else
            {
                command.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((PuntPlayer == null))
            {
                command.Parameters[27].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[27].Value = ((string)(PuntPlayer));
            }
            if ((PuntYardage.HasValue == true))
            {
                command.Parameters[28].Value = ((int)(PuntYardage.Value));
            }
            else
            {
                command.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((PuntLandedSide == null))
            {
                command.Parameters[29].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[29].Value = ((string)(PuntLandedSide));
            }
            if ((PuntLandedDistance.HasValue == true))
            {
                command.Parameters[30].Value = ((int)(PuntLandedDistance.Value));
            }
            else
            {
                command.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((PuntSnapper == null))
            {
                command.Parameters[31].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[31].Value = ((string)(PuntSnapper));
            }
            if ((IsPuntFairCatch.HasValue == true))
            {
                command.Parameters[32].Value = ((bool)(IsPuntFairCatch.Value));
            }
            else
            {
                command.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((IsPuntMuffed.HasValue == true))
            {
                command.Parameters[33].Value = ((bool)(IsPuntMuffed.Value));
            }
            else
            {
                command.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((PuntReceiver == null))
            {
                command.Parameters[34].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[34].Value = ((string)(PuntReceiver));
            }
            if ((IsPuntTouchback.HasValue == true))
            {
                command.Parameters[35].Value = ((bool)(IsPuntTouchback.Value));
            }
            else
            {
                command.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((PuntingTeamPlayerDowned == null))
            {
                command.Parameters[36].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[36].Value = ((string)(PuntingTeamPlayerDowned));
            }
            if ((PuntReturningPlayer == null))
            {
                command.Parameters[37].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[37].Value = ((string)(PuntReturningPlayer));
            }
            if ((PuntStoppedSide == null))
            {
                command.Parameters[38].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[38].Value = ((string)(PuntStoppedSide));
            }
            if ((PuntStoppedYards.HasValue == true))
            {
                command.Parameters[39].Value = ((int)(PuntStoppedYards.Value));
            }
            else
            {
                command.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((PuntReturnYardage.HasValue == true))
            {
                command.Parameters[40].Value = ((int)(PuntReturnYardage.Value));
            }
            else
            {
                command.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((IsPuntOutOfBounds.HasValue == true))
            {
                command.Parameters[41].Value = ((bool)(IsPuntOutOfBounds.Value));
            }
            else
            {
                command.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((IsFieldGoalAttempt.HasValue == true))
            {
                command.Parameters[42].Value = ((bool)(IsFieldGoalAttempt.Value));
            }
            else
            {
                command.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((IsFieldGoalGood.HasValue == true))
            {
                command.Parameters[43].Value = ((bool)(IsFieldGoalGood.Value));
            }
            else
            {
                command.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((FieldGoalYardage.HasValue == true))
            {
                command.Parameters[44].Value = ((int)(FieldGoalYardage.Value));
            }
            else
            {
                command.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((FieldGoalPlayer == null))
            {
                command.Parameters[45].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[45].Value = ((string)(FieldGoalPlayer));
            }
            if ((FieldGoalMissBy == null))
            {
                command.Parameters[46].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[46].Value = ((string)(FieldGoalMissBy));
            }
            if ((FieldGoalCenter == null))
            {
                command.Parameters[47].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[47].Value = ((string)(FieldGoalCenter));
            }
            if ((FieldGoalHolder == null))
            {
                command.Parameters[48].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[48].Value = ((string)(FieldGoalHolder));
            }
            if ((Formation == null))
            {
                command.Parameters[49].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[49].Value = ((string)(Formation));
            }
            if ((PassPlayer == null))
            {
                command.Parameters[50].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[50].Value = ((string)(PassPlayer));
            }
            if ((IsIncomplete.HasValue == true))
            {
                command.Parameters[51].Value = ((bool)(IsIncomplete.Value));
            }
            else
            {
                command.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((IsPass.HasValue == true))
            {
                command.Parameters[52].Value = ((bool)(IsPass.Value));
            }
            else
            {
                command.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((IsSacked.HasValue == true))
            {
                command.Parameters[53].Value = ((bool)(IsSacked.Value));
            }
            else
            {
                command.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((SackAtSide == null))
            {
                command.Parameters[54].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[54].Value = ((string)(SackAtSide));
            }
            if ((SackAtDistance.HasValue == true))
            {
                command.Parameters[55].Value = ((int)(SackAtDistance.Value));
            }
            else
            {
                command.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((PassDirection == null))
            {
                command.Parameters[56].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[56].Value = ((string)(PassDirection));
            }
            if ((PassLength == null))
            {
                command.Parameters[57].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[57].Value = ((string)(PassLength));
            }
            if ((PassCaughtAtDist.HasValue == true))
            {
                command.Parameters[58].Value = ((int)(PassCaughtAtDist.Value));
            }
            else
            {
                command.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((PassCaughtAtSide == null))
            {
                command.Parameters[59].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[59].Value = ((string)(PassCaughtAtSide));
            }
            if ((PassYAC.HasValue == true))
            {
                command.Parameters[60].Value = ((int)(PassYAC.Value));
            }
            else
            {
                command.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((PassYardage.HasValue == true))
            {
                command.Parameters[61].Value = ((int)(PassYardage.Value));
            }
            else
            {
                command.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((PassStopSide == null))
            {
                command.Parameters[62].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[62].Value = ((string)(PassStopSide));
            }
            if ((PassStopDistance.HasValue == true))
            {
                command.Parameters[63].Value = ((int)(PassStopDistance.Value));
            }
            else
            {
                command.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((PassWR == null))
            {
                command.Parameters[64].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[64].Value = ((string)(PassWR));
            }
            if ((IsRun.HasValue == true))
            {
                command.Parameters[65].Value = ((bool)(IsRun.Value));
            }
            else
            {
                command.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((IsScramble.HasValue == true))
            {
                command.Parameters[66].Value = ((bool)(IsScramble.Value));
            }
            else
            {
                command.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((RunPlayer == null))
            {
                command.Parameters[67].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[67].Value = ((string)(RunPlayer));
            }
            if ((RunDirection == null))
            {
                command.Parameters[68].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[68].Value = ((string)(RunDirection));
            }
            if ((RunFormation == null))
            {
                command.Parameters[69].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[69].Value = ((string)(RunFormation));
            }
            if ((RunStopAtDist.HasValue == true))
            {
                command.Parameters[70].Value = ((int)(RunStopAtDist.Value));
            }
            else
            {
                command.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((RunStopAtSide == null))
            {
                command.Parameters[71].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[71].Value = ((string)(RunStopAtSide));
            }
            if ((RunYardage.HasValue == true))
            {
                command.Parameters[72].Value = ((int)(RunYardage.Value));
            }
            else
            {
                command.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((IsOb.HasValue == true))
            {
                command.Parameters[73].Value = ((bool)(IsOb.Value));
            }
            else
            {
                command.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((Ob == null))
            {
                command.Parameters[74].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[74].Value = ((string)(Ob));
            }
            if ((TackledByPlayer == null))
            {
                command.Parameters[75].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[75].Value = ((string)(TackledByPlayer));
            }
            if ((IsFumble.HasValue == true))
            {
                command.Parameters[76].Value = ((bool)(IsFumble.Value));
            }
            else
            {
                command.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((IsFumbleLost.HasValue == true))
            {
                command.Parameters[77].Value = ((bool)(IsFumbleLost.Value));
            }
            else
            {
                command.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((IsIntercepted.HasValue == true))
            {
                command.Parameters[78].Value = ((bool)(IsIntercepted.Value));
            }
            else
            {
                command.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((IsTouchdown.HasValue == true))
            {
                command.Parameters[79].Value = ((bool)(IsTouchdown.Value));
            }
            else
            {
                command.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((Conversion == null))
            {
                command.Parameters[80].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[80].Value = ((string)(Conversion));
            }
            if ((IsTdYardPassFromFormat.HasValue == true))
            {
                command.Parameters[81].Value = ((bool)(IsTdYardPassFromFormat.Value));
            }
            else
            {
                command.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((IsTouchdownStandardPlayFormat.HasValue == true))
            {
                command.Parameters[82].Value = ((bool)(IsTouchdownStandardPlayFormat.Value));
            }
            else
            {
                command.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((IsPenaltyCalled.HasValue == true))
            {
                command.Parameters[83].Value = ((bool)(IsPenaltyCalled.Value));
            }
            else
            {
                command.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((IsPenaltyAccepted.HasValue == true))
            {
                command.Parameters[84].Value = ((bool)(IsPenaltyAccepted.Value));
            }
            else
            {
                command.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((IsPenaltyNoPlay.HasValue == true))
            {
                command.Parameters[85].Value = ((bool)(IsPenaltyNoPlay.Value));
            }
            else
            {
                command.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((PenaltyPlayer == null))
            {
                command.Parameters[86].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[86].Value = ((string)(PenaltyPlayer));
            }
            if ((PenaltyRule == null))
            {
                command.Parameters[87].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[87].Value = ((string)(PenaltyRule));
            }
            if ((PenaltyYardage.HasValue == true))
            {
                command.Parameters[88].Value = ((int)(PenaltyYardage.Value));
            }
            else
            {
                command.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((PenaltyEnforcedAtDist.HasValue == true))
            {
                command.Parameters[89].Value = ((int)(PenaltyEnforcedAtDist.Value));
            }
            else
            {
                command.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((PenaltyEnforcedAtSide == null))
            {
                command.Parameters[90].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[90].Value = ((string)(PenaltyEnforcedAtSide));
            }
            if ((ValidatedAgainst == null))
            {
                command.Parameters[91].Value = global::System.DBNull.Value;
            }
            else
            {
                command.Parameters[91].Value = ((string)(ValidatedAgainst));
            }
            if ((IsValidated.HasValue == true))
            {
                command.Parameters[92].Value = ((bool)(IsValidated.Value));
            }
            else
            {
                command.Parameters[92].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                command.Connection.Open();
            }
            int returnValue;
            try
            {
                returnValue = command.ExecuteNonQuery();
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }

    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component
    {

        private UpdateOrderOption _updateOrder;

        private StatsTableAdapter _statsTableAdapter;

        private InjuredReserveTableAdapter _injuredReserveTableAdapter;

        private InjuryReportTableAdapter _injuryReportTableAdapter;

        private CityIslandRosterSpotsTableAdapter _cityIslandRosterSpotsTableAdapter;

        private CityIslandTeamsTableAdapter _cityIslandTeamsTableAdapter;

        private ScheduleTableAdapter _scheduleTableAdapter;

        private PlayByPlayTableAdapter _playByPlayTableAdapter;

        private ParsedPlayByPlayTableAdapter _parsedPlayByPlayTableAdapter;

        private bool _backupDataSetBeforeUpdate;

        private global::System.Data.IDbConnection _connection;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder
        {
            get
            {
                return this._updateOrder;
            }
            set
            {
                this._updateOrder = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public StatsTableAdapter StatsTableAdapter
        {
            get
            {
                return this._statsTableAdapter;
            }
            set
            {
                this._statsTableAdapter = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public InjuredReserveTableAdapter InjuredReserveTableAdapter
        {
            get
            {
                return this._injuredReserveTableAdapter;
            }
            set
            {
                this._injuredReserveTableAdapter = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public InjuryReportTableAdapter InjuryReportTableAdapter
        {
            get
            {
                return this._injuryReportTableAdapter;
            }
            set
            {
                this._injuryReportTableAdapter = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CityIslandRosterSpotsTableAdapter CityIslandRosterSpotsTableAdapter
        {
            get
            {
                return this._cityIslandRosterSpotsTableAdapter;
            }
            set
            {
                this._cityIslandRosterSpotsTableAdapter = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CityIslandTeamsTableAdapter CityIslandTeamsTableAdapter
        {
            get
            {
                return this._cityIslandTeamsTableAdapter;
            }
            set
            {
                this._cityIslandTeamsTableAdapter = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ScheduleTableAdapter ScheduleTableAdapter
        {
            get
            {
                return this._scheduleTableAdapter;
            }
            set
            {
                this._scheduleTableAdapter = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PlayByPlayTableAdapter PlayByPlayTableAdapter
        {
            get
            {
                return this._playByPlayTableAdapter;
            }
            set
            {
                this._playByPlayTableAdapter = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ParsedPlayByPlayTableAdapter ParsedPlayByPlayTableAdapter
        {
            get
            {
                return this._parsedPlayByPlayTableAdapter;
            }
            set
            {
                this._parsedPlayByPlayTableAdapter = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate
        {
            get
            {
                return this._backupDataSetBeforeUpdate;
            }
            set
            {
                this._backupDataSetBeforeUpdate = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection
        {
            get
            {
                if ((this._connection != null))
                {
                    return this._connection;
                }
                if (((this._statsTableAdapter != null)
                            && (this._statsTableAdapter.Connection != null)))
                {
                    return this._statsTableAdapter.Connection;
                }
                if (((this._injuredReserveTableAdapter != null)
                            && (this._injuredReserveTableAdapter.Connection != null)))
                {
                    return this._injuredReserveTableAdapter.Connection;
                }
                if (((this._injuryReportTableAdapter != null)
                            && (this._injuryReportTableAdapter.Connection != null)))
                {
                    return this._injuryReportTableAdapter.Connection;
                }
                if (((this._cityIslandRosterSpotsTableAdapter != null)
                            && (this._cityIslandRosterSpotsTableAdapter.Connection != null)))
                {
                    return this._cityIslandRosterSpotsTableAdapter.Connection;
                }
                if (((this._cityIslandTeamsTableAdapter != null)
                            && (this._cityIslandTeamsTableAdapter.Connection != null)))
                {
                    return this._cityIslandTeamsTableAdapter.Connection;
                }
                if (((this._scheduleTableAdapter != null)
                            && (this._scheduleTableAdapter.Connection != null)))
                {
                    return this._scheduleTableAdapter.Connection;
                }
                if (((this._playByPlayTableAdapter != null)
                            && (this._playByPlayTableAdapter.Connection != null)))
                {
                    return this._playByPlayTableAdapter.Connection;
                }
                if (((this._parsedPlayByPlayTableAdapter != null)
                            && (this._parsedPlayByPlayTableAdapter.Connection != null)))
                {
                    return this._parsedPlayByPlayTableAdapter.Connection;
                }
                return null;
            }
            set
            {
                this._connection = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount
        {
            get
            {
                int count = 0;
                if ((this._statsTableAdapter != null))
                {
                    count = (count + 1);
                }
                if ((this._injuredReserveTableAdapter != null))
                {
                    count = (count + 1);
                }
                if ((this._injuryReportTableAdapter != null))
                {
                    count = (count + 1);
                }
                if ((this._cityIslandRosterSpotsTableAdapter != null))
                {
                    count = (count + 1);
                }
                if ((this._cityIslandTeamsTableAdapter != null))
                {
                    count = (count + 1);
                }
                if ((this._scheduleTableAdapter != null))
                {
                    count = (count + 1);
                }
                if ((this._playByPlayTableAdapter != null))
                {
                    count = (count + 1);
                }
                if ((this._parsedPlayByPlayTableAdapter != null))
                {
                    count = (count + 1);
                }
                return count;
            }
        }

        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(FFToiletBowlDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows)
        {
            int result = 0;
            if ((this._scheduleTableAdapter != null))
            {
                global::System.Data.DataRow[] updatedRows = dataSet.Schedule.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null)
                            && (0 < updatedRows.Length)))
                {
                    result = (result + this._scheduleTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cityIslandTeamsTableAdapter != null))
            {
                global::System.Data.DataRow[] updatedRows = dataSet.CityIslandTeams.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null)
                            && (0 < updatedRows.Length)))
                {
                    result = (result + this._cityIslandTeamsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._parsedPlayByPlayTableAdapter != null))
            {
                global::System.Data.DataRow[] updatedRows = dataSet.ParsedPlayByPlay.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null)
                            && (0 < updatedRows.Length)))
                {
                    result = (result + this._parsedPlayByPlayTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._playByPlayTableAdapter != null))
            {
                global::System.Data.DataRow[] updatedRows = dataSet.PlayByPlay.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null)
                            && (0 < updatedRows.Length)))
                {
                    result = (result + this._playByPlayTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._injuredReserveTableAdapter != null))
            {
                global::System.Data.DataRow[] updatedRows = dataSet.InjuredReserve.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null)
                            && (0 < updatedRows.Length)))
                {
                    result = (result + this._injuredReserveTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._statsTableAdapter != null))
            {
                global::System.Data.DataRow[] updatedRows = dataSet.Stats.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null)
                            && (0 < updatedRows.Length)))
                {
                    result = (result + this._statsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cityIslandRosterSpotsTableAdapter != null))
            {
                global::System.Data.DataRow[] updatedRows = dataSet.CityIslandRosterSpots.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null)
                            && (0 < updatedRows.Length)))
                {
                    result = (result + this._cityIslandRosterSpotsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._injuryReportTableAdapter != null))
            {
                global::System.Data.DataRow[] updatedRows = dataSet.InjuryReport.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null)
                            && (0 < updatedRows.Length)))
                {
                    result = (result + this._injuryReportTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }

        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(FFToiletBowlDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows)
        {
            int result = 0;
            if ((this._scheduleTableAdapter != null))
            {
                global::System.Data.DataRow[] addedRows = dataSet.Schedule.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null)
                            && (0 < addedRows.Length)))
                {
                    result = (result + this._scheduleTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cityIslandTeamsTableAdapter != null))
            {
                global::System.Data.DataRow[] addedRows = dataSet.CityIslandTeams.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null)
                            && (0 < addedRows.Length)))
                {
                    result = (result + this._cityIslandTeamsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._parsedPlayByPlayTableAdapter != null))
            {
                global::System.Data.DataRow[] addedRows = dataSet.ParsedPlayByPlay.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null)
                            && (0 < addedRows.Length)))
                {
                    result = (result + this._parsedPlayByPlayTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._playByPlayTableAdapter != null))
            {
                global::System.Data.DataRow[] addedRows = dataSet.PlayByPlay.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null)
                            && (0 < addedRows.Length)))
                {
                    result = (result + this._playByPlayTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._injuredReserveTableAdapter != null))
            {
                global::System.Data.DataRow[] addedRows = dataSet.InjuredReserve.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null)
                            && (0 < addedRows.Length)))
                {
                    result = (result + this._injuredReserveTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._statsTableAdapter != null))
            {
                global::System.Data.DataRow[] addedRows = dataSet.Stats.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null)
                            && (0 < addedRows.Length)))
                {
                    result = (result + this._statsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cityIslandRosterSpotsTableAdapter != null))
            {
                global::System.Data.DataRow[] addedRows = dataSet.CityIslandRosterSpots.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null)
                            && (0 < addedRows.Length)))
                {
                    result = (result + this._cityIslandRosterSpotsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._injuryReportTableAdapter != null))
            {
                global::System.Data.DataRow[] addedRows = dataSet.InjuryReport.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null)
                            && (0 < addedRows.Length)))
                {
                    result = (result + this._injuryReportTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }

        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(FFToiletBowlDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows)
        {
            int result = 0;
            if ((this._injuryReportTableAdapter != null))
            {
                global::System.Data.DataRow[] deletedRows = dataSet.InjuryReport.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null)
                            && (0 < deletedRows.Length)))
                {
                    result = (result + this._injuryReportTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cityIslandRosterSpotsTableAdapter != null))
            {
                global::System.Data.DataRow[] deletedRows = dataSet.CityIslandRosterSpots.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null)
                            && (0 < deletedRows.Length)))
                {
                    result = (result + this._cityIslandRosterSpotsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._statsTableAdapter != null))
            {
                global::System.Data.DataRow[] deletedRows = dataSet.Stats.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null)
                            && (0 < deletedRows.Length)))
                {
                    result = (result + this._statsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._injuredReserveTableAdapter != null))
            {
                global::System.Data.DataRow[] deletedRows = dataSet.InjuredReserve.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null)
                            && (0 < deletedRows.Length)))
                {
                    result = (result + this._injuredReserveTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._playByPlayTableAdapter != null))
            {
                global::System.Data.DataRow[] deletedRows = dataSet.PlayByPlay.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null)
                            && (0 < deletedRows.Length)))
                {
                    result = (result + this._playByPlayTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._parsedPlayByPlayTableAdapter != null))
            {
                global::System.Data.DataRow[] deletedRows = dataSet.ParsedPlayByPlay.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null)
                            && (0 < deletedRows.Length)))
                {
                    result = (result + this._parsedPlayByPlayTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cityIslandTeamsTableAdapter != null))
            {
                global::System.Data.DataRow[] deletedRows = dataSet.CityIslandTeams.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null)
                            && (0 < deletedRows.Length)))
                {
                    result = (result + this._cityIslandTeamsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._scheduleTableAdapter != null))
            {
                global::System.Data.DataRow[] deletedRows = dataSet.Schedule.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null)
                            && (0 < deletedRows.Length)))
                {
                    result = (result + this._scheduleTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }

        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows)
        {
            if (((updatedRows == null)
                        || (updatedRows.Length < 1)))
            {
                return updatedRows;
            }
            if (((allAddedRows == null)
                        || (allAddedRows.Count < 1)))
            {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1))
            {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false))
                {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }

        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(FFToiletBowlDataSet dataSet)
        {
            if ((dataSet == null))
            {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false))
            {
                return 0;
            }
            if (((this._statsTableAdapter != null)
                        && (this.MatchTableAdapterConnection(this._statsTableAdapter.Connection) == false)))
            {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._injuredReserveTableAdapter != null)
                        && (this.MatchTableAdapterConnection(this._injuredReserveTableAdapter.Connection) == false)))
            {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._injuryReportTableAdapter != null)
                        && (this.MatchTableAdapterConnection(this._injuryReportTableAdapter.Connection) == false)))
            {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cityIslandRosterSpotsTableAdapter != null)
                        && (this.MatchTableAdapterConnection(this._cityIslandRosterSpotsTableAdapter.Connection) == false)))
            {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cityIslandTeamsTableAdapter != null)
                        && (this.MatchTableAdapterConnection(this._cityIslandTeamsTableAdapter.Connection) == false)))
            {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._scheduleTableAdapter != null)
                        && (this.MatchTableAdapterConnection(this._scheduleTableAdapter.Connection) == false)))
            {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._playByPlayTableAdapter != null)
                        && (this.MatchTableAdapterConnection(this._playByPlayTableAdapter.Connection) == false)))
            {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._parsedPlayByPlayTableAdapter != null)
                        && (this.MatchTableAdapterConnection(this._parsedPlayByPlayTableAdapter.Connection) == false)))
            {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null))
            {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken)
                        == global::System.Data.ConnectionState.Broken))
            {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed))
            {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null))
            {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate)
            {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try
            {
                // ---- Prepare for update -----------
                //
                if ((this._statsTableAdapter != null))
                {
                    revertConnections.Add(this._statsTableAdapter, this._statsTableAdapter.Connection);
                    this._statsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._statsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._statsTableAdapter.Adapter.AcceptChangesDuringUpdate)
                    {
                        this._statsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._statsTableAdapter.Adapter);
                    }
                }
                if ((this._injuredReserveTableAdapter != null))
                {
                    revertConnections.Add(this._injuredReserveTableAdapter, this._injuredReserveTableAdapter.Connection);
                    this._injuredReserveTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._injuredReserveTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._injuredReserveTableAdapter.Adapter.AcceptChangesDuringUpdate)
                    {
                        this._injuredReserveTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._injuredReserveTableAdapter.Adapter);
                    }
                }
                if ((this._injuryReportTableAdapter != null))
                {
                    revertConnections.Add(this._injuryReportTableAdapter, this._injuryReportTableAdapter.Connection);
                    this._injuryReportTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._injuryReportTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._injuryReportTableAdapter.Adapter.AcceptChangesDuringUpdate)
                    {
                        this._injuryReportTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._injuryReportTableAdapter.Adapter);
                    }
                }
                if ((this._cityIslandRosterSpotsTableAdapter != null))
                {
                    revertConnections.Add(this._cityIslandRosterSpotsTableAdapter, this._cityIslandRosterSpotsTableAdapter.Connection);
                    this._cityIslandRosterSpotsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cityIslandRosterSpotsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cityIslandRosterSpotsTableAdapter.Adapter.AcceptChangesDuringUpdate)
                    {
                        this._cityIslandRosterSpotsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cityIslandRosterSpotsTableAdapter.Adapter);
                    }
                }
                if ((this._cityIslandTeamsTableAdapter != null))
                {
                    revertConnections.Add(this._cityIslandTeamsTableAdapter, this._cityIslandTeamsTableAdapter.Connection);
                    this._cityIslandTeamsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cityIslandTeamsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cityIslandTeamsTableAdapter.Adapter.AcceptChangesDuringUpdate)
                    {
                        this._cityIslandTeamsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cityIslandTeamsTableAdapter.Adapter);
                    }
                }
                if ((this._scheduleTableAdapter != null))
                {
                    revertConnections.Add(this._scheduleTableAdapter, this._scheduleTableAdapter.Connection);
                    this._scheduleTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._scheduleTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._scheduleTableAdapter.Adapter.AcceptChangesDuringUpdate)
                    {
                        this._scheduleTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._scheduleTableAdapter.Adapter);
                    }
                }
                if ((this._playByPlayTableAdapter != null))
                {
                    revertConnections.Add(this._playByPlayTableAdapter, this._playByPlayTableAdapter.Connection);
                    this._playByPlayTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._playByPlayTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._playByPlayTableAdapter.Adapter.AcceptChangesDuringUpdate)
                    {
                        this._playByPlayTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._playByPlayTableAdapter.Adapter);
                    }
                }
                if ((this._parsedPlayByPlayTableAdapter != null))
                {
                    revertConnections.Add(this._parsedPlayByPlayTableAdapter, this._parsedPlayByPlayTableAdapter.Connection);
                    this._parsedPlayByPlayTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._parsedPlayByPlayTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._parsedPlayByPlayTableAdapter.Adapter.AcceptChangesDuringUpdate)
                    {
                        this._parsedPlayByPlayTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._parsedPlayByPlayTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete))
                {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else
                {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count))
                {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1))
                    {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count))
                {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1))
                    {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex)
            {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate)
                {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else
                {
                    if ((0 < allAddedRows.Count))
                    {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1))
                        {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally
            {
                if (workConnOpened)
                {
                    workConnection.Close();
                }
                if ((this._statsTableAdapter != null))
                {
                    this._statsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._statsTableAdapter]));
                    this._statsTableAdapter.Transaction = null;
                }
                if ((this._injuredReserveTableAdapter != null))
                {
                    this._injuredReserveTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._injuredReserveTableAdapter]));
                    this._injuredReserveTableAdapter.Transaction = null;
                }
                if ((this._injuryReportTableAdapter != null))
                {
                    this._injuryReportTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._injuryReportTableAdapter]));
                    this._injuryReportTableAdapter.Transaction = null;
                }
                if ((this._cityIslandRosterSpotsTableAdapter != null))
                {
                    this._cityIslandRosterSpotsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cityIslandRosterSpotsTableAdapter]));
                    this._cityIslandRosterSpotsTableAdapter.Transaction = null;
                }
                if ((this._cityIslandTeamsTableAdapter != null))
                {
                    this._cityIslandTeamsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cityIslandTeamsTableAdapter]));
                    this._cityIslandTeamsTableAdapter.Transaction = null;
                }
                if ((this._scheduleTableAdapter != null))
                {
                    this._scheduleTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._scheduleTableAdapter]));
                    this._scheduleTableAdapter.Transaction = null;
                }
                if ((this._playByPlayTableAdapter != null))
                {
                    this._playByPlayTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._playByPlayTableAdapter]));
                    this._playByPlayTableAdapter.Transaction = null;
                }
                if ((this._parsedPlayByPlayTableAdapter != null))
                {
                    this._parsedPlayByPlayTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._parsedPlayByPlayTableAdapter]));
                    this._parsedPlayByPlayTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count))
                {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1))
                    {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst)
        {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection)
        {
            if ((this._connection != null))
            {
                return true;
            }
            if (((this.Connection == null)
                        || (inputConnection == null)))
            {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal))
            {
                return true;
            }
            return false;
        }

        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption
        {

            InsertUpdateDelete = 0,

            UpdateInsertDelete = 1,
        }

        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow>
        {

            private global::System.Data.DataRelation _relation;

            private int _childFirst;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst)
            {
                this._relation = relation;
                if (childFirst)
                {
                    this._childFirst = -1;
                }
                else
                {
                    this._childFirst = 1;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance)
            {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null)
                            && (traversedRows.ContainsKey(parent) == false));
                )
                {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0))
                {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null)
                                && (traversedRows.ContainsKey(parent) == false));
                    )
                    {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2)
            {
                if (object.ReferenceEquals(row1, row2))
                {
                    return 0;
                }
                if ((row1 == null))
                {
                    return -1;
                }
                if ((row2 == null))
                {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2))
                {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null)
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)))
                    {
                        return -1;
                    }
                    else
                    {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591